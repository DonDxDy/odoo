odoo.define('web_editor.jabberwock', function(require) {
// 'use strict';
var JWEditor =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./packages/build-odoo-integration/odoo-integration.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/BasicEditor.ts":
/*!********************************!*\
  !*** ./bundles/BasicEditor.ts ***!
  \********************************/
/*! exports provided: BasicEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicEditor", function() { return BasicEditor; });
/* harmony import */ var _packages_core_src_JWEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../packages/core/src/JWEditor */ "./packages/core/src/JWEditor.ts");
/* harmony import */ var _packages_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../packages/plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _packages_plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packages/plugin-html/src/Html */ "./packages/plugin-html/src/Html.ts");
/* harmony import */ var _packages_plugin_char_src_Char__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../packages/plugin-char/src/Char */ "./packages/plugin-char/src/Char.ts");
/* harmony import */ var _packages_plugin_linebreak_src_LineBreak__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packages/plugin-linebreak/src/LineBreak */ "./packages/plugin-linebreak/src/LineBreak.ts");
/* harmony import */ var _packages_plugin_heading_src_Heading__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../packages/plugin-heading/src/Heading */ "./packages/plugin-heading/src/Heading.ts");
/* harmony import */ var _packages_plugin_paragraph_src_Paragraph__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../packages/plugin-paragraph/src/Paragraph */ "./packages/plugin-paragraph/src/Paragraph.ts");
/* harmony import */ var _packages_plugin_list_src_List__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../packages/plugin-list/src/List */ "./packages/plugin-list/src/List.ts");
/* harmony import */ var _packages_plugin_indent_src_Indent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../packages/plugin-indent/src/Indent */ "./packages/plugin-indent/src/Indent.ts");
/* harmony import */ var _packages_plugin_paragraph_src_ParagraphNode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../packages/plugin-paragraph/src/ParagraphNode */ "./packages/plugin-paragraph/src/ParagraphNode.ts");
/* harmony import */ var _packages_plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../packages/plugin-linebreak/src/LineBreakNode */ "./packages/plugin-linebreak/src/LineBreakNode.ts");
/* harmony import */ var _packages_plugin_span_src_Span__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../packages/plugin-span/src/Span */ "./packages/plugin-span/src/Span.ts");
/* harmony import */ var _packages_plugin_bold_src_Bold__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../packages/plugin-bold/src/Bold */ "./packages/plugin-bold/src/Bold.ts");
/* harmony import */ var _packages_plugin_italic_src_Italic__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../packages/plugin-italic/src/Italic */ "./packages/plugin-italic/src/Italic.ts");
/* harmony import */ var _packages_plugin_underline_src_Underline__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../packages/plugin-underline/src/Underline */ "./packages/plugin-underline/src/Underline.ts");
/* harmony import */ var _packages_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../packages/plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _packages_plugin_link_src_Link__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../packages/plugin-link/src/Link */ "./packages/plugin-link/src/Link.ts");
/* harmony import */ var _packages_plugin_divider_src_Divider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../packages/plugin-divider/src/Divider */ "./packages/plugin-divider/src/Divider.ts");
/* harmony import */ var _packages_plugin_image_src_Image__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../packages/plugin-image/src/Image */ "./packages/plugin-image/src/Image.ts");
/* harmony import */ var _packages_plugin_subscript_src_Subscript__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../packages/plugin-subscript/src/Subscript */ "./packages/plugin-subscript/src/Subscript.ts");
/* harmony import */ var _packages_plugin_superscript_src_Superscript__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../packages/plugin-superscript/src/Superscript */ "./packages/plugin-superscript/src/Superscript.ts");
/* harmony import */ var _packages_plugin_blockquote_src_Blockquote__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../packages/plugin-blockquote/src/Blockquote */ "./packages/plugin-blockquote/src/Blockquote.ts");
/* harmony import */ var _packages_plugin_youtube_src_Youtube__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../packages/plugin-youtube/src/Youtube */ "./packages/plugin-youtube/src/Youtube.ts");
/* harmony import */ var _packages_plugin_table_src_Table__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../packages/plugin-table/src/Table */ "./packages/plugin-table/src/Table.ts");
/* harmony import */ var _packages_plugin_metadata_src_Metadata__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../packages/plugin-metadata/src/Metadata */ "./packages/plugin-metadata/src/Metadata.ts");
/* harmony import */ var _packages_plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../packages/plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _packages_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../packages/plugin-keymap/src/Keymap */ "./packages/plugin-keymap/src/Keymap.ts");
/* harmony import */ var _packages_plugin_align_src_Align__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../packages/plugin-align/src/Align */ "./packages/plugin-align/src/Align.ts");
/* harmony import */ var _packages_plugin_pre_src_Pre__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../packages/plugin-pre/src/Pre */ "./packages/plugin-pre/src/Pre.ts");
/* harmony import */ var _packages_plugin_textcolor_src_TextColor__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../packages/plugin-textcolor/src/TextColor */ "./packages/plugin-textcolor/src/TextColor.ts");
/* harmony import */ var _packages_plugin_backgroundcolor_src_BackgroundColor__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../packages/plugin-backgroundcolor/src/BackgroundColor */ "./packages/plugin-backgroundcolor/src/BackgroundColor.ts");
/* harmony import */ var _packages_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../packages/plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");
/* harmony import */ var _packages_plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../packages/plugin-dom-layout/src/DomLayout */ "./packages/plugin-dom-layout/src/DomLayout.ts");
/* harmony import */ var _packages_plugin_dom_editable_src_DomEditable__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../packages/plugin-dom-editable/src/DomEditable */ "./packages/plugin-dom-editable/src/DomEditable.ts");
/* harmony import */ var _packages_plugin_input_src_Input__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../packages/plugin-input/src/Input */ "./packages/plugin-input/src/Input.ts");
/* harmony import */ var _packages_plugin_dialog_src_Dialog__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../packages/plugin-dialog/src/Dialog */ "./packages/plugin-dialog/src/Dialog.ts");
/* harmony import */ var _basicLayout_xml__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./basicLayout.xml */ "./bundles/basicLayout.xml");
/* harmony import */ var _basicLayout_xml__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(_basicLayout_xml__WEBPACK_IMPORTED_MODULE_36__);
/* harmony import */ var _basicLayout_css__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./basicLayout.css */ "./bundles/basicLayout.css");
/* harmony import */ var _basicLayout_css__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(_basicLayout_css__WEBPACK_IMPORTED_MODULE_37__);






































class BasicEditor extends _packages_core_src_JWEditor__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super();
        this.configure({
            defaults: {
                Container: _packages_plugin_paragraph_src_ParagraphNode__WEBPACK_IMPORTED_MODULE_9__["ParagraphNode"],
                Separator: _packages_plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_10__["LineBreakNode"],
            },
            plugins: [
                [_packages_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"]],
                [_packages_plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_25__["Renderer"]],
                [_packages_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_31__["Layout"]],
                [_packages_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_26__["Keymap"]],
                [_packages_plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_2__["Html"]],
                [_packages_plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_32__["DomLayout"]],
                [_packages_plugin_dom_editable_src_DomEditable__WEBPACK_IMPORTED_MODULE_33__["DomEditable"]],
                // [
                //     Dom,
                //     {
                //         afterRender: (editable: HTMLElement) => console.log('afterRender'),
                //     },
                // ],
                [_packages_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_15__["Inline"]],
                [_packages_plugin_char_src_Char__WEBPACK_IMPORTED_MODULE_3__["Char"]],
                [_packages_plugin_linebreak_src_LineBreak__WEBPACK_IMPORTED_MODULE_4__["LineBreak"]],
                [_packages_plugin_heading_src_Heading__WEBPACK_IMPORTED_MODULE_5__["Heading"]],
                [_packages_plugin_paragraph_src_Paragraph__WEBPACK_IMPORTED_MODULE_6__["Paragraph"]],
                [_packages_plugin_list_src_List__WEBPACK_IMPORTED_MODULE_7__["List"]],
                [_packages_plugin_indent_src_Indent__WEBPACK_IMPORTED_MODULE_8__["Indent"]],
                [_packages_plugin_span_src_Span__WEBPACK_IMPORTED_MODULE_11__["Span"]],
                [_packages_plugin_bold_src_Bold__WEBPACK_IMPORTED_MODULE_12__["Bold"]],
                [_packages_plugin_italic_src_Italic__WEBPACK_IMPORTED_MODULE_13__["Italic"]],
                [_packages_plugin_underline_src_Underline__WEBPACK_IMPORTED_MODULE_14__["Underline"]],
                [_packages_plugin_link_src_Link__WEBPACK_IMPORTED_MODULE_16__["Link"]],
                [_packages_plugin_divider_src_Divider__WEBPACK_IMPORTED_MODULE_17__["Divider"]],
                [_packages_plugin_image_src_Image__WEBPACK_IMPORTED_MODULE_18__["Image"]],
                [_packages_plugin_subscript_src_Subscript__WEBPACK_IMPORTED_MODULE_19__["Subscript"]],
                [_packages_plugin_superscript_src_Superscript__WEBPACK_IMPORTED_MODULE_20__["Superscript"]],
                [_packages_plugin_blockquote_src_Blockquote__WEBPACK_IMPORTED_MODULE_21__["Blockquote"]],
                [_packages_plugin_youtube_src_Youtube__WEBPACK_IMPORTED_MODULE_22__["Youtube"]],
                [_packages_plugin_table_src_Table__WEBPACK_IMPORTED_MODULE_23__["Table"]],
                [_packages_plugin_metadata_src_Metadata__WEBPACK_IMPORTED_MODULE_24__["Metadata"]],
                [_packages_plugin_align_src_Align__WEBPACK_IMPORTED_MODULE_27__["Align"]],
                [_packages_plugin_pre_src_Pre__WEBPACK_IMPORTED_MODULE_28__["Pre"]],
                [_packages_plugin_textcolor_src_TextColor__WEBPACK_IMPORTED_MODULE_29__["TextColor"]],
                [_packages_plugin_backgroundcolor_src_BackgroundColor__WEBPACK_IMPORTED_MODULE_30__["BackgroundColor"]],
                [_packages_plugin_input_src_Input__WEBPACK_IMPORTED_MODULE_34__["Input"]],
                [_packages_plugin_dialog_src_Dialog__WEBPACK_IMPORTED_MODULE_35__["Dialog"]],
            ],
        });
        this.configure(_packages_plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_32__["DomLayout"], {
            components: [
                {
                    id: 'editor',
                    render(editor) {
                        return editor.plugins.get(_packages_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"]).parse('text/html', _basicLayout_xml__WEBPACK_IMPORTED_MODULE_36___default.a);
                    },
                },
            ],
            componentZones: [['editor', 'root']],
        });
    }
}


/***/ }),

/***/ "./bundles/OdooWebsiteEditor.ts":
/*!**************************************!*\
  !*** ./bundles/OdooWebsiteEditor.ts ***!
  \**************************************/
/*! exports provided: OdooWebsiteEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooWebsiteEditor", function() { return OdooWebsiteEditor; });
/* harmony import */ var _packages_core_src_JWEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../packages/core/src/JWEditor */ "./packages/core/src/JWEditor.ts");
/* harmony import */ var _packages_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../packages/plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _packages_plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packages/plugin-html/src/Html */ "./packages/plugin-html/src/Html.ts");
/* harmony import */ var _packages_plugin_char_src_Char__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../packages/plugin-char/src/Char */ "./packages/plugin-char/src/Char.ts");
/* harmony import */ var _packages_plugin_linebreak_src_LineBreak__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packages/plugin-linebreak/src/LineBreak */ "./packages/plugin-linebreak/src/LineBreak.ts");
/* harmony import */ var _packages_plugin_heading_src_Heading__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../packages/plugin-heading/src/Heading */ "./packages/plugin-heading/src/Heading.ts");
/* harmony import */ var _packages_plugin_paragraph_src_Paragraph__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../packages/plugin-paragraph/src/Paragraph */ "./packages/plugin-paragraph/src/Paragraph.ts");
/* harmony import */ var _packages_plugin_list_src_List__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../packages/plugin-list/src/List */ "./packages/plugin-list/src/List.ts");
/* harmony import */ var _packages_plugin_indent_src_Indent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../packages/plugin-indent/src/Indent */ "./packages/plugin-indent/src/Indent.ts");
/* harmony import */ var _packages_plugin_paragraph_src_ParagraphNode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../packages/plugin-paragraph/src/ParagraphNode */ "./packages/plugin-paragraph/src/ParagraphNode.ts");
/* harmony import */ var _packages_plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../packages/plugin-linebreak/src/LineBreakNode */ "./packages/plugin-linebreak/src/LineBreakNode.ts");
/* harmony import */ var _packages_plugin_span_src_Span__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../packages/plugin-span/src/Span */ "./packages/plugin-span/src/Span.ts");
/* harmony import */ var _packages_plugin_bold_src_Bold__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../packages/plugin-bold/src/Bold */ "./packages/plugin-bold/src/Bold.ts");
/* harmony import */ var _packages_plugin_italic_src_Italic__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../packages/plugin-italic/src/Italic */ "./packages/plugin-italic/src/Italic.ts");
/* harmony import */ var _packages_plugin_underline_src_Underline__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../packages/plugin-underline/src/Underline */ "./packages/plugin-underline/src/Underline.ts");
/* harmony import */ var _packages_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../packages/plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _packages_plugin_link_src_Link__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../packages/plugin-link/src/Link */ "./packages/plugin-link/src/Link.ts");
/* harmony import */ var _packages_plugin_divider_src_Divider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../packages/plugin-divider/src/Divider */ "./packages/plugin-divider/src/Divider.ts");
/* harmony import */ var _packages_plugin_image_src_Image__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../packages/plugin-image/src/Image */ "./packages/plugin-image/src/Image.ts");
/* harmony import */ var _packages_plugin_subscript_src_Subscript__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../packages/plugin-subscript/src/Subscript */ "./packages/plugin-subscript/src/Subscript.ts");
/* harmony import */ var _packages_plugin_superscript_src_Superscript__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../packages/plugin-superscript/src/Superscript */ "./packages/plugin-superscript/src/Superscript.ts");
/* harmony import */ var _packages_plugin_blockquote_src_Blockquote__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../packages/plugin-blockquote/src/Blockquote */ "./packages/plugin-blockquote/src/Blockquote.ts");
/* harmony import */ var _packages_plugin_youtube_src_Youtube__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../packages/plugin-youtube/src/Youtube */ "./packages/plugin-youtube/src/Youtube.ts");
/* harmony import */ var _packages_plugin_table_src_Table__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../packages/plugin-table/src/Table */ "./packages/plugin-table/src/Table.ts");
/* harmony import */ var _packages_plugin_metadata_src_Metadata__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../packages/plugin-metadata/src/Metadata */ "./packages/plugin-metadata/src/Metadata.ts");
/* harmony import */ var _packages_plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../packages/plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _packages_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../packages/plugin-keymap/src/Keymap */ "./packages/plugin-keymap/src/Keymap.ts");
/* harmony import */ var _packages_plugin_align_src_Align__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../packages/plugin-align/src/Align */ "./packages/plugin-align/src/Align.ts");
/* harmony import */ var _packages_plugin_pre_src_Pre__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../packages/plugin-pre/src/Pre */ "./packages/plugin-pre/src/Pre.ts");
/* harmony import */ var _packages_plugin_textcolor_src_TextColor__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../packages/plugin-textcolor/src/TextColor */ "./packages/plugin-textcolor/src/TextColor.ts");
/* harmony import */ var _packages_plugin_backgroundcolor_src_BackgroundColor__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../packages/plugin-backgroundcolor/src/BackgroundColor */ "./packages/plugin-backgroundcolor/src/BackgroundColor.ts");
/* harmony import */ var _packages_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../packages/plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");
/* harmony import */ var _packages_plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../packages/plugin-dom-layout/src/DomLayout */ "./packages/plugin-dom-layout/src/DomLayout.ts");
/* harmony import */ var _packages_plugin_dom_editable_src_DomEditable__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../packages/plugin-dom-editable/src/DomEditable */ "./packages/plugin-dom-editable/src/DomEditable.ts");
/* harmony import */ var _basicLayout_css__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./basicLayout.css */ "./bundles/basicLayout.css");
/* harmony import */ var _basicLayout_css__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(_basicLayout_css__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var _packages_plugin_odoo_snippets_src_OdooSnippet__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../packages/plugin-odoo-snippets/src/OdooSnippet */ "./packages/plugin-odoo-snippets/src/OdooSnippet.ts");
/* harmony import */ var _packages_plugin_toolbar_src_Toolbar__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../packages/plugin-toolbar/src/Toolbar */ "./packages/plugin-toolbar/src/Toolbar.ts");
/* harmony import */ var _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../packages/plugin-heading/src/HeadingButtons */ "./packages/plugin-heading/src/HeadingButtons.ts");
/* harmony import */ var _packages_plugin_pre_src_PreButtons__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../packages/plugin-pre/src/PreButtons */ "./packages/plugin-pre/src/PreButtons.ts");
/* harmony import */ var _packages_plugin_bold_src_BoldButtons__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../packages/plugin-bold/src/BoldButtons */ "./packages/plugin-bold/src/BoldButtons.ts");
/* harmony import */ var _packages_plugin_italic_src_ItalicButtons__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../packages/plugin-italic/src/ItalicButtons */ "./packages/plugin-italic/src/ItalicButtons.ts");
/* harmony import */ var _packages_plugin_underline_src_UnderlineButtons__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../packages/plugin-underline/src/UnderlineButtons */ "./packages/plugin-underline/src/UnderlineButtons.ts");
/* harmony import */ var _packages_plugin_list_src_ListButtons__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../packages/plugin-list/src/ListButtons */ "./packages/plugin-list/src/ListButtons.ts");
/* harmony import */ var _packages_plugin_indent_src_IndentButtons__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../packages/plugin-indent/src/IndentButtons */ "./packages/plugin-indent/src/IndentButtons.ts");
/* harmony import */ var _packages_plugin_odoo_snippets_src_SaveButton__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../packages/plugin-odoo-snippets/src/SaveButton */ "./packages/plugin-odoo-snippets/src/SaveButton.ts");
/* harmony import */ var _packages_plugin_html_src_HtmlNode__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../packages/plugin-html/src/HtmlNode */ "./packages/plugin-html/src/HtmlNode.ts");
/* harmony import */ var _packages_plugin_odoo_snippets_src_MediaButton__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../packages/plugin-odoo-snippets/src/MediaButton */ "./packages/plugin-odoo-snippets/src/MediaButton.ts");
/* harmony import */ var _packages_core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../packages/core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _packages_plugin_video_src_OdooVideo__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../packages/plugin-video/src/OdooVideo */ "./packages/plugin-video/src/OdooVideo.ts");
/* harmony import */ var _packages_plugin_odoo_snippets_src_LinkButton__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../packages/plugin-odoo-snippets/src/LinkButton */ "./packages/plugin-odoo-snippets/src/LinkButton.ts");
/* harmony import */ var _packages_plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../packages/plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _packages_plugin_align_src_AlignButtons__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../packages/plugin-align/src/AlignButtons */ "./packages/plugin-align/src/AlignButtons.ts");




























































class OdooWebsiteEditor extends _packages_core_src_JWEditor__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(options) {
        super();
        class CustomPlugin extends _packages_core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_47__["JWPlugin"] {
            constructor() {
                super(...arguments);
                this.commands = options.customCommands;
            }
        }
        this.configure({
            defaults: {
                Container: _packages_plugin_paragraph_src_ParagraphNode__WEBPACK_IMPORTED_MODULE_9__["ParagraphNode"],
                Separator: _packages_plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_10__["LineBreakNode"],
            },
            plugins: [
                [_packages_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"]],
                [_packages_plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_25__["Renderer"]],
                [_packages_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_31__["Layout"]],
                [_packages_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_26__["Keymap"]],
                [_packages_plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_2__["Html"]],
                [_packages_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_15__["Inline"]],
                [_packages_plugin_char_src_Char__WEBPACK_IMPORTED_MODULE_3__["Char"]],
                [_packages_plugin_linebreak_src_LineBreak__WEBPACK_IMPORTED_MODULE_4__["LineBreak"]],
                [_packages_plugin_heading_src_Heading__WEBPACK_IMPORTED_MODULE_5__["Heading"]],
                [_packages_plugin_paragraph_src_Paragraph__WEBPACK_IMPORTED_MODULE_6__["Paragraph"]],
                [_packages_plugin_list_src_List__WEBPACK_IMPORTED_MODULE_7__["List"]],
                [_packages_plugin_indent_src_Indent__WEBPACK_IMPORTED_MODULE_8__["Indent"]],
                [_packages_plugin_span_src_Span__WEBPACK_IMPORTED_MODULE_11__["Span"]],
                [_packages_plugin_bold_src_Bold__WEBPACK_IMPORTED_MODULE_12__["Bold"]],
                [_packages_plugin_italic_src_Italic__WEBPACK_IMPORTED_MODULE_13__["Italic"]],
                [_packages_plugin_underline_src_Underline__WEBPACK_IMPORTED_MODULE_14__["Underline"]],
                [_packages_plugin_link_src_Link__WEBPACK_IMPORTED_MODULE_16__["Link"]],
                [_packages_plugin_divider_src_Divider__WEBPACK_IMPORTED_MODULE_17__["Divider"]],
                [_packages_plugin_image_src_Image__WEBPACK_IMPORTED_MODULE_18__["Image"]],
                [_packages_plugin_subscript_src_Subscript__WEBPACK_IMPORTED_MODULE_19__["Subscript"]],
                [_packages_plugin_superscript_src_Superscript__WEBPACK_IMPORTED_MODULE_20__["Superscript"]],
                [_packages_plugin_blockquote_src_Blockquote__WEBPACK_IMPORTED_MODULE_21__["Blockquote"]],
                [_packages_plugin_youtube_src_Youtube__WEBPACK_IMPORTED_MODULE_22__["Youtube"]],
                [_packages_plugin_table_src_Table__WEBPACK_IMPORTED_MODULE_23__["Table"]],
                [_packages_plugin_metadata_src_Metadata__WEBPACK_IMPORTED_MODULE_24__["Metadata"]],
                [_packages_plugin_align_src_Align__WEBPACK_IMPORTED_MODULE_27__["Align"]],
                [_packages_plugin_pre_src_Pre__WEBPACK_IMPORTED_MODULE_28__["Pre"]],
                [_packages_plugin_textcolor_src_TextColor__WEBPACK_IMPORTED_MODULE_29__["TextColor"]],
                [_packages_plugin_backgroundcolor_src_BackgroundColor__WEBPACK_IMPORTED_MODULE_30__["BackgroundColor"]],
                [_packages_plugin_odoo_snippets_src_OdooSnippet__WEBPACK_IMPORTED_MODULE_35__["OdooSnippet"]],
                // [MediaDialog],
                [_packages_plugin_video_src_OdooVideo__WEBPACK_IMPORTED_MODULE_48__["OdooVideo"]],
                [CustomPlugin],
            ],
        });
        this.configure(_packages_plugin_toolbar_src_Toolbar__WEBPACK_IMPORTED_MODULE_36__["Toolbar"], {
            layout: [
                [
                    [
                        _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__["ParagraphButton"],
                        _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__["Heading1Button"],
                        _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__["Heading2Button"],
                        _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__["Heading3Button"],
                        _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__["Heading4Button"],
                        _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__["Heading5Button"],
                        _packages_plugin_heading_src_HeadingButtons__WEBPACK_IMPORTED_MODULE_37__["Heading6Button"],
                        _packages_plugin_pre_src_PreButtons__WEBPACK_IMPORTED_MODULE_38__["PreButton"],
                    ],
                ],
                [_packages_plugin_bold_src_BoldButtons__WEBPACK_IMPORTED_MODULE_39__["BoldButton"], _packages_plugin_italic_src_ItalicButtons__WEBPACK_IMPORTED_MODULE_40__["ItalicButton"], _packages_plugin_underline_src_UnderlineButtons__WEBPACK_IMPORTED_MODULE_41__["UnderlineButton"]],
                [_packages_plugin_align_src_AlignButtons__WEBPACK_IMPORTED_MODULE_51__["AlignLeftButton"], _packages_plugin_align_src_AlignButtons__WEBPACK_IMPORTED_MODULE_51__["AlignCenterButton"], _packages_plugin_align_src_AlignButtons__WEBPACK_IMPORTED_MODULE_51__["AlignRightButton"], _packages_plugin_align_src_AlignButtons__WEBPACK_IMPORTED_MODULE_51__["AlignJustifyButton"]],
                [_packages_plugin_list_src_ListButtons__WEBPACK_IMPORTED_MODULE_42__["OrderedListButton"], _packages_plugin_list_src_ListButtons__WEBPACK_IMPORTED_MODULE_42__["UnorderedListButton"]],
                [_packages_plugin_indent_src_IndentButtons__WEBPACK_IMPORTED_MODULE_43__["IndentButton"], _packages_plugin_indent_src_IndentButtons__WEBPACK_IMPORTED_MODULE_43__["OutdentButton"]],
                [_packages_plugin_odoo_snippets_src_LinkButton__WEBPACK_IMPORTED_MODULE_49__["LinkButton"]],
                [_packages_plugin_odoo_snippets_src_MediaButton__WEBPACK_IMPORTED_MODULE_46__["MediaButton"]],
                ...(options.saveButton ? [[_packages_plugin_odoo_snippets_src_SaveButton__WEBPACK_IMPORTED_MODULE_44__["SaveButton"]]] : []),
            ],
        });
        const defaultTemplate = `
        <t t-zone="float"/>
        <t t-zone="default"/>
        <div class="wrap_editor d-flex flex-column">
            <div class="d-flex flex-row overflow-auto">
                <t t-zone="main_sidebar"/>
                <div class="d-flex flex-column overflow-auto o_editor_center">
                    <div class="o_toolbar">
                        <t t-zone="tools"/>
                    </div>
                    <div class="d-flex overflow-auto">
                        <t t-zone="snippetManipulators"/>
                        <t t-zone="main"/>
                    </div>
                </div>
            </div>
            <div class="o_debug_zone">
                <t t-zone="debug"/>
            </div>
        </div>
    `;
        this.configure(_packages_plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_32__["DomLayout"], {
            components: [
                {
                    id: 'main_template',
                    render(editor) {
                        return editor.plugins
                            .get(_packages_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"])
                            .parse('text/html', options.template || defaultTemplate);
                    },
                },
                {
                    id: 'snippet_menu',
                    render() {
                        const node = options.snippetMenuElement
                            ? new _packages_plugin_html_src_HtmlNode__WEBPACK_IMPORTED_MODULE_45__["HtmlNode"]({ domNode: options.snippetMenuElement })
                            : new _packages_plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_10__["LineBreakNode"]();
                        return Promise.resolve([node]);
                    },
                },
                {
                    id: 'snippetManipulators',
                    render() {
                        const node = options.snippetMenuElement
                            ? new _packages_plugin_html_src_HtmlNode__WEBPACK_IMPORTED_MODULE_45__["HtmlNode"]({ domNode: options.snippetManipulators })
                            : new _packages_plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_10__["LineBreakNode"]();
                        return Promise.resolve([node]);
                    },
                },
            ],
            componentZones: [
                ['main_template', 'root'],
                ['snippet_menu', 'main_sidebar'],
                ['snippetManipulators', 'snippetManipulators'],
            ],
            location: options.location,
            afterRender: options.afterRender,
        });
        this.configure(_packages_plugin_dom_editable_src_DomEditable__WEBPACK_IMPORTED_MODULE_33__["DomEditable"], {
            autoFocus: true,
            source: options.source.firstElementChild,
        });
    }
    /**
     * Get the value by rendering the "editable" component of the editor.
     */
    async getValue() {
        const renderer = this.plugins.get(_packages_plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_25__["Renderer"]);
        const layout = this.plugins.get(_packages_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_31__["Layout"]);
        const domLayout = layout.engines.dom;
        const domRenderingEngine = renderer.engines[_packages_plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_50__["HtmlDomRenderingEngine"].id];
        const editable = domLayout.components.get('editable')[0];
        const nodes = await domRenderingEngine.render(editable);
        return nodes[0];
    }
}


/***/ }),

/***/ "./bundles/basicLayout.css":
/*!*********************************!*\
  !*** ./bundles/basicLayout.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../node_modules/css-loader/dist/cjs.js!./basicLayout.css */ "./node_modules/css-loader/dist/cjs.js!./bundles/basicLayout.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);

var exported = content.locals ? content.locals : {};



module.exports = exported;

/***/ }),

/***/ "./bundles/basicLayout.xml":
/*!*********************************!*\
  !*** ./bundles/basicLayout.xml ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<jw-editor>\n    <t t-zone=\"range\"/>\n    <jw-header><t t-zone=\"tools\"/></jw-header>\n    <jw-body><t t-zone=\"main\"/></jw-body>\n    <jw-footer>\n        <t t-zone=\"status\"/>\n    </jw-footer>\n    <t-dialog>\n        <t t-zone=\"dialog\"/>\n        <t t-zone=\"default\"/>\n    </t-dialog>\n    <t t-zone=\"debug\"/>\n</jw-editor>\n"

/***/ }),

/***/ "./node_modules/@odoo/owl/dist/owl.js":
/*!********************************************!*\
  !*** ./node_modules/@odoo/owl/dist/owl.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', { value: true });

/**
 * We define here a simple event bus: it can
 * - emit events
 * - add/remove listeners.
 *
 * This is a useful pattern of communication in many cases.  For OWL, each
 * components and stores are event buses.
 */
//------------------------------------------------------------------------------
// EventBus
//------------------------------------------------------------------------------
class EventBus {
    constructor() {
        this.subscriptions = {};
    }
    /**
     * Add a listener for the 'eventType' events.
     *
     * Note that the 'owner' of this event can be anything, but will more likely
     * be a component or a class. The idea is that the callback will be called with
     * the proper owner bound.
     *
     * Also, the owner should be kind of unique. This will be used to remove the
     * listener.
     */
    on(eventType, owner, callback) {
        if (!callback) {
            throw new Error("Missing callback");
        }
        if (!this.subscriptions[eventType]) {
            this.subscriptions[eventType] = [];
        }
        this.subscriptions[eventType].push({
            owner,
            callback
        });
    }
    /**
     * Remove a listener
     */
    off(eventType, owner) {
        const subs = this.subscriptions[eventType];
        if (subs) {
            this.subscriptions[eventType] = subs.filter(s => s.owner !== owner);
        }
    }
    /**
     * Emit an event of type 'eventType'.  Any extra arguments will be passed to
     * the listeners callback.
     */
    trigger(eventType, ...args) {
        const subs = this.subscriptions[eventType] || [];
        for (let i = 0, iLen = subs.length; i < iLen; i++) {
            const sub = subs[i];
            sub.callback.call(sub.owner, ...args);
        }
    }
    /**
     * Remove all subscriptions.
     */
    clear() {
        this.subscriptions = {};
    }
}

/**
 * Owl Observer
 *
 * This code contains the logic that allows Owl to observe and react to state
 * changes.
 *
 * This is a Observer class that can observe any JS values.  The way it works
 * can be summarized thusly:
 * - primitive values are not observed at all
 * - Objects and arrays are observed by replacing them with a Proxy
 * - each object/array metadata are tracked in a weakmap, and keep a revision
 *   number
 *
 * Note that this code is loosely inspired by Vue.
 */
//------------------------------------------------------------------------------
// Observer
//------------------------------------------------------------------------------
class Observer {
    constructor() {
        this.rev = 1;
        this.allowMutations = true;
        this.weakMap = new WeakMap();
    }
    notifyCB() { }
    observe(value, parent) {
        if (value === null || typeof value !== "object" || value instanceof Date) {
            // fun fact: typeof null === 'object'
            return value;
        }
        let metadata = this.weakMap.get(value) || this._observe(value, parent);
        return metadata.proxy;
    }
    revNumber(value) {
        const metadata = this.weakMap.get(value);
        return metadata ? metadata.rev : 0;
    }
    _observe(value, parent) {
        var self = this;
        const proxy = new Proxy(value, {
            get(target, k) {
                const targetValue = target[k];
                return self.observe(targetValue, value);
            },
            set(target, key, newVal) {
                const value = target[key];
                if (newVal !== value) {
                    if (!self.allowMutations) {
                        throw new Error(`Observed state cannot be changed here! (key: "${key}", val: "${newVal}")`);
                    }
                    self._updateRevNumber(target);
                    target[key] = newVal;
                    self.notifyCB();
                }
                return true;
            },
            deleteProperty(target, key) {
                if (key in target) {
                    delete target[key];
                    self._updateRevNumber(target);
                    self.notifyCB();
                }
                return true;
            }
        });
        const metadata = {
            value,
            proxy,
            rev: this.rev,
            parent
        };
        this.weakMap.set(value, metadata);
        this.weakMap.set(metadata.proxy, metadata);
        return metadata;
    }
    _updateRevNumber(target) {
        this.rev++;
        let metadata = this.weakMap.get(target);
        let parent = target;
        do {
            metadata = this.weakMap.get(parent);
            metadata.rev++;
        } while ((parent = metadata.parent) && parent !== target);
    }
}

//------------------------------------------------------------------------------
// module/props.ts
//------------------------------------------------------------------------------
function updateProps(oldVnode, vnode) {
    var key, cur, old, elm = vnode.elm, oldProps = oldVnode.data.props, props = vnode.data.props;
    if (!oldProps && !props)
        return;
    if (oldProps === props)
        return;
    oldProps = oldProps || {};
    props = props || {};
    for (key in oldProps) {
        if (!props[key]) {
            delete elm[key];
        }
    }
    for (key in props) {
        cur = props[key];
        old = oldProps[key];
        if (old !== cur && (key !== "value" || elm[key] !== cur)) {
            elm[key] = cur;
        }
    }
}
const propsModule = {
    create: updateProps,
    update: updateProps
};
//------------------------------------------------------------------------------
// module/eventlisteners.ts
//------------------------------------------------------------------------------
function invokeHandler(handler, vnode, event) {
    if (typeof handler === "function") {
        // call function handler
        handler.call(vnode, event, vnode);
    }
    else if (typeof handler === "object") {
        // call handler with arguments
        if (typeof handler[0] === "function") {
            // special case for single argument for performance
            if (handler.length === 2) {
                handler[0].call(vnode, handler[1], event, vnode);
            }
            else {
                var args = handler.slice(1);
                args.push(event);
                args.push(vnode);
                handler[0].apply(vnode, args);
            }
        }
        else {
            // call multiple handlers
            for (let i = 0, iLen = handler.length; i < iLen; i++) {
                invokeHandler(handler[i], vnode, event);
            }
        }
    }
}
function handleEvent(event, vnode) {
    var name = event.type, on = vnode.data.on;
    // call event handler(s) if exists
    if (on) {
        if (on[name]) {
            invokeHandler(on[name], vnode, event);
        }
        else if (on["!" + name]) {
            invokeHandler(on["!" + name], vnode, event);
        }
    }
}
function createListener() {
    return function handler(event) {
        handleEvent(event, handler.vnode);
    };
}
function updateEventListeners(oldVnode, vnode) {
    var oldOn = oldVnode.data.on, oldListener = oldVnode.listener, oldElm = oldVnode.elm, on = vnode && vnode.data.on, elm = (vnode && vnode.elm), name;
    // optimization for reused immutable handlers
    if (oldOn === on) {
        return;
    }
    // remove existing listeners which no longer used
    if (oldOn && oldListener) {
        // if element changed or deleted we remove all existing listeners unconditionally
        if (!on) {
            for (name in oldOn) {
                // remove listener if element was changed or existing listeners removed
                const capture = name.charAt(0) === "!";
                name = capture ? name.slice(1) : name;
                oldElm.removeEventListener(name, oldListener, capture);
            }
        }
        else {
            for (name in oldOn) {
                // remove listener if existing listener removed
                if (!on[name]) {
                    const capture = name.charAt(0) === "!";
                    name = capture ? name.slice(1) : name;
                    oldElm.removeEventListener(name, oldListener, capture);
                }
            }
        }
    }
    // add new listeners which has not already attached
    if (on) {
        // reuse existing listener or create new
        var listener = (vnode.listener = oldVnode.listener || createListener());
        // update vnode for listener
        listener.vnode = vnode;
        // if element changed or added we add all needed listeners unconditionally
        if (!oldOn) {
            for (name in on) {
                // add listener if element was changed or new listeners added
                const capture = name.charAt(0) === "!";
                name = capture ? name.slice(1) : name;
                elm.addEventListener(name, listener, capture);
            }
        }
        else {
            for (name in on) {
                // add listener if new listener added
                if (!oldOn[name]) {
                    const capture = name.charAt(0) === "!";
                    name = capture ? name.slice(1) : name;
                    elm.addEventListener(name, listener, capture);
                }
            }
        }
    }
}
const eventListenersModule = {
    create: updateEventListeners,
    update: updateEventListeners,
    destroy: updateEventListeners
};
//------------------------------------------------------------------------------
// attributes.ts
//------------------------------------------------------------------------------
const xlinkNS = "http://www.w3.org/1999/xlink";
const xmlNS = "http://www.w3.org/XML/1998/namespace";
const colonChar = 58;
const xChar = 120;
function updateAttrs(oldVnode, vnode) {
    var key, elm = vnode.elm, oldAttrs = oldVnode.data.attrs, attrs = vnode.data.attrs;
    if (!oldAttrs && !attrs)
        return;
    if (oldAttrs === attrs)
        return;
    oldAttrs = oldAttrs || {};
    attrs = attrs || {};
    // update modified attributes, add new attributes
    for (key in attrs) {
        const cur = attrs[key];
        const old = oldAttrs[key];
        if (old !== cur) {
            if (cur === true) {
                elm.setAttribute(key, "");
            }
            else if (cur === false) {
                elm.removeAttribute(key);
            }
            else {
                if (key.charCodeAt(0) !== xChar) {
                    elm.setAttribute(key, cur);
                }
                else if (key.charCodeAt(3) === colonChar) {
                    // Assume xml namespace
                    elm.setAttributeNS(xmlNS, key, cur);
                }
                else if (key.charCodeAt(5) === colonChar) {
                    // Assume xlink namespace
                    elm.setAttributeNS(xlinkNS, key, cur);
                }
                else {
                    elm.setAttribute(key, cur);
                }
            }
        }
    }
    // remove removed attributes
    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
    // the other option is to remove all attributes with value == undefined
    for (key in oldAttrs) {
        if (!(key in attrs)) {
            elm.removeAttribute(key);
        }
    }
}
const attrsModule = {
    create: updateAttrs,
    update: updateAttrs
};
//------------------------------------------------------------------------------
// class.ts
//------------------------------------------------------------------------------
function updateClass(oldVnode, vnode) {
    var cur, name, elm, oldClass = oldVnode.data.class, klass = vnode.data.class;
    if (!oldClass && !klass)
        return;
    if (oldClass === klass)
        return;
    oldClass = oldClass || {};
    klass = klass || {};
    elm = vnode.elm;
    for (name in oldClass) {
        if (name && !klass[name]) {
            elm.classList.remove(name);
        }
    }
    for (name in klass) {
        cur = klass[name];
        if (cur !== oldClass[name]) {
            elm.classList[cur ? "add" : "remove"](name);
        }
    }
}
const classModule = { create: updateClass, update: updateClass };

/**
 * Owl VDOM
 *
 * This file contains an implementation of a virtual DOM, which is a system that
 * can generate in-memory representations of a DOM tree, compare them, and
 * eventually change a concrete DOM tree to match its representation, in an
 * hopefully efficient way.
 *
 * Note that this code is a fork of Snabbdom, slightly tweaked/optimized for our
 * needs (see https://github.com/snabbdom/snabbdom).
 *
 * The main exported values are:
 * - interface VNode
 * - h function (a helper function to generate a vnode)
 * - patch function (to apply a vnode to an actual DOM node)
 */
function vnode(sel, data, children, text, elm) {
    let key = data === undefined ? undefined : data.key;
    return { sel, data, children, text, elm, key };
}
//------------------------------------------------------------------------------
// snabbdom.ts
//------------------------------------------------------------------------------
function isUndef(s) {
    return s === undefined;
}
function isDef(s) {
    return s !== undefined;
}
const emptyNode = vnode("", {}, [], undefined, undefined);
function sameVnode(vnode1, vnode2) {
    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;
}
function isVnode(vnode) {
    return vnode.sel !== undefined;
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
    let i, map = {}, key, ch;
    for (i = beginIdx; i <= endIdx; ++i) {
        ch = children[i];
        if (ch != null) {
            key = ch.key;
            if (key !== undefined)
                map[key] = i;
        }
    }
    return map;
}
const hooks = ["create", "update", "remove", "destroy", "pre", "post"];
function init(modules, domApi) {
    let i, j, cbs = {};
    const api = domApi !== undefined ? domApi : htmlDomApi;
    for (i = 0; i < hooks.length; ++i) {
        cbs[hooks[i]] = [];
        for (j = 0; j < modules.length; ++j) {
            const hook = modules[j][hooks[i]];
            if (hook !== undefined) {
                cbs[hooks[i]].push(hook);
            }
        }
    }
    function emptyNodeAt(elm) {
        const id = elm.id ? "#" + elm.id : "";
        const c = elm.className ? "." + elm.className.split(" ").join(".") : "";
        return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
    }
    function createRmCb(childElm, listeners) {
        return function rmCb() {
            if (--listeners === 0) {
                const parent = api.parentNode(childElm);
                api.removeChild(parent, childElm);
            }
        };
    }
    function createElm(vnode, insertedVnodeQueue) {
        let i, iLen, data = vnode.data;
        if (data !== undefined) {
            if (isDef((i = data.hook)) && isDef((i = i.init))) {
                i(vnode);
                data = vnode.data;
            }
        }
        let children = vnode.children, sel = vnode.sel;
        if (sel === "!") {
            if (isUndef(vnode.text)) {
                vnode.text = "";
            }
            vnode.elm = api.createComment(vnode.text);
        }
        else if (sel !== undefined) {
            const elm = vnode.elm ||
                (vnode.elm =
                    isDef(data) && isDef((i = data.ns))
                        ? api.createElementNS(i, sel)
                        : api.createElement(sel));
            for (i = 0, iLen = cbs.create.length; i < iLen; ++i)
                cbs.create[i](emptyNode, vnode);
            if (array(children)) {
                for (i = 0, iLen = children.length; i < iLen; ++i) {
                    const ch = children[i];
                    if (ch != null) {
                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                    }
                }
            }
            else if (primitive(vnode.text)) {
                api.appendChild(elm, api.createTextNode(vnode.text));
            }
            i = vnode.data.hook; // Reuse variable
            if (isDef(i)) {
                if (i.create)
                    i.create(emptyNode, vnode);
                if (i.insert)
                    insertedVnodeQueue.push(vnode);
            }
        }
        else {
            vnode.elm = api.createTextNode(vnode.text);
        }
        return vnode.elm;
    }
    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
        for (; startIdx <= endIdx; ++startIdx) {
            const ch = vnodes[startIdx];
            if (ch != null) {
                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
            }
        }
    }
    function invokeDestroyHook(vnode) {
        let i, iLen, j, jLen, data = vnode.data;
        if (data !== undefined) {
            if (isDef((i = data.hook)) && isDef((i = i.destroy)))
                i(vnode);
            for (i = 0, iLen = cbs.destroy.length; i < iLen; ++i)
                cbs.destroy[i](vnode);
            if (vnode.children !== undefined) {
                for (j = 0, jLen = vnode.children.length; j < jLen; ++j) {
                    i = vnode.children[j];
                    if (i != null && typeof i !== "string") {
                        invokeDestroyHook(i);
                    }
                }
            }
        }
    }
    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
        for (; startIdx <= endIdx; ++startIdx) {
            let i, iLen, listeners, rm, ch = vnodes[startIdx];
            if (ch != null) {
                if (isDef(ch.sel)) {
                    invokeDestroyHook(ch);
                    listeners = cbs.remove.length + 1;
                    rm = createRmCb(ch.elm, listeners);
                    for (i = 0, iLen = cbs.remove.length; i < iLen; ++i)
                        cbs.remove[i](ch, rm);
                    if (isDef((i = ch.data)) && isDef((i = i.hook)) && isDef((i = i.remove))) {
                        i(ch, rm);
                    }
                    else {
                        rm();
                    }
                }
                else {
                    // Text node
                    api.removeChild(parentElm, ch.elm);
                }
            }
        }
    }
    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
        let oldStartIdx = 0, newStartIdx = 0;
        let oldEndIdx = oldCh.length - 1;
        let oldStartVnode = oldCh[0];
        let oldEndVnode = oldCh[oldEndIdx];
        let newEndIdx = newCh.length - 1;
        let newStartVnode = newCh[0];
        let newEndVnode = newCh[newEndIdx];
        let oldKeyToIdx;
        let idxInOld;
        let elmToMove;
        let before;
        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (oldStartVnode == null) {
                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
            }
            else if (oldEndVnode == null) {
                oldEndVnode = oldCh[--oldEndIdx];
            }
            else if (newStartVnode == null) {
                newStartVnode = newCh[++newStartIdx];
            }
            else if (newEndVnode == null) {
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newStartVnode)) {
                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                oldStartVnode = oldCh[++oldStartIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else if (sameVnode(oldEndVnode, newEndVnode)) {
                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                oldEndVnode = oldCh[--oldEndIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newEndVnode)) {
                // Vnode moved right
                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                oldStartVnode = oldCh[++oldStartIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldEndVnode, newStartVnode)) {
                // Vnode moved left
                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                oldEndVnode = oldCh[--oldEndIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                if (oldKeyToIdx === undefined) {
                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                }
                idxInOld = oldKeyToIdx[newStartVnode.key];
                if (isUndef(idxInOld)) {
                    // New element
                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    newStartVnode = newCh[++newStartIdx];
                }
                else {
                    elmToMove = oldCh[idxInOld];
                    if (elmToMove.sel !== newStartVnode.sel) {
                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    }
                    else {
                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                        oldCh[idxInOld] = undefined;
                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                    }
                    newStartVnode = newCh[++newStartIdx];
                }
            }
        }
        if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {
            if (oldStartIdx > oldEndIdx) {
                before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
                addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
            }
            else {
                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
            }
        }
    }
    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
        let i, iLen, hook;
        if (isDef((i = vnode.data)) && isDef((hook = i.hook)) && isDef((i = hook.prepatch))) {
            i(oldVnode, vnode);
        }
        const elm = (vnode.elm = oldVnode.elm);
        let oldCh = oldVnode.children;
        let ch = vnode.children;
        if (oldVnode === vnode)
            return;
        if (vnode.data !== undefined) {
            for (i = 0, iLen = cbs.update.length; i < iLen; ++i)
                cbs.update[i](oldVnode, vnode);
            i = vnode.data.hook;
            if (isDef(i) && isDef((i = i.update)))
                i(oldVnode, vnode);
        }
        if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
                if (oldCh !== ch)
                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);
            }
            else if (isDef(ch)) {
                if (isDef(oldVnode.text))
                    api.setTextContent(elm, "");
                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            }
            else if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            else if (isDef(oldVnode.text)) {
                api.setTextContent(elm, "");
            }
        }
        else if (oldVnode.text !== vnode.text) {
            if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            api.setTextContent(elm, vnode.text);
        }
        if (isDef(hook) && isDef((i = hook.postpatch))) {
            i(oldVnode, vnode);
        }
    }
    return function patch(oldVnode, vnode) {
        let i, iLen, elm, parent;
        const insertedVnodeQueue = [];
        for (i = 0, iLen = cbs.pre.length; i < iLen; ++i)
            cbs.pre[i]();
        if (!isVnode(oldVnode)) {
            oldVnode = emptyNodeAt(oldVnode);
        }
        if (sameVnode(oldVnode, vnode)) {
            patchVnode(oldVnode, vnode, insertedVnodeQueue);
        }
        else {
            elm = oldVnode.elm;
            parent = api.parentNode(elm);
            createElm(vnode, insertedVnodeQueue);
            if (parent !== null) {
                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                removeVnodes(parent, [oldVnode], 0, 0);
            }
        }
        for (i = 0, iLen = insertedVnodeQueue.length; i < iLen; ++i) {
            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
        }
        for (i = 0, iLen = cbs.post.length; i < iLen; ++i)
            cbs.post[i]();
        return vnode;
    };
}
//------------------------------------------------------------------------------
// is.ts
//------------------------------------------------------------------------------
const array = Array.isArray;
function primitive(s) {
    return typeof s === "string" || typeof s === "number";
}
function createElement(tagName) {
    return document.createElement(tagName);
}
function createElementNS(namespaceURI, qualifiedName) {
    return document.createElementNS(namespaceURI, qualifiedName);
}
function createTextNode(text) {
    return document.createTextNode(text);
}
function createComment(text) {
    return document.createComment(text);
}
function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
    node.removeChild(child);
}
function appendChild(node, child) {
    node.appendChild(child);
}
function parentNode(node) {
    return node.parentNode;
}
function nextSibling(node) {
    return node.nextSibling;
}
function tagName(elm) {
    return elm.tagName;
}
function setTextContent(node, text) {
    node.textContent = text;
}
const htmlDomApi = {
    createElement,
    createElementNS,
    createTextNode,
    createComment,
    insertBefore,
    removeChild,
    appendChild,
    parentNode,
    nextSibling,
    tagName,
    setTextContent
};
function addNS(data, children, sel) {
    if (sel === "dummy") {
        // we do not need to add the namespace on dummy elements, they come from a
        // subcomponent, which will handle the namespace itself
        return;
    }
    data.ns = "http://www.w3.org/2000/svg";
    if (sel !== "foreignObject" && children !== undefined) {
        for (let i = 0, iLen = children.length; i < iLen; ++i) {
            const child = children[i];
            let childData = child.data;
            if (childData !== undefined) {
                addNS(childData, child.children, child.sel);
            }
        }
    }
}
function h(sel, b, c) {
    var data = {}, children, text, i, iLen;
    if (c !== undefined) {
        data = b;
        if (array(c)) {
            children = c;
        }
        else if (primitive(c)) {
            text = c;
        }
        else if (c && c.sel) {
            children = [c];
        }
    }
    else if (b !== undefined) {
        if (array(b)) {
            children = b;
        }
        else if (primitive(b)) {
            text = b;
        }
        else if (b && b.sel) {
            children = [b];
        }
        else {
            data = b;
        }
    }
    if (children !== undefined) {
        for (i = 0, iLen = children.length; i < iLen; ++i) {
            if (primitive(children[i]))
                children[i] = vnode(undefined, undefined, undefined, children[i], undefined);
        }
    }
    return vnode(sel, data, children, text, undefined);
}

const patch = init([eventListenersModule, attrsModule, propsModule, classModule]);

/**
 * Owl QWeb Expression Parser
 *
 * Owl needs in various contexts to be able to understand the structure of a
 * string representing a javascript expression.  The usual goal is to be able
 * to rewrite some variables.  For example, if a template has
 *
 *  ```xml
 *  <t t-if="computeSomething({val: state.val})">...</t>
 * ```
 *
 * this needs to be translated in something like this:
 *
 * ```js
 *   if (context["computeSomething"]({val: context["state"].val})) { ... }
 * ```
 *
 * This file contains the implementation of an extremely naive tokenizer/parser
 * and evaluator for javascript expressions.  The supported grammar is basically
 * only expressive enough to understand the shape of objects, of arrays, and
 * various operators.
 */
//------------------------------------------------------------------------------
// Misc types, constants and helpers
//------------------------------------------------------------------------------
const RESERVED_WORDS = "true,false,NaN,null,undefined,debugger,console,window,in,instanceof,new,function,return,this,eval,void,Math,RegExp,Array,Object,Date".split(",");
const WORD_REPLACEMENT = {
    and: "&&",
    or: "||",
    gt: ">",
    gte: ">=",
    lt: "<",
    lte: "<="
};
const STATIC_TOKEN_MAP = {
    "{": "LEFT_BRACE",
    "}": "RIGHT_BRACE",
    "[": "LEFT_BRACKET",
    "]": "RIGHT_BRACKET",
    ":": "COLON",
    ",": "COMMA",
    "(": "LEFT_PAREN",
    ")": "RIGHT_PAREN"
};
// note that the space after typeof is relevant. It makes sure that the formatted
// expression has a space after typeof
const OPERATORS = "...,.,===,==,+,!==,!=,!,||,&&,>=,>,<=,<,?,-,*,/,%,typeof ,=>,=,;,in ".split(",");
let tokenizeString = function (expr) {
    let s = expr[0];
    let start = s;
    if (s !== "'" && s !== '"') {
        return false;
    }
    let i = 1;
    let cur;
    while (expr[i] && expr[i] !== start) {
        cur = expr[i];
        s += cur;
        if (cur === "\\") {
            i++;
            cur = expr[i];
            if (!cur) {
                throw new Error("Invalid expression");
            }
            s += cur;
        }
        i++;
    }
    if (expr[i] !== start) {
        throw new Error("Invalid expression");
    }
    s += start;
    return { type: "VALUE", value: s };
};
let tokenizeNumber = function (expr) {
    let s = expr[0];
    if (s && s.match(/[0-9]/)) {
        let i = 1;
        while (expr[i] && expr[i].match(/[0-9]|\./)) {
            s += expr[i];
            i++;
        }
        return { type: "VALUE", value: s };
    }
    else {
        return false;
    }
};
let tokenizeSymbol = function (expr) {
    let s = expr[0];
    if (s && s.match(/[a-zA-Z_\$]/)) {
        let i = 1;
        while (expr[i] && expr[i].match(/\w/)) {
            s += expr[i];
            i++;
        }
        if (s in WORD_REPLACEMENT) {
            return { type: "OPERATOR", value: WORD_REPLACEMENT[s], size: s.length };
        }
        return { type: "SYMBOL", value: s };
    }
    else {
        return false;
    }
};
const tokenizeStatic = function (expr) {
    const char = expr[0];
    if (char && char in STATIC_TOKEN_MAP) {
        return { type: STATIC_TOKEN_MAP[char], value: char };
    }
    return false;
};
const tokenizeOperator = function (expr) {
    for (let op of OPERATORS) {
        if (expr.startsWith(op)) {
            return { type: "OPERATOR", value: op };
        }
    }
    return false;
};
const TOKENIZERS = [
    tokenizeString,
    tokenizeNumber,
    tokenizeOperator,
    tokenizeSymbol,
    tokenizeStatic
];
/**
 * Convert a javascript expression (as a string) into a list of tokens. For
 * example: `tokenize("1 + b")` will return:
 * ```js
 *  [
 *   {type: "VALUE", value: "1"},
 *   {type: "OPERATOR", value: "+"},
 *   {type: "SYMBOL", value: "b"}
 * ]
 * ```
 */
function tokenize(expr) {
    const result = [];
    let token = true;
    while (token) {
        expr = expr.trim();
        if (expr) {
            for (let tokenizer of TOKENIZERS) {
                token = tokenizer(expr);
                if (token) {
                    result.push(token);
                    expr = expr.slice(token.size || token.value.length);
                    break;
                }
            }
        }
        else {
            token = false;
        }
    }
    if (expr.length) {
        throw new Error(`Tokenizer error: could not tokenize "${expr}"`);
    }
    return result;
}
//------------------------------------------------------------------------------
// Expression "evaluator"
//------------------------------------------------------------------------------
/**
 * This is the main function exported by this file. This is the code that will
 * process an expression (given as a string) and returns another expression with
 * proper lookups in the context.
 *
 * Usually, this kind of code would be very simple to do if we had an AST (so,
 * if we had a javascript parser), since then, we would only need to find the
 * variables and replace them.  However, a parser is more complicated, and there
 * are no standard builtin parser API.
 *
 * Since this method is applied to simple javasript expressions, and the work to
 * be done is actually quite simple, we actually can get away with not using a
 * parser, which helps with the code size.
 *
 * Here is the heuristic used by this method to determine if a token is a
 * variable:
 * - by default, all symbols are considered a variable
 * - unless the previous token is a dot (in that case, this is a property: `a.b`)
 * - or if the previous token is a left brace or a comma, and the next token is
 *   a colon (in that case, this is an object key: `{a: b}`)
 *
 * Some specific code is also required to support arrow functions. If we detect
 * the arrow operator, then we add the current (or some previous tokens) token to
 * the list of variables so it does not get replaced by a lookup in the context
 */
function compileExprToArray(expr, scope) {
    scope = Object.create(scope);
    const tokens = tokenize(expr);
    for (let i = 0; i < tokens.length; i++) {
        let token = tokens[i];
        let prevToken = tokens[i - 1];
        let nextToken = tokens[i + 1];
        let isVar = token.type === "SYMBOL" && !RESERVED_WORDS.includes(token.value);
        if (token.type === "SYMBOL" && !RESERVED_WORDS.includes(token.value)) {
            if (prevToken) {
                if (prevToken.type === "OPERATOR" && prevToken.value === ".") {
                    isVar = false;
                }
                else if (prevToken.type === "LEFT_BRACE" || prevToken.type === "COMMA") {
                    if (nextToken && nextToken.type === "COLON") {
                        isVar = false;
                    }
                }
            }
        }
        if (nextToken && nextToken.type === "OPERATOR" && nextToken.value === "=>") {
            if (token.type === "RIGHT_PAREN") {
                let j = i - 1;
                while (j > 0 && tokens[j].type !== "LEFT_PAREN") {
                    if (tokens[j].type === "SYMBOL" && tokens[j].originalValue) {
                        tokens[j].value = tokens[j].originalValue;
                        scope[tokens[j].value] = { id: tokens[j].value, expr: tokens[j].value };
                    }
                    j--;
                }
            }
            else {
                scope[token.value] = { id: token.value, expr: token.value };
            }
        }
        if (isVar) {
            token.varName = token.value;
            if (token.value in scope && "id" in scope[token.value]) {
                token.value = scope[token.value].expr;
            }
            else {
                token.originalValue = token.value;
                token.value = `scope['${token.value}']`;
            }
        }
    }
    return tokens;
}
function compileExpr(expr, scope) {
    return compileExprToArray(expr, scope)
        .map(t => t.value)
        .join("");
}

const INTERP_REGEXP = /\{\{.*?\}\}/g;
//------------------------------------------------------------------------------
// Compilation Context
//------------------------------------------------------------------------------
class CompilationContext {
    constructor(name) {
        this.code = [];
        this.variables = {};
        this.escaping = false;
        this.parentNode = null;
        this.parentTextNode = null;
        this.rootNode = null;
        this.indentLevel = 0;
        this.shouldDefineParent = false;
        this.shouldDefineScope = false;
        this.protectedScopeNumber = 0;
        this.shouldDefineQWeb = false;
        this.shouldDefineUtils = false;
        this.shouldDefineRefs = false;
        this.shouldDefineResult = true;
        this.loopNumber = 0;
        this.inPreTag = false;
        this.allowMultipleRoots = false;
        this.hasParentWidget = false;
        this.hasKey0 = false;
        this.keyStack = [];
        this.rootContext = this;
        this.templateName = name || "noname";
        this.addLine("let h = this.h;");
    }
    generateID() {
        return CompilationContext.nextID++;
    }
    /**
     * This method generates a "template key", which is basically a unique key
     * which depends on the currently set keys, and on the iteration numbers (if
     * we are in a loop).
     *
     * Such a key is necessary when we need to associate an id to some element
     * generated by a template (for example, a component)
     */
    generateTemplateKey(prefix = "") {
        const id = this.generateID();
        if (this.loopNumber === 0 && !this.hasKey0) {
            return `'${prefix}__${id}__'`;
        }
        let key = `\`${prefix}__${id}__`;
        let start = this.hasKey0 ? 0 : 1;
        for (let i = start; i < this.loopNumber + 1; i++) {
            key += `\${key${i}}__`;
        }
        this.addLine(`let k${id} = ${key}\`;`);
        return `k${id}`;
    }
    generateCode() {
        if (this.shouldDefineResult) {
            this.code.unshift("    let result;");
        }
        if (this.shouldDefineScope) {
            this.code.unshift("    let scope = Object.create(context);");
        }
        if (this.shouldDefineRefs) {
            this.code.unshift("    context.__owl__.refs = context.__owl__.refs || {};");
        }
        if (this.shouldDefineParent) {
            if (this.hasParentWidget) {
                this.code.unshift("    let parent = extra.parent;");
            }
            else {
                this.code.unshift("    let parent = context;");
            }
        }
        if (this.shouldDefineQWeb) {
            this.code.unshift("    let QWeb = this.constructor;");
        }
        if (this.shouldDefineUtils) {
            this.code.unshift("    let utils = this.constructor.utils;");
        }
        return this.code;
    }
    withParent(node) {
        if (!this.allowMultipleRoots &&
            this === this.rootContext &&
            (this.parentNode || this.parentTextNode)) {
            throw new Error("A template should not have more than one root node");
        }
        if (!this.rootContext.rootNode) {
            this.rootContext.rootNode = node;
        }
        if (!this.parentNode && this.rootContext.shouldDefineResult) {
            this.addLine(`result = vn${node};`);
        }
        return this.subContext("parentNode", node);
    }
    subContext(key, value) {
        const newContext = Object.create(this);
        newContext[key] = value;
        return newContext;
    }
    indent() {
        this.rootContext.indentLevel++;
    }
    dedent() {
        this.rootContext.indentLevel--;
    }
    addLine(line) {
        const prefix = new Array(this.indentLevel + 2).join("    ");
        this.code.push(prefix + line);
        return this.code.length - 1;
    }
    addIf(condition) {
        this.addLine(`if (${condition}) {`);
        this.indent();
    }
    addElse() {
        this.dedent();
        this.addLine("} else {");
        this.indent();
    }
    closeIf() {
        this.dedent();
        this.addLine("}");
    }
    getValue(val) {
        return val in this.variables ? this.getValue(this.variables[val]) : val;
    }
    /**
     * Prepare an expression for being consumed at render time.  Its main job
     * is to
     * - replace unknown variables by a lookup in the context
     * - replace already defined variables by their internal name
     */
    formatExpression(expr) {
        this.rootContext.shouldDefineScope = true;
        return compileExpr(expr, this.variables);
    }
    captureExpression(expr) {
        this.rootContext.shouldDefineScope = true;
        const argId = this.generateID();
        const tokens = compileExprToArray(expr, this.variables);
        const done = new Set();
        return tokens
            .map(tok => {
            if (tok.varName) {
                if (!done.has(tok.varName)) {
                    done.add(tok.varName);
                    this.addLine(`const ${tok.varName}_${argId} = ${tok.value};`);
                }
                tok.value = `${tok.varName}_${argId}`;
            }
            return tok.value;
        })
            .join("");
    }
    /**
     * Perform string interpolation on the given string. Note that if the whole
     * string is an expression, it simply returns it (formatted and enclosed in
     * parentheses).
     * For instance:
     *   'Hello {{x}}!' -> `Hello ${x}`
     *   '{{x ? 'a': 'b'}}' -> (x ? 'a' : 'b')
     */
    interpolate(s) {
        let matches = s.match(INTERP_REGEXP);
        if (matches && matches[0].length === s.length) {
            return `(${this.formatExpression(s.slice(2, -2))})`;
        }
        let r = s.replace(/\{\{.*?\}\}/g, s => "${" + this.formatExpression(s.slice(2, -2)) + "}");
        return "`" + r + "`";
    }
    startProtectScope(codeBlock) {
        const protectID = this.generateID();
        this.rootContext.protectedScopeNumber++;
        this.rootContext.shouldDefineScope = true;
        const scopeExpr = `Object.create(scope);`;
        this.addLine(`let _origScope${protectID} = scope;`);
        this.addLine(`scope = ${scopeExpr}`);
        if (!codeBlock) {
            this.addLine(`scope.__access_mode__ = 'ro';`);
        }
        return protectID;
    }
    stopProtectScope(protectID) {
        this.rootContext.protectedScopeNumber--;
        this.addLine(`scope = _origScope${protectID};`);
    }
}
CompilationContext.nextID = 1;

const browser = {
    setTimeout: window.setTimeout.bind(window),
    clearTimeout: window.clearTimeout.bind(window),
    setInterval: window.setInterval.bind(window),
    clearInterval: window.clearInterval.bind(window),
    requestAnimationFrame: window.requestAnimationFrame.bind(window),
    random: Math.random,
    Date: window.Date,
    fetch: (window.fetch || (() => { })).bind(window),
    localStorage: window.localStorage
};

/**
 * Owl Utils
 *
 * We have here a small collection of utility functions:
 *
 * - whenReady
 * - loadJS
 * - loadFile
 * - escape
 * - debounce
 */
function whenReady(fn) {
    return new Promise(function (resolve) {
        if (document.readyState !== "loading") {
            resolve();
        }
        else {
            document.addEventListener("DOMContentLoaded", resolve, false);
        }
    }).then(fn || function () { });
}
const loadedScripts = {};
function loadJS(url) {
    if (url in loadedScripts) {
        return loadedScripts[url];
    }
    const promise = new Promise(function (resolve, reject) {
        const script = document.createElement("script");
        script.type = "text/javascript";
        script.src = url;
        script.onload = function () {
            resolve();
        };
        script.onerror = function () {
            reject(`Error loading file '${url}'`);
        };
        const head = document.head || document.getElementsByTagName("head")[0];
        head.appendChild(script);
    });
    loadedScripts[url] = promise;
    return promise;
}
async function loadFile(url) {
    const result = await browser.fetch(url);
    if (!result.ok) {
        throw new Error("Error while fetching xml templates");
    }
    return await result.text();
}
function escape(str) {
    if (str === undefined) {
        return "";
    }
    if (typeof str === "number") {
        return String(str);
    }
    const p = document.createElement("p");
    p.textContent = str;
    return p.innerHTML;
}
/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 *
 * Inspired by https://davidwalsh.name/javascript-debounce-function
 */
function debounce(func, wait, immediate) {
    let timeout;
    return function () {
        const context = this;
        const args = arguments;
        function later() {
            timeout = null;
            if (!immediate) {
                func.apply(context, args);
            }
        }
        const callNow = immediate && !timeout;
        browser.clearTimeout(timeout);
        timeout = browser.setTimeout(later, wait);
        if (callNow) {
            func.apply(context, args);
        }
    };
}
function shallowEqual(p1, p2) {
    for (let k in p1) {
        if (p1[k] !== p2[k]) {
            return false;
        }
    }
    return true;
}

var _utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    whenReady: whenReady,
    loadJS: loadJS,
    loadFile: loadFile,
    escape: escape,
    debounce: debounce,
    shallowEqual: shallowEqual
});

//------------------------------------------------------------------------------
// Const/global stuff/helpers
//------------------------------------------------------------------------------
const DISABLED_TAGS = ["input", "textarea", "button", "select", "option", "optgroup"];
const TRANSLATABLE_ATTRS = ["label", "title", "placeholder", "alt"];
const lineBreakRE = /[\r\n]/;
const whitespaceRE = /\s+/g;
const NODE_HOOKS_PARAMS = {
    create: "(_, n)",
    insert: "vn",
    remove: "(vn, rm)",
    destroy: "()"
};
function isComponent(obj) {
    return obj && obj.hasOwnProperty("__owl__");
}
const UTILS = {
    zero: Symbol("zero"),
    toObj(expr) {
        if (typeof expr === "string") {
            expr = expr.trim();
            if (!expr) {
                return {};
            }
            let words = expr.split(/\s+/);
            let result = {};
            for (let i = 0; i < words.length; i++) {
                result[words[i]] = true;
            }
            return result;
        }
        return expr;
    },
    shallowEqual,
    addNameSpace(vnode) {
        addNS(vnode.data, vnode.children, vnode.sel);
    },
    VDomArray: class VDomArray extends Array {
    },
    vDomToString: function (vdom) {
        return vdom
            .map(vnode => {
            if (vnode.sel) {
                const node = document.createElement(vnode.sel);
                const result = patch(node, vnode);
                return result.elm.outerHTML;
            }
            else {
                return vnode.text;
            }
        })
            .join("");
    },
    getComponent(obj) {
        while (obj && !isComponent(obj)) {
            obj = obj.__proto__;
        }
        return obj;
    },
    getScope(obj, property) {
        const obj0 = obj;
        while (obj &&
            !obj.hasOwnProperty(property) &&
            !(obj.hasOwnProperty("__access_mode__") && obj.__access_mode__ === "ro")) {
            const newObj = obj.__proto__;
            if (!newObj || isComponent(newObj)) {
                return obj0;
            }
            obj = newObj;
        }
        return obj;
    }
};
function parseXML(xml) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(xml, "text/xml");
    if (doc.getElementsByTagName("parsererror").length) {
        let msg = "Invalid XML in template.";
        const parsererrorText = doc.getElementsByTagName("parsererror")[0].textContent;
        if (parsererrorText) {
            msg += "\nThe parser has produced the following error message:\n" + parsererrorText;
            const re = /\d+/g;
            const firstMatch = re.exec(parsererrorText);
            if (firstMatch) {
                const lineNumber = Number(firstMatch[0]);
                const line = xml.split("\n")[lineNumber - 1];
                const secondMatch = re.exec(parsererrorText);
                if (line && secondMatch) {
                    const columnIndex = Number(secondMatch[0]) - 1;
                    if (line[columnIndex]) {
                        msg +=
                            `\nThe error might be located at xml line ${lineNumber} column ${columnIndex}\n` +
                                `${line}\n${"-".repeat(columnIndex - 1)}^`;
                    }
                }
            }
        }
        throw new Error(msg);
    }
    return doc;
}
function escapeQuotes(str) {
    return str.replace(/\'/g, "\\'");
}
//------------------------------------------------------------------------------
// QWeb rendering engine
//------------------------------------------------------------------------------
class QWeb extends EventBus {
    constructor(config = {}) {
        super();
        this.h = h;
        // recursiveTemplates contains sub templates called with t-call, but which
        // ends up in recursive situations.  This is very similar to the slot situation,
        // as in we need to propagate the scope.
        this.subTemplates = {};
        this.isUpdating = false;
        this.templates = Object.create(QWeb.TEMPLATES);
        if (config.templates) {
            this.addTemplates(config.templates);
        }
        if (config.translateFn) {
            this.translateFn = config.translateFn;
        }
    }
    static addDirective(directive) {
        if (directive.name in QWeb.DIRECTIVE_NAMES) {
            throw new Error(`Directive "${directive.name} already registered`);
        }
        QWeb.DIRECTIVES.push(directive);
        QWeb.DIRECTIVE_NAMES[directive.name] = 1;
        QWeb.DIRECTIVES.sort((d1, d2) => d1.priority - d2.priority);
        if (directive.extraNames) {
            directive.extraNames.forEach(n => (QWeb.DIRECTIVE_NAMES[n] = 1));
        }
    }
    static registerComponent(name, Component) {
        if (QWeb.components[name]) {
            throw new Error(`Component '${name}' has already been registered`);
        }
        QWeb.components[name] = Component;
    }
    /**
     * Register globally a template.  All QWeb instances will obtain their
     * templates from their own template map, and then, from the global static
     * TEMPLATES property.
     */
    static registerTemplate(name, template) {
        if (QWeb.TEMPLATES[name]) {
            throw new Error(`Template '${name}' has already been registered`);
        }
        const qweb = new QWeb();
        qweb.addTemplate(name, template);
        QWeb.TEMPLATES[name] = qweb.templates[name];
    }
    /**
     * Add a template to the internal template map.  Note that it is not
     * immediately compiled.
     */
    addTemplate(name, xmlString, allowDuplicate) {
        if (allowDuplicate && name in this.templates) {
            return;
        }
        const doc = parseXML(xmlString);
        if (!doc.firstChild) {
            throw new Error("Invalid template (should not be empty)");
        }
        this._addTemplate(name, doc.firstChild);
    }
    /**
     * Load templates from a xml (as a string or xml document).  This will look up
     * for the first <templates> tag, and will consider each child of this as a
     * template, with the name given by the t-name attribute.
     */
    addTemplates(xmlstr) {
        const doc = typeof xmlstr === "string" ? parseXML(xmlstr) : xmlstr;
        const templates = doc.getElementsByTagName("templates")[0];
        if (!templates) {
            return;
        }
        for (let elem of templates.children) {
            const name = elem.getAttribute("t-name");
            this._addTemplate(name, elem);
        }
    }
    _addTemplate(name, elem) {
        if (name in this.templates) {
            throw new Error(`Template ${name} already defined`);
        }
        this._processTemplate(elem);
        const template = {
            elem,
            fn: function (context, extra) {
                const compiledFunction = this._compile(name, elem);
                template.fn = compiledFunction;
                return compiledFunction.call(this, context, extra);
            }
        };
        this.templates[name] = template;
    }
    _processTemplate(elem) {
        let tbranch = elem.querySelectorAll("[t-elif], [t-else]");
        for (let i = 0, ilen = tbranch.length; i < ilen; i++) {
            let node = tbranch[i];
            let prevElem = node.previousElementSibling;
            let pattr = function (name) {
                return prevElem.getAttribute(name);
            };
            let nattr = function (name) {
                return +!!node.getAttribute(name);
            };
            if (prevElem && (pattr("t-if") || pattr("t-elif"))) {
                if (pattr("t-foreach")) {
                    throw new Error("t-if cannot stay at the same level as t-foreach when using t-elif or t-else");
                }
                if (["t-if", "t-elif", "t-else"].map(nattr).reduce(function (a, b) {
                    return a + b;
                }) > 1) {
                    throw new Error("Only one conditional branching directive is allowed per node");
                }
                // All text (with only spaces) and comment nodes (nodeType 8) between
                // branch nodes are removed
                let textNode;
                while ((textNode = node.previousSibling) !== prevElem) {
                    if (textNode.nodeValue.trim().length && textNode.nodeType !== 8) {
                        throw new Error("text is not allowed between branching directives");
                    }
                    textNode.remove();
                }
            }
            else {
                throw new Error("t-elif and t-else directives must be preceded by a t-if or t-elif directive");
            }
        }
    }
    /**
     * Render a template
     *
     * @param {string} name the template should already have been added
     */
    render(name, context = {}, extra = null) {
        const template = this.templates[name];
        if (!template) {
            throw new Error(`Template ${name} does not exist`);
        }
        return template.fn.call(this, context, extra);
    }
    /**
     * Render a template to a html string.
     *
     * Note that this is more limited than the `render` method: it is not suitable
     * to render a full component tree, since this is an asynchronous operation.
     * This method can only render templates without components.
     */
    renderToString(name, context = {}, extra) {
        const vnode = this.render(name, context, extra);
        if (vnode.sel === undefined) {
            return vnode.text;
        }
        const node = document.createElement(vnode.sel);
        const elem = patch(node, vnode).elm;
        function escapeTextNodes(node) {
            if (node.nodeType === 3) {
                node.textContent = escape(node.textContent);
            }
            for (let n of node.childNodes) {
                escapeTextNodes(n);
            }
        }
        escapeTextNodes(elem);
        return elem.outerHTML;
    }
    /**
     * Force all widgets connected to this QWeb instance to rerender themselves.
     *
     * This method is mostly useful for external code that want to modify the
     * application in some cases.  For example, a router plugin.
     */
    forceUpdate() {
        this.isUpdating = true;
        Promise.resolve().then(() => {
            if (this.isUpdating) {
                this.isUpdating = false;
                this.trigger("update");
            }
        });
    }
    _compile(name, elem, parentContext, defineKey) {
        const isDebug = elem.attributes.hasOwnProperty("t-debug");
        const ctx = new CompilationContext(name);
        if (elem.tagName !== "t") {
            ctx.shouldDefineResult = false;
        }
        if (parentContext) {
            ctx.variables = Object.create(parentContext.variables);
            ctx.parentNode = parentContext.parentNode || ctx.generateID();
            ctx.allowMultipleRoots = true;
            ctx.hasParentWidget = true;
            ctx.shouldDefineResult = false;
            ctx.addLine(`let c${ctx.parentNode} = extra.parentNode;`);
            if (defineKey) {
                ctx.addLine(`let key0 = extra.key || "";`);
                ctx.hasKey0 = true;
            }
        }
        this._compileNode(elem, ctx);
        if (!parentContext) {
            if (ctx.shouldDefineResult) {
                ctx.addLine(`return result;`);
            }
            else {
                if (!ctx.rootNode) {
                    throw new Error(`A template should have one root node (${ctx.templateName})`);
                }
                ctx.addLine(`return vn${ctx.rootNode};`);
            }
        }
        let code = ctx.generateCode();
        const templateName = ctx.templateName.replace(/`/g, "'").slice(0, 200);
        code.unshift(`    // Template name: "${templateName}"`);
        let template;
        try {
            template = new Function("context, extra", code.join("\n"));
        }
        catch (e) {
            console.groupCollapsed(`Invalid Code generated by ${templateName}`);
            console.warn(code.join("\n"));
            console.groupEnd();
            throw new Error(`Invalid generated code while compiling template '${templateName}': ${e.message}`);
        }
        if (isDebug) {
            const tpl = this.templates[name];
            if (tpl) {
                const msg = `Template: ${tpl.elem.outerHTML}\nCompiled code:\n${template.toString()}`;
                console.log(msg);
            }
        }
        return template;
    }
    /**
     * Generate code from an xml node
     *
     */
    _compileNode(node, ctx) {
        if (!(node instanceof Element)) {
            // this is a text node, there are no directive to apply
            let text = node.textContent;
            if (!ctx.inPreTag) {
                if (lineBreakRE.test(text) && !text.trim()) {
                    return;
                }
                text = text.replace(whitespaceRE, " ");
            }
            if (this.translateFn) {
                if (node.parentNode.getAttribute("t-translation") !== "off") {
                    text = this.translateFn(text);
                }
            }
            if (ctx.parentNode) {
                if (node.nodeType === 3) {
                    ctx.addLine(`c${ctx.parentNode}.push({text: \`${text}\`});`);
                }
                else if (node.nodeType === 8) {
                    ctx.addLine(`c${ctx.parentNode}.push(h('!', \`${text}\`));`);
                }
            }
            else if (ctx.parentTextNode) {
                ctx.addLine(`vn${ctx.parentTextNode}.text += \`${text}\`;`);
            }
            else {
                // this is an unusual situation: this text node is the result of the
                // template rendering.
                let nodeID = ctx.generateID();
                ctx.addLine(`let vn${nodeID} = {text: \`${text}\`};`);
                ctx.addLine(`result = vn${nodeID};`);
                ctx.rootContext.rootNode = nodeID;
                ctx.rootContext.parentTextNode = nodeID;
            }
            return;
        }
        const firstLetter = node.tagName[0];
        if (firstLetter === firstLetter.toUpperCase()) {
            // this is a component, we modify in place the xml document to change
            // <SomeComponent ... /> to <t t-component="SomeComponent" ... />
            node.setAttribute("t-component", node.tagName);
        }
        else if (node.tagName !== "t" && node.hasAttribute("t-component")) {
            throw new Error(`Directive 't-component' can only be used on <t> nodes (used on a <${node.tagName}>)`);
        }
        const attributes = node.attributes;
        const validDirectives = [];
        const finalizers = [];
        // maybe this is not optimal: we iterate on all attributes here, and again
        // just after for each directive.
        for (let i = 0; i < attributes.length; i++) {
            let attrName = attributes[i].name;
            if (attrName.startsWith("t-")) {
                let dName = attrName.slice(2).split(/-|\./)[0];
                if (!(dName in QWeb.DIRECTIVE_NAMES)) {
                    throw new Error(`Unknown QWeb directive: '${attrName}'`);
                }
                if (node.tagName !== "t" && (attrName === "t-esc" || attrName === "t-raw")) {
                    const tNode = document.createElement("t");
                    tNode.setAttribute(attrName, node.getAttribute(attrName));
                    for (let child of Array.from(node.childNodes)) {
                        tNode.appendChild(child);
                    }
                    node.appendChild(tNode);
                    node.removeAttribute(attrName);
                }
            }
        }
        const DIR_N = QWeb.DIRECTIVES.length;
        const ATTR_N = attributes.length;
        let withHandlers = false;
        for (let i = 0; i < DIR_N; i++) {
            let directive = QWeb.DIRECTIVES[i];
            let fullName;
            let value;
            for (let j = 0; j < ATTR_N; j++) {
                const name = attributes[j].name;
                if (name === "t-" + directive.name ||
                    name.startsWith("t-" + directive.name + "-") ||
                    name.startsWith("t-" + directive.name + ".")) {
                    fullName = name;
                    value = attributes[j].textContent;
                    validDirectives.push({ directive, value, fullName });
                    if (directive.name === "on" || directive.name === "model") {
                        withHandlers = true;
                    }
                }
            }
        }
        for (let { directive, value, fullName } of validDirectives) {
            if (directive.finalize) {
                finalizers.push({ directive, value, fullName });
            }
            if (directive.atNodeEncounter) {
                const isDone = directive.atNodeEncounter({
                    node,
                    qweb: this,
                    ctx,
                    fullName,
                    value
                });
                if (isDone) {
                    for (let { directive, value, fullName } of finalizers) {
                        directive.finalize({ node, qweb: this, ctx, fullName, value });
                    }
                    return;
                }
            }
        }
        if (node.nodeName !== "t") {
            let nodeID = this._compileGenericNode(node, ctx, withHandlers);
            ctx = ctx.withParent(nodeID);
            let nodeHooks = {};
            let addNodeHook = function (hook, handler) {
                nodeHooks[hook] = nodeHooks[hook] || [];
                nodeHooks[hook].push(handler);
            };
            for (let { directive, value, fullName } of validDirectives) {
                if (directive.atNodeCreation) {
                    directive.atNodeCreation({
                        node,
                        qweb: this,
                        ctx,
                        fullName,
                        value,
                        nodeID,
                        addNodeHook
                    });
                }
            }
            if (Object.keys(nodeHooks).length) {
                ctx.addLine(`p${nodeID}.hook = {`);
                for (let hook in nodeHooks) {
                    ctx.addLine(`  ${hook}: ${NODE_HOOKS_PARAMS[hook]} => {`);
                    for (let handler of nodeHooks[hook]) {
                        ctx.addLine(`    ${handler}`);
                    }
                    ctx.addLine(`  },`);
                }
                ctx.addLine(`};`);
            }
        }
        if (node.nodeName === "pre") {
            ctx = ctx.subContext("inPreTag", true);
        }
        this._compileChildren(node, ctx);
        // svg support
        // we hadd svg namespace if it is a svg or if it is a g, but only if it is
        // the root node.  This is the easiest way to support svg sub components:
        // they need to have a g tag as root. Otherwise, we would need a complete
        // list of allowed svg tags.
        const shouldAddNS = node.nodeName === "svg" || (node.nodeName === "g" && ctx.rootNode === ctx.parentNode);
        if (shouldAddNS) {
            ctx.rootContext.shouldDefineUtils = true;
            ctx.addLine(`utils.addNameSpace(vn${ctx.parentNode});`);
        }
        for (let { directive, value, fullName } of finalizers) {
            directive.finalize({ node, qweb: this, ctx, fullName, value });
        }
    }
    _compileGenericNode(node, ctx, withHandlers = true) {
        // nodeType 1 is generic tag
        if (node.nodeType !== 1) {
            throw new Error("unsupported node type");
        }
        const attributes = node.attributes;
        const attrs = [];
        const props = [];
        const tattrs = [];
        function handleBooleanProps(key, val) {
            let isProp = false;
            if (node.nodeName === "input" && key === "checked") {
                let type = node.getAttribute("type");
                if (type === "checkbox" || type === "radio") {
                    isProp = true;
                }
            }
            if (node.nodeName === "option" && key === "selected") {
                isProp = true;
            }
            if (key === "disabled" && DISABLED_TAGS.indexOf(node.nodeName) > -1) {
                isProp = true;
            }
            if ((key === "readonly" && node.nodeName === "input") || node.nodeName === "textarea") {
                isProp = true;
            }
            if (isProp) {
                props.push(`${key}: _${val}`);
            }
        }
        let classObj = "";
        for (let i = 0; i < attributes.length; i++) {
            let name = attributes[i].name;
            let value = attributes[i].textContent;
            if (this.translateFn && TRANSLATABLE_ATTRS.includes(name)) {
                value = this.translateFn(value);
            }
            // regular attributes
            if (!name.startsWith("t-") && !node.getAttribute("t-attf-" + name)) {
                const attID = ctx.generateID();
                if (name === "class") {
                    if ((value = value.trim())) {
                        let classDef = value
                            .split(/\s+/)
                            .map(a => `'${escapeQuotes(a)}':true`)
                            .join(",");
                        classObj = `_${ctx.generateID()}`;
                        ctx.addLine(`let ${classObj} = {${classDef}};`);
                    }
                }
                else {
                    ctx.addLine(`let _${attID} = '${escapeQuotes(value)}';`);
                    if (!name.match(/^[a-zA-Z]+$/)) {
                        // attribute contains 'non letters' => we want to quote it
                        name = '"' + name + '"';
                    }
                    attrs.push(`${name}: _${attID}`);
                    handleBooleanProps(name, attID);
                }
            }
            // dynamic attributes
            if (name.startsWith("t-att-")) {
                let attName = name.slice(6);
                const v = ctx.getValue(value);
                let formattedValue = typeof v === "string" ? ctx.formatExpression(v) : `scope.${v.id}`;
                if (attName === "class") {
                    ctx.rootContext.shouldDefineUtils = true;
                    formattedValue = `utils.toObj(${formattedValue})`;
                    if (classObj) {
                        ctx.addLine(`Object.assign(${classObj}, ${formattedValue})`);
                    }
                    else {
                        classObj = `_${ctx.generateID()}`;
                        ctx.addLine(`let ${classObj} = ${formattedValue};`);
                    }
                }
                else {
                    const attID = ctx.generateID();
                    if (!attName.match(/^[a-zA-Z]+$/)) {
                        // attribute contains 'non letters' => we want to quote it
                        attName = '"' + attName + '"';
                    }
                    // we need to combine dynamic with non dynamic attributes:
                    // class="a" t-att-class="'yop'" should be rendered as class="a yop"
                    const attValue = node.getAttribute(attName);
                    if (attValue) {
                        const attValueID = ctx.generateID();
                        ctx.addLine(`let _${attValueID} = ${formattedValue};`);
                        formattedValue = `'${attValue}' + (_${attValueID} ? ' ' + _${attValueID} : '')`;
                        const attrIndex = attrs.findIndex(att => att.startsWith(attName + ":"));
                        attrs.splice(attrIndex, 1);
                    }
                    ctx.addLine(`let _${attID} = ${formattedValue};`);
                    attrs.push(`${attName}: _${attID}`);
                    handleBooleanProps(attName, attID);
                }
            }
            if (name.startsWith("t-attf-")) {
                let attName = name.slice(7);
                if (!attName.match(/^[a-zA-Z]+$/)) {
                    // attribute contains 'non letters' => we want to quote it
                    attName = '"' + attName + '"';
                }
                const formattedExpr = ctx.interpolate(value);
                const attID = ctx.generateID();
                let staticVal = node.getAttribute(attName);
                if (staticVal) {
                    ctx.addLine(`let _${attID} = '${staticVal} ' + ${formattedExpr};`);
                }
                else {
                    ctx.addLine(`let _${attID} = ${formattedExpr};`);
                }
                attrs.push(`${attName}: _${attID}`);
            }
            // t-att= attributes
            if (name === "t-att") {
                let id = ctx.generateID();
                ctx.addLine(`let _${id} = ${ctx.formatExpression(value)};`);
                tattrs.push(id);
            }
        }
        let nodeID = ctx.generateID();
        let key = ctx.loopNumber || ctx.hasKey0 ? `\`\${key${ctx.loopNumber}}_${nodeID}\`` : nodeID;
        const parts = [`key:${key}`];
        if (attrs.length + tattrs.length > 0) {
            parts.push(`attrs:{${attrs.join(",")}}`);
        }
        if (props.length > 0) {
            parts.push(`props:{${props.join(",")}}`);
        }
        if (classObj) {
            parts.push(`class:${classObj}`);
        }
        if (withHandlers) {
            parts.push(`on:{}`);
        }
        ctx.addLine(`let c${nodeID} = [], p${nodeID} = {${parts.join(",")}};`);
        for (let id of tattrs) {
            ctx.addIf(`_${id} instanceof Array`);
            ctx.addLine(`p${nodeID}.attrs[_${id}[0]] = _${id}[1];`);
            ctx.addElse();
            ctx.addLine(`for (let key in _${id}) {`);
            ctx.indent();
            ctx.addLine(`p${nodeID}.attrs[key] = _${id}[key];`);
            ctx.dedent();
            ctx.addLine(`}`);
            ctx.closeIf();
        }
        ctx.addLine(`let vn${nodeID} = h('${node.nodeName}', p${nodeID}, c${nodeID});`);
        if (ctx.parentNode) {
            ctx.addLine(`c${ctx.parentNode}.push(vn${nodeID});`);
        }
        else if (ctx.loopNumber || ctx.hasKey0) {
            ctx.rootContext.shouldDefineResult = true;
            ctx.addLine(`result = vn${nodeID};`);
        }
        return nodeID;
    }
    _compileChildren(node, ctx) {
        if (node.childNodes.length > 0) {
            for (let child of Array.from(node.childNodes)) {
                this._compileNode(child, ctx);
            }
        }
    }
}
QWeb.utils = UTILS;
QWeb.components = Object.create(null);
QWeb.DIRECTIVE_NAMES = {
    name: 1,
    att: 1,
    attf: 1,
    translation: 1
};
QWeb.DIRECTIVES = [];
QWeb.TEMPLATES = {};
QWeb.nextId = 1;
// dev mode enables better error messages or more costly validations
QWeb.dev = false;
// slots contains sub templates defined with t-set inside t-component nodes, and
// are meant to be used by the t-slot directive.
QWeb.slots = {};
QWeb.nextSlotId = 1;

const parser = new DOMParser();
function htmlToVDOM(html) {
    const doc = parser.parseFromString(html, "text/html");
    const result = [];
    for (let child of doc.body.childNodes) {
        result.push(htmlToVNode(child));
    }
    return result;
}
function htmlToVNode(node) {
    if (!(node instanceof Element)) {
        return { text: node.textContent };
    }
    const attrs = {};
    for (let attr of node.attributes) {
        attrs[attr.name] = attr.textContent;
    }
    const children = [];
    for (let c of node.childNodes) {
        children.push(htmlToVNode(c));
    }
    return h(node.tagName, { attrs }, children);
}

/**
 * Owl QWeb Directives
 *
 * This file contains the implementation of most standard QWeb directives:
 * - t-esc
 * - t-raw
 * - t-set/t-value
 * - t-if/t-elif/t-else
 * - t-call
 * - t-foreach/t-as
 * - t-debug
 * - t-log
 */
//------------------------------------------------------------------------------
// t-esc and t-raw
//------------------------------------------------------------------------------
QWeb.utils.htmlToVDOM = htmlToVDOM;
function compileValueNode(value, node, qweb, ctx) {
    ctx.rootContext.shouldDefineScope = true;
    if (value === "0") {
        if (ctx.parentNode) {
            // the 'zero' magical symbol is where we can find the result of the rendering
            // of  the body of the t-call.
            ctx.rootContext.shouldDefineUtils = true;
            const zeroArgs = ctx.escaping
                ? `{text: utils.vDomToString(scope[utils.zero])}`
                : `...scope[utils.zero]`;
            ctx.addLine(`c${ctx.parentNode}.push(${zeroArgs});`);
        }
        return;
    }
    let exprID;
    if (typeof value === "string") {
        exprID = `_${ctx.generateID()}`;
        ctx.addLine(`let ${exprID} = ${ctx.formatExpression(value)};`);
    }
    else {
        exprID = `scope.${value.id}`;
    }
    ctx.addIf(`${exprID} != null`);
    if (ctx.escaping) {
        let protectID;
        if (value.hasBody) {
            protectID = ctx.startProtectScope();
            ctx.addLine(`${exprID} = ${exprID} instanceof utils.VDomArray ? utils.vDomToString(${exprID}) : ${exprID};`);
        }
        if (ctx.parentTextNode) {
            ctx.addLine(`vn${ctx.parentTextNode}.text += ${exprID};`);
        }
        else if (ctx.parentNode) {
            ctx.addLine(`c${ctx.parentNode}.push({text: ${exprID}});`);
        }
        else {
            let nodeID = ctx.generateID();
            ctx.rootContext.rootNode = nodeID;
            ctx.rootContext.parentTextNode = nodeID;
            ctx.addLine(`let vn${nodeID} = {text: ${exprID}};`);
            if (ctx.rootContext.shouldDefineResult) {
                ctx.addLine(`result = vn${nodeID}`);
            }
        }
        if (value.hasBody) {
            ctx.stopProtectScope(protectID);
        }
    }
    else {
        ctx.rootContext.shouldDefineUtils = true;
        if (value.hasBody) {
            ctx.addLine(`const vnodeArray = ${exprID} instanceof utils.VDomArray ? ${exprID} : utils.htmlToVDOM(${exprID});`);
            ctx.addLine(`c${ctx.parentNode}.push(...vnodeArray);`);
        }
        else {
            ctx.addLine(`c${ctx.parentNode}.push(...utils.htmlToVDOM(${exprID}));`);
        }
    }
    if (node.childNodes.length) {
        ctx.addElse();
        qweb._compileChildren(node, ctx);
    }
    ctx.closeIf();
}
QWeb.addDirective({
    name: "esc",
    priority: 70,
    atNodeEncounter({ node, qweb, ctx }) {
        let value = ctx.getValue(node.getAttribute("t-esc"));
        compileValueNode(value, node, qweb, ctx.subContext("escaping", true));
        return true;
    }
});
QWeb.addDirective({
    name: "raw",
    priority: 80,
    atNodeEncounter({ node, qweb, ctx }) {
        let value = ctx.getValue(node.getAttribute("t-raw"));
        compileValueNode(value, node, qweb, ctx);
        return true;
    }
});
//------------------------------------------------------------------------------
// t-set
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "set",
    extraNames: ["value"],
    priority: 60,
    atNodeEncounter({ node, qweb, ctx }) {
        ctx.rootContext.shouldDefineScope = true;
        const variable = node.getAttribute("t-set");
        let value = node.getAttribute("t-value");
        ctx.variables[variable] = ctx.variables[variable] || {};
        let qwebvar = ctx.variables[variable];
        const hasBody = node.hasChildNodes();
        qwebvar.id = variable;
        qwebvar.expr = `scope.${variable}`;
        if (value) {
            const formattedValue = ctx.formatExpression(value);
            let scopeExpr = `scope`;
            if (ctx.protectedScopeNumber) {
                ctx.rootContext.shouldDefineUtils = true;
                scopeExpr = `utils.getScope(scope, '${variable}')`;
            }
            ctx.addLine(`${scopeExpr}.${variable} = ${formattedValue};`);
            qwebvar.value = formattedValue;
        }
        if (hasBody) {
            ctx.rootContext.shouldDefineUtils = true;
            if (value) {
                ctx.addIf(`!(${qwebvar.expr})`);
            }
            const tempParentNodeID = ctx.generateID();
            const _parentNode = ctx.parentNode;
            ctx.parentNode = tempParentNodeID;
            ctx.addLine(`let c${tempParentNodeID} = new utils.VDomArray();`);
            const nodeCopy = node.cloneNode(true);
            for (let attr of ["t-set", "t-value", "t-if", "t-else", "t-elif"]) {
                nodeCopy.removeAttribute(attr);
            }
            qweb._compileNode(nodeCopy, ctx);
            ctx.addLine(`${qwebvar.expr} = c${tempParentNodeID}`);
            qwebvar.value = `c${tempParentNodeID}`;
            qwebvar.hasBody = true;
            ctx.parentNode = _parentNode;
            if (value) {
                ctx.closeIf();
            }
        }
        return true;
    }
});
//------------------------------------------------------------------------------
// t-if, t-elif, t-else
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "if",
    priority: 20,
    atNodeEncounter({ node, ctx }) {
        let cond = ctx.getValue(node.getAttribute("t-if"));
        ctx.addIf(typeof cond === "string" ? ctx.formatExpression(cond) : `scope.${cond.id}`);
        return false;
    },
    finalize({ ctx }) {
        ctx.closeIf();
    }
});
QWeb.addDirective({
    name: "elif",
    priority: 30,
    atNodeEncounter({ node, ctx }) {
        let cond = ctx.getValue(node.getAttribute("t-elif"));
        ctx.addLine(`else if (${typeof cond === "string" ? ctx.formatExpression(cond) : `scope.${cond.id}`}) {`);
        ctx.indent();
        return false;
    },
    finalize({ ctx }) {
        ctx.closeIf();
    }
});
QWeb.addDirective({
    name: "else",
    priority: 40,
    atNodeEncounter({ ctx }) {
        ctx.addLine(`else {`);
        ctx.indent();
        return false;
    },
    finalize({ ctx }) {
        ctx.closeIf();
    }
});
//------------------------------------------------------------------------------
// t-call
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "call",
    priority: 50,
    atNodeEncounter({ node, qweb, ctx }) {
        // Step 1: sanity checks
        // ------------------------------------------------
        ctx.rootContext.shouldDefineScope = true;
        ctx.rootContext.shouldDefineUtils = true;
        if (node.nodeName !== "t") {
            throw new Error("Invalid tag for t-call directive (should be 't')");
        }
        const subTemplate = node.getAttribute("t-call");
        const nodeTemplate = qweb.templates[subTemplate];
        if (!nodeTemplate) {
            throw new Error(`Cannot find template "${subTemplate}" (t-call)`);
        }
        // Step 2: compile target template in sub templates
        // ------------------------------------------------
        if (!qweb.subTemplates[subTemplate]) {
            qweb.subTemplates[subTemplate] = true;
            const subTemplateFn = qweb._compile(subTemplate, nodeTemplate.elem, ctx, true);
            qweb.subTemplates[subTemplate] = subTemplateFn;
        }
        // Step 3: compile t-call body if necessary
        // ------------------------------------------------
        let hasBody = node.hasChildNodes();
        let protectID;
        if (hasBody) {
            // we add a sub scope to protect the ambient scope
            ctx.addLine(`{`);
            ctx.indent();
            protectID = ctx.startProtectScope();
            const nodeCopy = node.cloneNode(true);
            for (let attr of ["t-if", "t-else", "t-elif", "t-call"]) {
                nodeCopy.removeAttribute(attr);
            }
            const parentNode = ctx.parentNode;
            ctx.parentNode = "__0";
            // this local scope is intended to trap c__0
            ctx.addLine(`{`);
            ctx.indent();
            ctx.addLine("let c__0 = [];");
            qweb._compileNode(nodeCopy, ctx);
            ctx.rootContext.shouldDefineUtils = true;
            ctx.addLine("scope[utils.zero] = c__0;");
            ctx.parentNode = parentNode;
            ctx.dedent();
            ctx.addLine(`}`);
        }
        // Step 4: add the appropriate function call to current component
        // ------------------------------------------------
        const callingScope = hasBody ? "scope" : "Object.assign(Object.create(context), scope)";
        const parentComponent = `utils.getComponent(context)`;
        const key = ctx.generateTemplateKey();
        const parentNode = ctx.parentNode ? `c${ctx.parentNode}` : "result";
        const extra = `Object.assign({}, extra, {parentNode: ${parentNode}, parent: ${parentComponent}, key: ${key}})`;
        if (ctx.parentNode) {
            ctx.addLine(`this.subTemplates['${subTemplate}'].call(this, ${callingScope}, ${extra});`);
        }
        else {
            // this is a t-call with no parentnode, we need to extract the result
            ctx.rootContext.shouldDefineResult = true;
            ctx.addLine(`result = []`);
            ctx.addLine(`this.subTemplates['${subTemplate}'].call(this, ${callingScope}, ${extra});`);
            ctx.addLine(`result = result[0]`);
        }
        // Step 5: restore previous scope
        // ------------------------------------------------
        if (hasBody) {
            ctx.stopProtectScope(protectID);
            ctx.dedent();
            ctx.addLine(`}`);
        }
        return true;
    }
});
//------------------------------------------------------------------------------
// t-foreach
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "foreach",
    extraNames: ["as"],
    priority: 10,
    atNodeEncounter({ node, qweb, ctx }) {
        ctx.rootContext.shouldDefineScope = true;
        ctx = ctx.subContext("loopNumber", ctx.loopNumber + 1);
        const elems = node.getAttribute("t-foreach");
        const name = node.getAttribute("t-as");
        let arrayID = ctx.generateID();
        ctx.addLine(`let _${arrayID} = ${ctx.formatExpression(elems)};`);
        ctx.addLine(`if (!_${arrayID}) { throw new Error('QWeb error: Invalid loop expression')}`);
        let keysID = ctx.generateID();
        let valuesID = ctx.generateID();
        ctx.addLine(`let _${keysID} = _${valuesID} = _${arrayID};`);
        ctx.addIf(`!(_${arrayID} instanceof Array)`);
        ctx.addLine(`_${keysID} = Object.keys(_${arrayID});`);
        ctx.addLine(`_${valuesID} = Object.values(_${arrayID});`);
        ctx.closeIf();
        ctx.addLine(`let _length${keysID} = _${keysID}.length;`);
        let varsID = ctx.startProtectScope(true);
        const loopVar = `i${ctx.loopNumber}`;
        ctx.addLine(`for (let ${loopVar} = 0; ${loopVar} < _length${keysID}; ${loopVar}++) {`);
        ctx.indent();
        ctx.addLine(`scope.${name}_first = ${loopVar} === 0`);
        ctx.addLine(`scope.${name}_last = ${loopVar} === _length${keysID} - 1`);
        ctx.addLine(`scope.${name}_index = ${loopVar}`);
        ctx.addLine(`scope.${name} = _${keysID}[${loopVar}]`);
        ctx.addLine(`scope.${name}_value = _${valuesID}[${loopVar}]`);
        const nodeCopy = node.cloneNode(true);
        let shouldWarn = !nodeCopy.hasAttribute("t-key") &&
            node.children.length === 1 &&
            node.children[0].tagName !== "t" &&
            !node.children[0].hasAttribute("t-key");
        if (shouldWarn) {
            console.warn(`Directive t-foreach should always be used with a t-key! (in template: '${ctx.templateName}')`);
        }
        if (nodeCopy.hasAttribute("t-key")) {
            const expr = ctx.formatExpression(nodeCopy.getAttribute("t-key"));
            ctx.addLine(`let key${ctx.loopNumber} = ${expr};`);
            nodeCopy.removeAttribute("t-key");
        }
        else {
            ctx.addLine(`let key${ctx.loopNumber} = i${ctx.loopNumber};`);
        }
        nodeCopy.removeAttribute("t-foreach");
        qweb._compileNode(nodeCopy, ctx);
        ctx.dedent();
        ctx.addLine("}");
        ctx.stopProtectScope(varsID);
        return true;
    }
});
//------------------------------------------------------------------------------
// t-debug
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "debug",
    priority: 1,
    atNodeEncounter({ ctx }) {
        ctx.addLine("debugger;");
    }
});
//------------------------------------------------------------------------------
// t-log
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "log",
    priority: 1,
    atNodeEncounter({ ctx, value }) {
        const expr = ctx.formatExpression(value);
        ctx.addLine(`console.log(${expr})`);
    }
});

/**
 * Owl QWeb Extensions
 *
 * This file contains the implementation of non standard QWeb directives, added
 * by Owl and that will only work on Owl projects:
 *
 * - t-on
 * - t-ref
 * - t-transition
 * - t-mounted
 * - t-slot
 * - t-model
 */
//------------------------------------------------------------------------------
// t-on
//------------------------------------------------------------------------------
// these are pieces of code that will be injected into the event handler if
// modifiers are specified
const MODS_CODE = {
    prevent: "e.preventDefault();",
    self: "if (e.target !== this.elm) {return}",
    stop: "e.stopPropagation();"
};
const FNAMEREGEXP = /^[$A-Z_][0-9A-Z_$]*$/i;
function makeHandlerCode(ctx, fullName, value, putInCache, modcodes = MODS_CODE) {
    let [event, ...mods] = fullName.slice(5).split(".");
    if (mods.includes("capture")) {
        event = "!" + event;
    }
    if (!event) {
        throw new Error("Missing event name with t-on directive");
    }
    let code;
    // check if it is a method with no args, a method with args or an expression
    let args = "";
    const name = value.replace(/\(.*\)/, function (_args) {
        args = _args.slice(1, -1);
        return "";
    });
    const isMethodCall = name.match(FNAMEREGEXP);
    // then generate code
    if (isMethodCall) {
        ctx.rootContext.shouldDefineUtils = true;
        const comp = `utils.getComponent(context)`;
        if (args) {
            const argId = ctx.generateID();
            ctx.addLine(`let args${argId} = [${ctx.formatExpression(args)}];`);
            code = `${comp}['${name}'](...args${argId}, e);`;
            putInCache = false;
        }
        else {
            code = `${comp}['${name}'](e);`;
        }
    }
    else {
        // if we get here, then it is an expression
        // we need to capture every variable in it
        putInCache = false;
        code = ctx.captureExpression(value);
    }
    const modCode = mods.map(mod => modcodes[mod]).join("");
    let handler = `function (e) {if (!context.__owl__.isMounted){return}${modCode}${code}}`;
    if (putInCache) {
        const key = ctx.generateTemplateKey(event);
        ctx.addLine(`extra.handlers[${key}] = extra.handlers[${key}] || ${handler};`);
        handler = `extra.handlers[${key}]`;
    }
    return { event, handler };
}
QWeb.addDirective({
    name: "on",
    priority: 90,
    atNodeCreation({ ctx, fullName, value, nodeID }) {
        const { event, handler } = makeHandlerCode(ctx, fullName, value, true);
        ctx.addLine(`p${nodeID}.on['${event}'] = ${handler};`);
    }
});
//------------------------------------------------------------------------------
// t-ref
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "ref",
    priority: 95,
    atNodeCreation({ ctx, value, addNodeHook }) {
        ctx.rootContext.shouldDefineRefs = true;
        const refKey = `ref${ctx.generateID()}`;
        ctx.addLine(`const ${refKey} = ${ctx.interpolate(value)};`);
        addNodeHook("create", `context.__owl__.refs[${refKey}] = n.elm;`);
        addNodeHook("destroy", `delete context.__owl__.refs[${refKey}];`);
    }
});
//------------------------------------------------------------------------------
// t-transition
//------------------------------------------------------------------------------
QWeb.utils.nextFrame = function (cb) {
    requestAnimationFrame(() => requestAnimationFrame(cb));
};
QWeb.utils.transitionInsert = function (vn, name) {
    const elm = vn.elm;
    // remove potential duplicated vnode that is currently being removed, to
    // prevent from having twice the same node in the DOM during an animation
    const dup = elm.parentElement && elm.parentElement.querySelector(`*[data-owl-key='${vn.key}']`);
    if (dup) {
        dup.remove();
    }
    elm.classList.add(name + "-enter");
    elm.classList.add(name + "-enter-active");
    elm.classList.remove(name + "-leave-active");
    elm.classList.remove(name + "-leave-to");
    const finalize = () => {
        elm.classList.remove(name + "-enter-active");
        elm.classList.remove(name + "-enter-to");
    };
    this.nextFrame(() => {
        elm.classList.remove(name + "-enter");
        elm.classList.add(name + "-enter-to");
        whenTransitionEnd(elm, finalize);
    });
};
QWeb.utils.transitionRemove = function (vn, name, rm) {
    const elm = vn.elm;
    elm.setAttribute("data-owl-key", vn.key);
    elm.classList.add(name + "-leave");
    elm.classList.add(name + "-leave-active");
    const finalize = () => {
        if (!elm.classList.contains(name + "-leave-active")) {
            return;
        }
        elm.classList.remove(name + "-leave-active");
        elm.classList.remove(name + "-leave-to");
        rm();
    };
    this.nextFrame(() => {
        elm.classList.remove(name + "-leave");
        elm.classList.add(name + "-leave-to");
        whenTransitionEnd(elm, finalize);
    });
};
function getTimeout(delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
        delays = delays.concat(delays);
    }
    return Math.max.apply(null, durations.map((d, i) => {
        return toMs(d) + toMs(delays[i]);
    }));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(",", ".")) * 1000;
}
function whenTransitionEnd(elm, cb) {
    if (!elm.parentNode) {
        // if we get here, this means that the element was removed for some other
        // reasons, and in that case, we don't want to work on animation since nothing
        // will be displayed anyway.
        return;
    }
    const styles = window.getComputedStyle(elm);
    const delays = (styles.transitionDelay || "").split(", ");
    const durations = (styles.transitionDuration || "").split(", ");
    const timeout = getTimeout(delays, durations);
    if (timeout > 0) {
        elm.addEventListener("transitionend", cb, { once: true });
    }
    else {
        cb();
    }
}
QWeb.addDirective({
    name: "transition",
    priority: 96,
    atNodeCreation({ ctx, value, addNodeHook }) {
        ctx.rootContext.shouldDefineUtils = true;
        let name = value;
        const hooks = {
            insert: `utils.transitionInsert(vn, '${name}');`,
            remove: `utils.transitionRemove(vn, '${name}', rm);`
        };
        for (let hookName in hooks) {
            addNodeHook(hookName, hooks[hookName]);
        }
    }
});
//------------------------------------------------------------------------------
// t-slot
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "slot",
    priority: 80,
    atNodeEncounter({ ctx, value, node, qweb }) {
        const slotKey = ctx.generateID();
        ctx.addLine(`const slot${slotKey} = this.constructor.slots[context.__owl__.slotId + '_' + '${value}'];`);
        ctx.addIf(`slot${slotKey}`);
        let parentNode = `c${ctx.parentNode}`;
        if (!ctx.parentNode) {
            ctx.rootContext.shouldDefineResult = true;
            ctx.rootContext.shouldDefineUtils = true;
            parentNode = `children${ctx.generateID()}`;
            ctx.addLine(`let ${parentNode}= []`);
            ctx.addLine(`result = {}`);
        }
        ctx.addLine(`slot${slotKey}.call(this, context.__owl__.scope, Object.assign({}, extra, {parentNode: ${parentNode}, parent: extra.parent || context}));`);
        if (!ctx.parentNode) {
            ctx.addLine(`utils.defineProxy(result, ${parentNode}[0]);`);
        }
        if (node.hasChildNodes()) {
            ctx.addElse();
            const nodeCopy = node.cloneNode(true);
            nodeCopy.removeAttribute("t-slot");
            qweb._compileNode(nodeCopy, ctx);
        }
        ctx.closeIf();
        return true;
    }
});
//------------------------------------------------------------------------------
// t-model
//------------------------------------------------------------------------------
QWeb.utils.toNumber = function (val) {
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
QWeb.addDirective({
    name: "model",
    priority: 42,
    atNodeCreation({ ctx, nodeID, value, node, fullName, addNodeHook }) {
        const type = node.getAttribute("type");
        let handler;
        let event = fullName.includes(".lazy") ? "change" : "input";
        // we keep here a reference to the "base expression" (if the expression
        // is `t-model="some.expr.value", then the base expression is "some.expr").
        // This is necessary so we can capture it in the handler closure.
        let expr = ctx.formatExpression(value);
        const index = expr.lastIndexOf(".");
        const baseExpr = expr.slice(0, index);
        ctx.addLine(`let expr${nodeID} = ${baseExpr};`);
        expr = `expr${nodeID}.${expr.slice(index + 1)}`;
        const key = ctx.generateTemplateKey();
        if (node.tagName === "select") {
            ctx.addLine(`p${nodeID}.props = {value: ${expr}};`);
            addNodeHook("create", `n.elm.value=${expr};`);
            event = "change";
            handler = `(ev) => {${expr} = ev.target.value}`;
        }
        else if (type === "checkbox") {
            ctx.addLine(`p${nodeID}.props = {checked: ${expr}};`);
            handler = `(ev) => {${expr} = ev.target.checked}`;
        }
        else if (type === "radio") {
            const nodeValue = node.getAttribute("value");
            ctx.addLine(`p${nodeID}.props = {checked:${expr} === '${nodeValue}'};`);
            handler = `(ev) => {${expr} = ev.target.value}`;
            event = "click";
        }
        else {
            ctx.addLine(`p${nodeID}.props = {value: ${expr}};`);
            const trimCode = fullName.includes(".trim") ? ".trim()" : "";
            let valueCode = `ev.target.value${trimCode}`;
            if (fullName.includes(".number")) {
                ctx.rootContext.shouldDefineUtils = true;
                valueCode = `utils.toNumber(${valueCode})`;
            }
            handler = `(ev) => {${expr} = ${valueCode}}`;
        }
        ctx.addLine(`extra.handlers[${key}] = extra.handlers[${key}] || (${handler});`);
        ctx.addLine(`p${nodeID}.on['${event}'] = extra.handlers[${key}];`);
    }
});
//------------------------------------------------------------------------------
// t-key
//------------------------------------------------------------------------------
QWeb.addDirective({
    name: "key",
    priority: 45,
    atNodeEncounter({ ctx, value, node }) {
        if (ctx.loopNumber === 0) {
            ctx.keyStack.push(ctx.rootContext.hasKey0);
            ctx.rootContext.hasKey0 = true;
        }
        ctx.addLine("{");
        ctx.indent();
        ctx.addLine(`let key${ctx.loopNumber} = ${ctx.formatExpression(value)};`);
    },
    finalize({ ctx }) {
        ctx.dedent();
        ctx.addLine("}");
        if (ctx.loopNumber === 0) {
            ctx.rootContext.hasKey0 = ctx.keyStack.pop();
        }
    }
});

const config = {};
Object.defineProperty(config, "mode", {
    get() {
        return QWeb.dev ? "dev" : "prod";
    },
    set(mode) {
        QWeb.dev = mode === "dev";
        if (QWeb.dev) {
            const url = `https://github.com/odoo/owl/blob/master/doc/reference/config.md#mode`;
            console.warn(`Owl is running in 'dev' mode.  This is not suitable for production use. See ${url} for more information.`);
        }
        else {
            console.log(`Owl is now running in 'prod' mode.`);
        }
    }
});

/**
 * We define here OwlEvent, a subclass of CustomEvent, with an additional
 * attribute:
 *  - originalComponent: the component that triggered the event
 */
class OwlEvent extends CustomEvent {
    constructor(component, eventType, options) {
        super(eventType, options);
        this.originalComponent = component;
    }
}

//------------------------------------------------------------------------------
// t-component
//------------------------------------------------------------------------------
const T_COMPONENT_MODS_CODE = Object.assign({}, MODS_CODE, {
    self: "if (e.target !== vn.elm) {return}"
});
QWeb.utils.defineProxy = function defineProxy(target, source) {
    for (let k in source) {
        Object.defineProperty(target, k, {
            get() {
                return source[k];
            },
            set(val) {
                source[k] = val;
            }
        });
    }
};
QWeb.utils.assignHooks = function assignHooks(dataObj, hooks) {
    if ("hook" in dataObj) {
        const hookObject = dataObj.hook;
        for (let name in hooks) {
            const current = hookObject[name];
            const fn = hooks[name];
            if (current) {
                hookObject[name] = (...args) => {
                    current(...args);
                    fn(...args);
                };
            }
            else {
                hookObject[name] = fn;
            }
        }
    }
    else {
        dataObj.hook = hooks;
    }
};
/**
 * The t-component directive is certainly a complicated and hard to maintain piece
 * of code.  To help you, fellow developer, if you have to maintain it, I offer
 * you this advice: Good luck...
 *
 * Since it is not 'direct' code, but rather code that generates other code, it
 * is not easy to understand.  To help you, here  is a detailed and commented
 * explanation of the code generated by the t-component directive for the following
 * situation:
 * ```xml
 *   <Child
 *      t-key="'somestring'"
 *      flag="state.flag"
 *      t-transition="fade"/>
 * ```
 *
 * ```js
 * // we assign utils on top of the function because it will be useful for
 * // each components
 * let utils = this.utils;
 *
 * // this is the virtual node representing the parent div
 * let c1 = [], p1 = { key: 1 };
 * var vn1 = h("div", p1, c1);
 *
 * // t-component directive: we start by evaluating the expression given by t-key:
 * let key5 = "somestring";
 *
 * // def3 is the promise that will contain later either the new component
 * // creation, or the props update...
 * let def3;
 *
 * // this is kind of tricky: we need here to find if the component was already
 * // created by a previous rendering.  This is done by checking the internal
 * // `cmap` (children map) of the parent component: it maps keys to component ids,
 * // and, then, if there is an id, we look into the children list to get the
 * // instance
 * let w4 =
 *   key5 in context.__owl__.cmap
 *   ? context.__owl__.children[context.__owl__.cmap[key5]]
 *   : false;
 *
 * // We keep the index of the position of the component in the closure.  We push
 * // null to reserve the slot, and will replace it later by the component vnode,
 * // when it will be ready (do not forget that preparing/rendering a component is
 * // asynchronous)
 * let _2_index = c1.length;
 * c1.push(null);
 *
 * // we evaluate here the props given to the component. It is done here to be
 * // able to easily reference it later, and also, it might be an expensive
 * // computation, so it is certainly better to do it only once
 * let props4 = { flag: context["state"].flag };
 *
 * // If we have a component, currently rendering, but not ready yet, we do not want
 * // to wait for it to be ready if we can avoid it
 * if (w4 && w4.__owl__.renderPromise && !w4.__owl__.vnode) {
 *   // we check if the props are the same.  In that case, we can simply reuse
 *   // the previous rendering and skip all useless work
 *   if (utils.shallowEqual(props4, w4.__owl__.renderProps)) {
 *     def3 = w4.__owl__.renderPromise;
 *   } else {
 *     // if the props are not the same, we destroy the component and starts anew.
 *     // this will be faster than waiting for its rendering, then updating it
 *     w4.destroy();
 *     w4 = false;
 *   }
 * }
 *
 * if (!w4) {
 *   // in this situation, we need to create a new component.  First step is
 *   // to get a reference to the class, then create an instance with
 *   // current context as parent, and the props.
 *   let W4 = context.component && context.components[componentKey4] || QWeb.component[componentKey4];

 *   if (!W4) {
 *     throw new Error("Cannot find the definition of component 'child'");
 *   }
 *   w4 = new W4(owner, props4);
 *
 *   // Whenever we rerender the parent component, we need to be sure that we
 *   // are able to find the component instance. To do that, we register it to
 *   // the parent cmap (children map).  Note that the 'template' key is
 *   // used here, since this is what identify the component from the template
 *   // perspective.
 *   context.__owl__.cmap[key5] = w4.__owl__.id;
 *
 *   // __prepare is called, to basically call willStart, then render the
 *   // component
 *   def3 = w4.__prepare();
 *
 *   def3 = def3.then(vnode => {
 *     // we create here a virtual node for the parent (NOT the component). This
 *     // means that the vdom of the parent will be stopped here, and from
 *     // the parent's perspective, it simply is a vnode with no children.
 *     // However, it shares the same dom element with the component root
 *     // vnode.
 *     let pvnode = h(vnode.sel, { key: key5 });
 *
 *     // we add hooks to the parent vnode so we can interact with the new
 *     // component at the proper time
 *     pvnode.data.hook = {
 *       insert(vn) {
 *         // the __mount method will patch the component vdom into the elm vn.elm,
 *         // then call the mounted hooks. However, suprisingly, the snabbdom
 *         // patch method actually replace the elm by a new elm, so we need
 *         // to synchronise the pvnode elm with the resulting elm
 *         let nvn = w4.__mount(vnode, vn.elm);
 *         pvnode.elm = nvn.elm;
 *         // what follows is only present if there are animations on the component
 *         utils.transitionInsert(vn, "fade");
 *       },
 *       remove() {
 *         // override with empty function to prevent from removing the node
 *         // directly. It will be removed when destroy is called anyway, which
 *         // delays the removal if there are animations.
 *       },
 *       destroy() {
 *         // if there are animations, we delay the call to destroy on the
 *         // component, if not, we call it directly.
 *         let finalize = () => {
 *           w4.destroy();
 *         };
 *         utils.transitionRemove(vn, "fade", finalize);
 *       }
 *     };
 *     // the pvnode is inserted at the correct position in the div's children
 *     c1[_2_index] = pvnode;
 *
 *     // we keep here a reference to the parent vnode (representing the
 *     // component, so we can reuse it later whenever we update the component
 *     w4.__owl__.pvnode = pvnode;
 *   });
 * } else {
 *   // this is the 'update' path of the directive.
 *   // the call to __updateProps is the actual component update
 *   // Note that we only update the props if we cannot reuse the previous
 *   // rendering work (in the case it was rendered with the same props)
 *   def3 = def3 || w4.__updateProps(props4, extra.forceUpdate, extra.patchQueue);
 *   def3 = def3.then(() => {
 *     // if component was destroyed in the meantime, we do nothing (so, this
 *     // means that the parent's element children list will have a null in
 *     // the component's position, which will cause the pvnode to be removed
 *     // when it is patched.
 *     if (w4.__owl__.isDestroyed) {
 *       return;
 *     }
 *     // like above, we register the pvnode to the children list, so it
 *     // will not be patched out of the dom.
 *     let pvnode = w4.__owl__.pvnode;
 *     c1[_2_index] = pvnode;
 *   });
 * }
 *
 * // we register the deferred here so the parent can coordinate its patch operation
 * // with all the children.
 * extra.promises.push(def3);
 * return vn1;
 * ```
 */
QWeb.addDirective({
    name: "component",
    extraNames: ["props"],
    priority: 100,
    atNodeEncounter({ ctx, value, node, qweb }) {
        ctx.addLine(`// Component '${value}'`);
        ctx.rootContext.shouldDefineQWeb = true;
        ctx.rootContext.shouldDefineParent = true;
        ctx.rootContext.shouldDefineUtils = true;
        ctx.rootContext.shouldDefineScope = true;
        let hasDynamicProps = node.getAttribute("t-props") ? true : false;
        // t-on- events and t-transition
        const events = [];
        let transition = "";
        const attributes = node.attributes;
        const props = {};
        for (let i = 0; i < attributes.length; i++) {
            const name = attributes[i].name;
            const value = attributes[i].textContent;
            if (name.startsWith("t-on-")) {
                events.push([name, value]);
            }
            else if (name === "t-transition") {
                transition = value;
            }
            else if (!name.startsWith("t-")) {
                if (name !== "class" && name !== "style") {
                    // this is a prop!
                    props[name] = ctx.formatExpression(value) || "undefined";
                }
            }
        }
        // computing the props string representing the props object
        let propStr = Object.keys(props)
            .map(k => k + ":" + props[k])
            .join(",");
        let componentID = ctx.generateID();
        const templateKey = ctx.generateTemplateKey();
        let ref = node.getAttribute("t-ref");
        let refExpr = "";
        let refKey = "";
        if (ref) {
            ctx.rootContext.shouldDefineRefs = true;
            refKey = `ref${ctx.generateID()}`;
            ctx.addLine(`const ${refKey} = ${ctx.interpolate(ref)};`);
            refExpr = `context.__owl__.refs[${refKey}] = w${componentID};`;
        }
        let finalizeComponentCode = `w${componentID}.destroy();`;
        if (ref) {
            finalizeComponentCode += `delete context.__owl__.refs[${refKey}];`;
        }
        if (transition) {
            finalizeComponentCode = `let finalize = () => {
          ${finalizeComponentCode}
        };
        delete w${componentID}.__owl__.transitionInserted;
        utils.transitionRemove(vn, '${transition}', finalize);`;
        }
        let createHook = "";
        let classAttr = node.getAttribute("class");
        let tattClass = node.getAttribute("t-att-class");
        let styleAttr = node.getAttribute("style");
        let tattStyle = node.getAttribute("t-att-style");
        if (tattStyle) {
            const attVar = `_${ctx.generateID()}`;
            ctx.addLine(`const ${attVar} = ${ctx.formatExpression(tattStyle)};`);
            tattStyle = attVar;
        }
        let classObj = "";
        if (classAttr || tattClass || styleAttr || tattStyle || events.length) {
            if (classAttr) {
                let classDef = classAttr
                    .trim()
                    .split(/\s+/)
                    .map(a => `'${a}':true`)
                    .join(",");
                classObj = `_${ctx.generateID()}`;
                ctx.addLine(`let ${classObj} = {${classDef}};`);
            }
            if (tattClass) {
                let tattExpr = ctx.formatExpression(tattClass);
                if (tattExpr[0] !== "{" || tattExpr[tattExpr.length - 1] !== "}") {
                    tattExpr = `utils.toObj(${tattExpr})`;
                }
                if (classAttr) {
                    ctx.addLine(`Object.assign(${classObj}, ${tattExpr})`);
                }
                else {
                    classObj = `_${ctx.generateID()}`;
                    ctx.addLine(`let ${classObj} = ${tattExpr};`);
                }
            }
            let eventsCode = events
                .map(function ([name, value]) {
                const capture = name.match(/\.capture/);
                name = capture ? name.replace(/\.capture/, "") : name;
                const { event, handler } = makeHandlerCode(ctx, name, value, false, T_COMPONENT_MODS_CODE);
                if (capture) {
                    return `vn.elm.addEventListener('${event}', ${handler}, true);`;
                }
                return `vn.elm.addEventListener('${event}', ${handler});`;
            })
                .join("");
            const styleExpr = tattStyle || (styleAttr ? `'${styleAttr}'` : false);
            const styleCode = styleExpr ? `vn.elm.style = ${styleExpr};` : "";
            createHook = `utils.assignHooks(vnode.data, {create(_, vn){${styleCode}${eventsCode}}});`;
        }
        ctx.addLine(`let w${componentID} = ${templateKey} in parent.__owl__.cmap ? parent.__owl__.children[parent.__owl__.cmap[${templateKey}]] : false;`);
        let shouldProxy = !ctx.parentNode;
        if (shouldProxy) {
            let id = ctx.generateID();
            ctx.rootContext.rootNode = id;
            shouldProxy = true;
            ctx.rootContext.shouldDefineResult = true;
            ctx.addLine(`let vn${id} = {};`);
            ctx.addLine(`result = vn${id};`);
        }
        if (hasDynamicProps) {
            const dynamicProp = ctx.formatExpression(node.getAttribute("t-props"));
            ctx.addLine(`let props${componentID} = Object.assign({${propStr}}, ${dynamicProp});`);
        }
        else {
            ctx.addLine(`let props${componentID} = {${propStr}};`);
        }
        ctx.addIf(`w${componentID} && w${componentID}.__owl__.currentFiber && !w${componentID}.__owl__.vnode`);
        ctx.addLine(`w${componentID}.destroy();`);
        ctx.addLine(`w${componentID} = false;`);
        ctx.closeIf();
        let registerCode = "";
        if (shouldProxy) {
            registerCode = `utils.defineProxy(vn${ctx.rootNode}, pvnode);`;
        }
        // SLOTS
        const hasSlots = node.childNodes.length;
        let scope = hasSlots ? `Object.assign(Object.create(context), scope)` : "undefined";
        ctx.addIf(`w${componentID}`);
        // need to update component
        let styleCode = "";
        if (tattStyle) {
            styleCode = `.then(()=>{if (w${componentID}.__owl__.isDestroyed) {return};w${componentID}.el.style=${tattStyle};});`;
        }
        ctx.addLine(`w${componentID}.__updateProps(props${componentID}, extra.fiber, ${scope})${styleCode};`);
        ctx.addLine(`let pvnode = w${componentID}.__owl__.pvnode;`);
        if (registerCode) {
            ctx.addLine(registerCode);
        }
        if (ctx.parentNode) {
            ctx.addLine(`c${ctx.parentNode}.push(pvnode);`);
        }
        ctx.addElse();
        // new component
        let dynamicFallback = "";
        if (!value.match(INTERP_REGEXP)) {
            dynamicFallback = `|| ${ctx.formatExpression(value)}`;
        }
        const interpValue = ctx.interpolate(value);
        ctx.addLine(`let componentKey${componentID} = ${interpValue};`);
        ctx.addLine(`let W${componentID} = context.constructor.components[componentKey${componentID}] || QWeb.components[componentKey${componentID}]${dynamicFallback};`);
        // maybe only do this in dev mode...
        ctx.addLine(`if (!W${componentID}) {throw new Error('Cannot find the definition of component "' + componentKey${componentID} + '"')}`);
        ctx.addLine(`w${componentID} = new W${componentID}(parent, props${componentID});`);
        if (transition) {
            ctx.addLine(`const __patch${componentID} = w${componentID}.__patch;`);
            ctx.addLine(`w${componentID}.__patch = (t, vn) => {__patch${componentID}.call(w${componentID}, t, vn); if(!w${componentID}.__owl__.transitionInserted){w${componentID}.__owl__.transitionInserted = true;utils.transitionInsert(w${componentID}.__owl__.vnode, '${transition}');}};`);
        }
        ctx.addLine(`parent.__owl__.cmap[${templateKey}] = w${componentID}.__owl__.id;`);
        if (hasSlots) {
            const clone = node.cloneNode(true);
            const slotNodes = Array.from(clone.querySelectorAll("[t-set-slot]"));
            // The next code is a fallback for compatibility reason. It accepts t-set
            // elements that are direct children with a non empty body as nodes defining
            // the content of a slot.
            //
            // This is wrong, but is necessary to prevent breaking all existing Owl
            // code using slots. This will be removed in v2.0 someday. Meanwhile,
            // please use t-set-slot everywhere you need to set the content of a
            // slot.
            for (let el of clone.children) {
                if (el.getAttribute("t-set") && el.hasChildNodes()) {
                    slotNodes.push(el);
                }
            }
            const slotId = QWeb.nextSlotId++;
            ctx.addLine(`w${componentID}.__owl__.slotId = ${slotId};`);
            if (slotNodes.length) {
                for (let i = 0, length = slotNodes.length; i < length; i++) {
                    const slotNode = slotNodes[i];
                    slotNode.parentElement.removeChild(slotNode);
                    let key = slotNode.getAttribute("t-set-slot");
                    slotNode.removeAttribute("t-set-slot");
                    // here again, this code should be removed when we stop supporting
                    // using t-set to define the content of named slots.
                    if (!key) {
                        key = slotNode.getAttribute("t-set");
                        slotNode.removeAttribute("t-set");
                    }
                    const slotFn = qweb._compile(`slot_${key}_template`, slotNode, ctx);
                    QWeb.slots[`${slotId}_${key}`] = slotFn;
                }
            }
            if (clone.childNodes.length) {
                const t = clone.ownerDocument.createElement("t");
                for (let child of Object.values(clone.childNodes)) {
                    t.appendChild(child);
                }
                const slotFn = qweb._compile(`slot_default_template`, t, ctx);
                QWeb.slots[`${slotId}_default`] = slotFn;
            }
        }
        ctx.addLine(`let fiber = w${componentID}.__prepare(extra.fiber, ${scope}, () => { const vnode = fiber.vnode; pvnode.sel = vnode.sel; ${createHook}});`);
        // hack: specify empty remove hook to prevent the node from being removed from the DOM
        const insertHook = refExpr ? `insert(vn) {${refExpr}},` : "";
        ctx.addLine(`let pvnode = h('dummy', {key: ${templateKey}, hook: {${insertHook}remove() {},destroy(vn) {${finalizeComponentCode}}}});`);
        if (registerCode) {
            ctx.addLine(registerCode);
        }
        if (ctx.parentNode) {
            ctx.addLine(`c${ctx.parentNode}.push(pvnode);`);
        }
        ctx.addLine(`w${componentID}.__owl__.pvnode = pvnode;`);
        ctx.closeIf();
        if (classObj) {
            ctx.addLine(`w${componentID}.__owl__.classObj=${classObj};`);
        }
        ctx.addLine(`w${componentID}.__owl__.parentLastFiberId = extra.fiber.id;`);
        return true;
    }
});

class Scheduler {
    constructor(requestAnimationFrame) {
        this.tasks = [];
        this.isRunning = false;
        this.requestAnimationFrame = requestAnimationFrame;
    }
    start() {
        this.isRunning = true;
        this.scheduleTasks();
    }
    stop() {
        this.isRunning = false;
    }
    addFiber(fiber) {
        // if the fiber was remapped into a larger rendering fiber, it may not be a
        // root fiber.  But we only want to register root fibers
        fiber = fiber.root;
        return new Promise((resolve, reject) => {
            if (fiber.error) {
                return reject(fiber.error);
            }
            this.tasks.push({
                fiber,
                callback: () => {
                    if (fiber.error) {
                        return reject(fiber.error);
                    }
                    resolve();
                }
            });
            if (!this.isRunning) {
                this.start();
            }
        });
    }
    rejectFiber(fiber, reason) {
        fiber = fiber.root;
        const index = this.tasks.findIndex(t => t.fiber === fiber);
        if (index >= 0) {
            const [task] = this.tasks.splice(index, 1);
            fiber.cancel();
            fiber.error = new Error(reason);
            task.callback();
        }
    }
    /**
     * Process all current tasks. This only applies to the fibers that are ready.
     * Other tasks are left unchanged.
     */
    flush() {
        let tasks = this.tasks;
        this.tasks = [];
        tasks = tasks.filter(task => {
            if (task.fiber.isCompleted) {
                task.callback();
                return false;
            }
            if (task.fiber.counter === 0) {
                if (!task.fiber.error) {
                    try {
                        task.fiber.complete();
                    }
                    catch (e) {
                        task.fiber.handleError(e);
                    }
                }
                task.callback();
                return false;
            }
            return true;
        });
        this.tasks = tasks.concat(this.tasks);
        if (this.tasks.length === 0) {
            this.stop();
        }
    }
    scheduleTasks() {
        this.requestAnimationFrame(() => {
            this.flush();
            if (this.isRunning) {
                this.scheduleTasks();
            }
        });
    }
}
const scheduler = new Scheduler(browser.requestAnimationFrame);

/**
 * Owl Fiber Class
 *
 * Fibers are small abstractions designed to contain all the internal state
 * associated with a "rendering work unit", relative to a specific component.
 *
 * A rendering will cause the creation of a fiber for each impacted components.
 *
 * Fibers capture all that necessary information, which is critical to owl
 * asynchronous rendering pipeline. Fibers can be cancelled, can be in different
 * states and in general determine the state of the rendering.
 */
class Fiber {
    constructor(parent, component, force, target, position) {
        this.id = Fiber.nextId++;
        // isCompleted means that the rendering corresponding to this fiber's work is
        // done, either because the component has been mounted or patched, or because
        // fiber has been cancelled.
        this.isCompleted = false;
        // the fibers corresponding to component updates (updateProps) need to call
        // the willPatch and patched hooks from the corresponding component. However,
        // fibers corresponding to a new component do not need to do that. So, the
        // shouldPatch hook is the boolean that we check whenever we need to apply
        // a patch.
        this.shouldPatch = true;
        // isRendered is the last state of a fiber. If true, this means that it has
        // been rendered and is inert (so, it should not be taken into account when
        // counting the number of active fibers).
        this.isRendered = false;
        // the counter number is a critical information. It is only necessary for a
        // root fiber.  For that fiber, this number counts the number of active sub
        // fibers.  When that number reaches 0, the fiber can be applied by the
        // scheduler.
        this.counter = 0;
        this.vnode = null;
        this.child = null;
        this.sibling = null;
        this.lastChild = null;
        this.parent = null;
        this.component = component;
        this.force = force;
        this.target = target;
        this.position = position;
        const __owl__ = component.__owl__;
        this.scope = __owl__.scope;
        this.root = parent ? parent.root : this;
        this.parent = parent;
        let oldFiber = __owl__.currentFiber;
        if (oldFiber && !oldFiber.isCompleted) {
            if (oldFiber.root === oldFiber && !parent) {
                // both oldFiber and this fiber are root fibers
                this._reuseFiber(oldFiber);
                return oldFiber;
            }
            else {
                this._remapFiber(oldFiber);
            }
        }
        this.root.counter++;
        __owl__.currentFiber = this;
    }
    /**
     * When the oldFiber is not completed yet, and both oldFiber and this fiber
     * are root fibers, we want to reuse the oldFiber instead of creating a new
     * one. Doing so will guarantee that the initiator(s) of those renderings will
     * be notified (the promise will resolve) when the last rendering will be done.
     *
     * This function thus assumes that oldFiber is a root fiber.
     */
    _reuseFiber(oldFiber) {
        oldFiber.cancel(); // cancel children fibers
        oldFiber.isCompleted = false; // keep the root fiber alive
        oldFiber.isRendered = false; // the fiber has to be re-rendered
        if (oldFiber.child) {
            // remove relation to children
            oldFiber.child.parent = null;
            oldFiber.child = null;
            oldFiber.lastChild = null;
        }
        oldFiber.counter = 1; // re-initialize counter
        oldFiber.id = Fiber.nextId++;
    }
    /**
     * In some cases, a rendering initiated at some component can detect that it
     * should be part of a larger rendering initiated somewhere up the component
     * tree.  In that case, it needs to cancel the previous rendering and
     * remap itself as a part of the current parent rendering.
     */
    _remapFiber(oldFiber) {
        oldFiber.cancel();
        this.shouldPatch = oldFiber.shouldPatch;
        if (oldFiber === oldFiber.root) {
            oldFiber.counter++;
        }
        if (oldFiber.parent && !this.parent) {
            // re-map links
            this.parent = oldFiber.parent;
            this.root = this.parent.root;
            this.sibling = oldFiber.sibling;
            if (this.parent.lastChild === oldFiber) {
                this.parent.lastChild = this;
            }
            if (this.parent.child === oldFiber) {
                this.parent.child = this;
            }
            else {
                let current = this.parent.child;
                while (true) {
                    if (current.sibling === oldFiber) {
                        current.sibling = this;
                        break;
                    }
                    current = current.sibling;
                }
            }
        }
    }
    /**
     * This function has been taken from
     * https://medium.com/react-in-depth/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7
     */
    _walk(doWork) {
        let root = this;
        let current = this;
        while (true) {
            const child = doWork(current);
            if (child) {
                current = child;
                continue;
            }
            if (current === root) {
                return;
            }
            while (!current.sibling) {
                if (!current.parent || current.parent === root) {
                    return;
                }
                current = current.parent;
            }
            current = current.sibling;
        }
    }
    /**
     * Successfully complete the work of the fiber: call the mount or patch hooks
     * and patch the DOM. This function is called once the fiber and its children
     * are ready, and the scheduler decides to process it.
     */
    complete() {
        let component = this.component;
        this.isCompleted = true;
        if (!this.target && !component.__owl__.isMounted) {
            return;
        }
        // build patchQueue
        const patchQueue = [];
        const doWork = function (f) {
            patchQueue.push(f);
            return f.child;
        };
        this._walk(doWork);
        const patchLen = patchQueue.length;
        // call willPatch hook on each fiber of patchQueue
        for (let i = 0; i < patchLen; i++) {
            const fiber = patchQueue[i];
            if (fiber.shouldPatch) {
                component = fiber.component;
                if (component.__owl__.willPatchCB) {
                    component.__owl__.willPatchCB();
                }
                component.willPatch();
            }
        }
        // call __patch on each fiber of (reversed) patchQueue
        for (let i = patchLen - 1; i >= 0; i--) {
            const fiber = patchQueue[i];
            component = fiber.component;
            if (fiber.target && i === 0) {
                let target;
                if (fiber.position === "self") {
                    target = fiber.target;
                    if (target.tagName.toLowerCase() !== fiber.vnode.sel) {
                        throw new Error(`Cannot attach '${component.constructor.name}' to target node (not same tag name)`);
                    }
                    // In self mode, we *know* we are to take possession of the target
                    // Hence we manually create the corresponding VNode and copy the "key" in data
                    const selfVnodeData = fiber.vnode.data ? { key: fiber.vnode.data.key } : {};
                    const selfVnode = h(fiber.vnode.sel, selfVnodeData);
                    selfVnode.elm = target;
                    target = selfVnode;
                }
                else {
                    target = component.__owl__.vnode || document.createElement(fiber.vnode.sel);
                }
                component.__patch(target, fiber.vnode);
            }
            else {
                if (fiber.shouldPatch) {
                    component.__patch(component.__owl__.vnode, fiber.vnode);
                }
                else {
                    component.__patch(document.createElement(fiber.vnode.sel), fiber.vnode);
                    component.__owl__.pvnode.elm = component.__owl__.vnode.elm;
                }
            }
            component.__owl__.currentFiber = null;
        }
        // insert into the DOM (mount case)
        let inDOM = false;
        if (this.target) {
            switch (this.position) {
                case "first-child":
                    this.target.prepend(this.component.el);
                    break;
                case "last-child":
                    this.target.appendChild(this.component.el);
                    break;
            }
            inDOM = document.body.contains(this.component.el);
            this.component.env.qweb.trigger("dom-appended");
        }
        // call patched/mounted hook on each fiber of (reversed) patchQueue
        for (let i = patchLen - 1; i >= 0; i--) {
            const fiber = patchQueue[i];
            component = fiber.component;
            if (fiber.shouldPatch && !this.target) {
                component.patched();
                if (component.__owl__.patchedCB) {
                    component.__owl__.patchedCB();
                }
            }
            else if (this.target ? inDOM : true) {
                component.__callMounted();
            }
        }
    }
    /**
     * Cancel a fiber and all its children.
     */
    cancel() {
        this._walk(f => {
            if (!f.isRendered) {
                f.root.counter--;
            }
            f.isCompleted = true;
            return f.child;
        });
    }
    /**
     * This is the global error handler for errors occurring in Owl main lifecycle
     * methods.  Caught errors are triggered on the QWeb instance, and are
     * potentially given to some parent component which implements `catchError`.
     *
     * If there are no such component, we destroy everything. This is better than
     * being in a corrupted state.
     */
    handleError(error) {
        let component = this.component;
        this.vnode = component.__owl__.vnode || h("div");
        const qweb = component.env.qweb;
        let root = component;
        let canCatch = false;
        while (component && !(canCatch = !!component.catchError)) {
            root = component;
            component = component.__owl__.parent;
        }
        qweb.trigger("error", error);
        if (canCatch) {
            component.catchError(error);
        }
        else {
            // the 3 next lines aim to mark the root fiber as being in error, and
            // to force it to end, without waiting for its children
            this.root.counter = 0;
            this.root.error = error;
            scheduler.flush();
            root.destroy();
        }
    }
}
Fiber.nextId = 1;

//------------------------------------------------------------------------------
// Prop validation helper
//------------------------------------------------------------------------------
/**
 * Validate the component props (or next props) against the (static) props
 * description.  This is potentially an expensive operation: it may needs to
 * visit recursively the props and all the children to check if they are valid.
 * This is why it is only done in 'dev' mode.
 */
QWeb.utils.validateProps = function (Widget, props) {
    const propsDef = Widget.props;
    if (propsDef instanceof Array) {
        // list of strings (prop names)
        for (let i = 0, l = propsDef.length; i < l; i++) {
            const propName = propsDef[i];
            if (propName[propName.length - 1] === "?") {
                // optional prop
                break;
            }
            if (!(propName in props)) {
                throw new Error(`Missing props '${propsDef[i]}' (component '${Widget.name}')`);
            }
        }
        for (let key in props) {
            if (!propsDef.includes(key) && !propsDef.includes(key + "?")) {
                throw new Error(`Unknown prop '${key}' given to component '${Widget.name}'`);
            }
        }
    }
    else if (propsDef) {
        // propsDef is an object now
        for (let propName in propsDef) {
            if (props[propName] === undefined) {
                if (propsDef[propName] && !propsDef[propName].optional) {
                    throw new Error(`Missing props '${propName}' (component '${Widget.name}')`);
                }
                else {
                    break;
                }
            }
            let isValid;
            try {
                isValid = isValidProp(props[propName], propsDef[propName]);
            }
            catch (e) {
                e.message = `Invalid prop '${propName}' in component ${Widget.name} (${e.message})`;
                throw e;
            }
            if (!isValid) {
                throw new Error(`Invalid Prop '${propName}' in component '${Widget.name}'`);
            }
        }
        for (let propName in props) {
            if (!(propName in propsDef)) {
                throw new Error(`Unknown prop '${propName}' given to component '${Widget.name}'`);
            }
        }
    }
};
/**
 * Check if an invidual prop value matches its (static) prop definition
 */
function isValidProp(prop, propDef) {
    if (propDef === true) {
        return true;
    }
    if (typeof propDef === "function") {
        // Check if a value is constructed by some Constructor.  Note that there is a
        // slight abuse of language: we want to consider primitive values as well.
        //
        // So, even though 1 is not an instance of Number, we want to consider that
        // it is valid.
        if (typeof prop === "object") {
            return prop instanceof propDef;
        }
        return typeof prop === propDef.name.toLowerCase();
    }
    else if (propDef instanceof Array) {
        // If this code is executed, this means that we want to check if a prop
        // matches at least one of its descriptor.
        let result = false;
        for (let i = 0, iLen = propDef.length; i < iLen; i++) {
            result = result || isValidProp(prop, propDef[i]);
        }
        return result;
    }
    // propsDef is an object
    if (propDef.optional && prop === undefined) {
        return true;
    }
    let result = propDef.type ? isValidProp(prop, propDef.type) : true;
    if (propDef.validate) {
        result = result && propDef.validate(prop);
    }
    if (propDef.type === Array && propDef.element) {
        for (let i = 0, iLen = prop.length; i < iLen; i++) {
            result = result && isValidProp(prop[i], propDef.element);
        }
    }
    if (propDef.type === Object && propDef.shape) {
        const shape = propDef.shape;
        for (let key in shape) {
            result = result && isValidProp(prop[key], shape[key]);
        }
        if (result) {
            for (let propName in prop) {
                if (!(propName in shape)) {
                    throw new Error(`unknown prop '${propName}'`);
                }
            }
        }
    }
    return result;
}

/**
 * Owl Style System
 *
 * This files contains the Owl code related to processing (extended) css strings
 * and creating/adding <style> tags to the document head.
 */
const STYLESHEETS = {};
function processSheet(str) {
    const tokens = str.split(/(\{|\}|;)/).map(s => s.trim());
    const selectorStack = [];
    const parts = [];
    let rules = [];
    function generateSelector(stackIndex, parentSelector) {
        const parts = [];
        for (const selector of selectorStack[stackIndex]) {
            let part = (parentSelector && parentSelector + " " + selector) || selector;
            if (part.includes("&")) {
                part = selector.replace(/&/g, parentSelector || "");
            }
            if (stackIndex < selectorStack.length - 1) {
                part = generateSelector(stackIndex + 1, part);
            }
            parts.push(part);
        }
        return parts.join(", ");
    }
    function generateRules() {
        if (rules.length) {
            parts.push(generateSelector(0) + " {");
            parts.push(...rules);
            parts.push("}");
            rules = [];
        }
    }
    while (tokens.length) {
        let token = tokens.shift();
        if (token === "}") {
            generateRules();
            selectorStack.pop();
        }
        else {
            if (tokens[0] === "{") {
                generateRules();
                selectorStack.push(token.split(/\s*,\s*/));
                tokens.shift();
            }
            if (tokens[0] === ";") {
                rules.push("  " + token + ";");
            }
        }
    }
    return parts.join("\n");
}
function registerSheet(id, css) {
    const sheet = document.createElement("style");
    sheet.innerHTML = processSheet(css);
    STYLESHEETS[id] = sheet;
}
function activateSheet(id, name) {
    const sheet = STYLESHEETS[id];
    if (!sheet) {
        throw new Error(`Invalid css stylesheet for component '${name}'. Did you forget to use the 'css' tag helper?`);
    }
    sheet.setAttribute("component", name);
    document.head.appendChild(sheet);
}

const portalSymbol = Symbol("portal"); // FIXME
//------------------------------------------------------------------------------
// Component
//------------------------------------------------------------------------------
let nextId = 1;
class Component {
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Creates an instance of Component.
     *
     * Note that most of the time, only the root component needs to be created by
     * hand.  Other components should be created automatically by the framework (with
     * the t-component directive in a template)
     */
    constructor(parent, props) {
        Component.current = this;
        let constr = this.constructor;
        const defaultProps = constr.defaultProps;
        if (defaultProps) {
            props = props || {};
            this.__applyDefaultProps(props, defaultProps);
        }
        this.props = props;
        if (QWeb.dev) {
            QWeb.utils.validateProps(constr, this.props);
        }
        const id = nextId++;
        let depth;
        if (parent) {
            this.env = parent.env;
            const __powl__ = parent.__owl__;
            __powl__.children[id] = this;
            depth = __powl__.depth + 1;
        }
        else {
            // we are the root component
            this.env = this.constructor.env;
            if (!this.env.qweb) {
                this.env.qweb = new QWeb();
            }
            if (!this.env.browser) {
                this.env.browser = browser;
            }
            this.env.qweb.on("update", this, () => {
                if (this.__owl__.isMounted) {
                    this.render(true);
                }
                if (this.__owl__.isDestroyed) {
                    // this is unlikely to happen, but if a root widget is destroyed,
                    // we want to remove our subscription.  The usual way to do that
                    // would be to perform some check in the destroy method, but since
                    // it is very performance sensitive, and since this is a rare event,
                    // we simply do it lazily
                    this.env.qweb.off("update", this);
                }
            });
            depth = 0;
        }
        const qweb = this.env.qweb;
        const template = constr.template || this.__getTemplate(qweb);
        this.__owl__ = {
            id: id,
            depth: depth,
            vnode: null,
            pvnode: null,
            isMounted: false,
            isDestroyed: false,
            parent: parent || null,
            children: {},
            cmap: {},
            currentFiber: null,
            parentLastFiberId: 0,
            boundHandlers: {},
            mountedCB: null,
            willUnmountCB: null,
            willPatchCB: null,
            patchedCB: null,
            willStartCB: null,
            willUpdatePropsCB: null,
            observer: null,
            renderFn: qweb.render.bind(qweb, template),
            classObj: null,
            refs: null,
            scope: null
        };
        if (constr.style) {
            this.__applyStyles(constr);
        }
    }
    /**
     * The `el` is the root element of the component.  Note that it could be null:
     * this is the case if the component is not mounted yet, or is destroyed.
     */
    get el() {
        return this.__owl__.vnode ? this.__owl__.vnode.elm : null;
    }
    /**
     * willStart is an asynchronous hook that can be implemented to perform some
     * action before the initial rendering of a component.
     *
     * It will be called exactly once before the initial rendering. It is useful
     * in some cases, for example, to load external assets (such as a JS library)
     * before the component is rendered.
     *
     * Note that a slow willStart method will slow down the rendering of the user
     * interface.  Therefore, some effort should be made to make this method as
     * fast as possible.
     *
     * Note: this method should not be called manually.
     */
    async willStart() { }
    /**
     * mounted is a hook that is called each time a component is attached to the
     * DOM. This is a good place to add some listeners, or to interact with the
     * DOM, if the component needs to perform some measure for example.
     *
     * Note: this method should not be called manually.
     *
     * @see willUnmount
     */
    mounted() { }
    /**
     * The willUpdateProps is an asynchronous hook, called just before new props
     * are set. This is useful if the component needs some asynchronous task
     * performed, depending on the props (for example, assuming that the props are
     * some record Id, fetching the record data).
     *
     * This hook is not called during the first render (but willStart is called
     * and performs a similar job).
     */
    async willUpdateProps(nextProps) { }
    /**
     * The willPatch hook is called just before the DOM patching process starts.
     * It is not called on the initial render.  This is useful to get some
     * information which are in the DOM.  For example, the current position of the
     * scrollbar
     */
    willPatch() { }
    /**
     * This hook is called whenever a component did actually update its props,
     * state or env.
     *
     * This method is not called on the initial render. It is useful to interact
     * with the DOM (for example, through an external library) whenever the
     * component was updated.
     *
     * Updating the component state in this hook is possible, but not encouraged.
     * One need to be careful, because updates here will cause rerender, which in
     * turn will cause other calls to updated. So, we need to be particularly
     * careful at avoiding endless cycles.
     */
    patched() { }
    /**
     * willUnmount is a hook that is called each time just before a component is
     * unmounted from the DOM. This is a good place to remove some listeners, for
     * example.
     *
     * Note: this method should not be called manually.
     *
     * @see mounted
     */
    willUnmount() { }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Mount the component to a target element.
     *
     * This should only be done if the component was created manually. Components
     * created declaratively in templates are managed by the Owl system.
     *
     * Note that a component can be mounted an unmounted several times
     */
    async mount(target, options = {}) {
        const position = options.position || "last-child";
        const __owl__ = this.__owl__;
        if (__owl__.isMounted) {
            if (position !== "self" && this.el.parentNode !== target) {
                // in this situation, we are trying to mount a component on a different
                // target. In this case, we need to unmount first, otherwise it will
                // not work.
                this.unmount();
            }
            else {
                return Promise.resolve();
            }
        }
        if (__owl__.currentFiber) {
            const currentFiber = __owl__.currentFiber;
            if (currentFiber.target === target && currentFiber.position === position) {
                return scheduler.addFiber(currentFiber);
            }
            else {
                scheduler.rejectFiber(currentFiber, "Mounting operation cancelled");
            }
        }
        if (!(target instanceof HTMLElement || target instanceof DocumentFragment)) {
            let message = `Component '${this.constructor.name}' cannot be mounted: the target is not a valid DOM node.`;
            message += `\nMaybe the DOM is not ready yet? (in that case, you can use owl.utils.whenReady)`;
            throw new Error(message);
        }
        const fiber = new Fiber(null, this, false, target, position);
        fiber.shouldPatch = false;
        if (!__owl__.vnode) {
            this.__prepareAndRender(fiber, () => { });
        }
        else {
            this.__render(fiber);
        }
        return scheduler.addFiber(fiber);
    }
    /**
     * The unmount method is the opposite of the mount method.  It is useful
     * to call willUnmount calls and remove the component from the DOM.
     */
    unmount() {
        if (this.__owl__.isMounted) {
            this.__callWillUnmount();
            this.el.remove();
        }
    }
    /**
     * The render method is the main entry point to render a component (once it
     * is ready. This method is not initially called when the component is
     * rendered the first time).
     *
     * This method will cause all its sub components to potentially rerender
     * themselves.  Note that `render` is not called if a component is updated via
     * its props.
     */
    async render(force = false) {
        const __owl__ = this.__owl__;
        const currentFiber = __owl__.currentFiber;
        if (!__owl__.isMounted && !currentFiber) {
            // if we get here, this means that the component was either never mounted,
            // or was unmounted and some state change  triggered a render. Either way,
            // we do not want to actually render anything in this case.
            return;
        }
        if (currentFiber && !currentFiber.isRendered && !currentFiber.isCompleted) {
            return scheduler.addFiber(currentFiber.root);
        }
        // if we aren't mounted at this point, it implies that there is a
        // currentFiber that is already rendered (isRendered is true), so we are
        // about to be mounted
        const isMounted = __owl__.isMounted;
        const fiber = new Fiber(null, this, force, null, null);
        Promise.resolve().then(() => {
            if (__owl__.isMounted || !isMounted) {
                if (fiber.isCompleted) {
                    return;
                }
                // we are mounted (__owl__.isMounted), or if we are currently being
                // mounted (!isMounted), so we call __render
                this.__render(fiber);
            }
            else {
                // we were mounted when render was called, but we aren't anymore, so we
                // were actually about to be unmounted ; we can thus forget about this
                // fiber
                fiber.isCompleted = true;
                __owl__.currentFiber = null;
            }
        });
        return scheduler.addFiber(fiber);
    }
    /**
     * Destroy the component.  This operation is quite complex:
     *  - it recursively destroy all children
     *  - call the willUnmount hooks if necessary
     *  - remove the dom node from the dom
     *
     * This should only be called manually if you created the component.  Most
     * components will be automatically destroyed.
     */
    destroy() {
        const __owl__ = this.__owl__;
        if (!__owl__.isDestroyed) {
            const el = this.el;
            this.__destroy(__owl__.parent);
            if (el) {
                el.remove();
            }
        }
    }
    /**
     * This method is called by the component system whenever its props are
     * updated. If it returns true, then the component will be rendered.
     * Otherwise, it will skip the rendering (also, its props will not be updated)
     */
    shouldUpdate(nextProps) {
        return true;
    }
    /**
     * Emit a custom event of type 'eventType' with the given 'payload' on the
     * component's el, if it exists. However, note that the event will only bubble
     * up to the parent DOM nodes. Thus, it must be called between mounted() and
     * willUnmount().
     */
    trigger(eventType, payload) {
        this.__trigger(this, eventType, payload);
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Private helper to perform a full destroy, from the point of view of an Owl
     * component. It does not remove the el (this is done only once on the top
     * level destroyed component, for performance reasons).
     *
     * The job of this method is mostly to call willUnmount hooks, and to perform
     * all necessary internal cleanup.
     *
     * Note that it does not call the __callWillUnmount method to avoid visiting
     * all children many times.
     */
    __destroy(parent) {
        const __owl__ = this.__owl__;
        const isMounted = __owl__.isMounted;
        if (isMounted) {
            if (__owl__.willUnmountCB) {
                __owl__.willUnmountCB();
            }
            this.willUnmount();
            __owl__.isMounted = false;
        }
        const children = __owl__.children;
        for (let key in children) {
            children[key].__destroy(this);
        }
        if (parent) {
            let id = __owl__.id;
            delete parent.__owl__.children[id];
            __owl__.parent = null;
        }
        __owl__.isDestroyed = true;
        delete __owl__.vnode;
        if (__owl__.currentFiber) {
            __owl__.currentFiber.isCompleted = true;
        }
    }
    __callMounted() {
        const __owl__ = this.__owl__;
        __owl__.isMounted = true;
        __owl__.currentFiber = null;
        this.mounted();
        if (__owl__.mountedCB) {
            __owl__.mountedCB();
        }
    }
    __callWillUnmount() {
        const __owl__ = this.__owl__;
        if (__owl__.willUnmountCB) {
            __owl__.willUnmountCB();
        }
        this.willUnmount();
        __owl__.isMounted = false;
        if (this.__owl__.currentFiber) {
            this.__owl__.currentFiber.isCompleted = true;
            this.__owl__.currentFiber.root.counter = 0;
        }
        const children = __owl__.children;
        for (let id in children) {
            const comp = children[id];
            if (comp.__owl__.isMounted) {
                comp.__callWillUnmount();
            }
        }
    }
    /**
     * Private trigger method, allows to choose the component which triggered
     * the event in the first place
     */
    __trigger(component, eventType, payload) {
        if (this.el) {
            const ev = new OwlEvent(component, eventType, {
                bubbles: true,
                cancelable: true,
                detail: payload
            });
            const triggerHook = this.env[portalSymbol];
            if (triggerHook) {
                triggerHook(ev);
            }
            this.el.dispatchEvent(ev);
        }
    }
    /**
     * The __updateProps method is called by the t-component directive whenever
     * it updates a component (so, when the parent template is rerendered).
     */
    async __updateProps(nextProps, parentFiber, scope) {
        this.__owl__.scope = scope;
        const shouldUpdate = parentFiber.force || this.shouldUpdate(nextProps);
        if (shouldUpdate) {
            const __owl__ = this.__owl__;
            const fiber = new Fiber(parentFiber, this, parentFiber.force, null, null);
            if (!parentFiber.child) {
                parentFiber.child = fiber;
            }
            else {
                parentFiber.lastChild.sibling = fiber;
            }
            parentFiber.lastChild = fiber;
            const defaultProps = this.constructor.defaultProps;
            if (defaultProps) {
                this.__applyDefaultProps(nextProps, defaultProps);
            }
            if (QWeb.dev) {
                QWeb.utils.validateProps(this.constructor, nextProps);
            }
            await Promise.all([
                this.willUpdateProps(nextProps),
                __owl__.willUpdatePropsCB && __owl__.willUpdatePropsCB(nextProps)
            ]);
            if (fiber.isCompleted) {
                return;
            }
            this.props = nextProps;
            this.__render(fiber);
        }
    }
    /**
     * Main patching method. We call the virtual dom patch method here to convert
     * a virtual dom vnode into some actual dom.
     */
    __patch(target, vnode) {
        this.__owl__.vnode = patch(target, vnode);
    }
    /**
     * The __prepare method is only called by the t-component directive, when a
     * subcomponent is created. It gets its scope, if any, from the
     * parent template.
     */
    __prepare(parentFiber, scope, cb) {
        this.__owl__.scope = scope;
        const fiber = new Fiber(parentFiber, this, parentFiber.force, null, null);
        fiber.shouldPatch = false;
        if (!parentFiber.child) {
            parentFiber.child = fiber;
        }
        else {
            parentFiber.lastChild.sibling = fiber;
        }
        parentFiber.lastChild = fiber;
        this.__prepareAndRender(fiber, cb);
        return fiber;
    }
    /**
     * Apply the stylesheets defined by the component. Note that we need to make
     * sure all inherited stylesheets are applied as well.  We then delete the
     * `style` key from the constructor to make sure we do not apply it again.
     */
    __applyStyles(constr) {
        while (constr && constr.style) {
            if (constr.hasOwnProperty("style")) {
                activateSheet(constr.style, constr.name);
                delete constr.style;
            }
            constr = constr.__proto__;
        }
    }
    __getTemplate(qweb) {
        let p = this.constructor;
        if (!p.hasOwnProperty("_template")) {
            // here, the component and none of its superclasses defines a static `template`
            // key. So we fall back on looking for a template matching its name (or
            // one of its subclass).
            let template = p.name;
            while (!(template in qweb.templates) && p !== Component) {
                p = p.__proto__;
                template = p.name;
            }
            if (p === Component) {
                throw new Error(`Could not find template for component "${this.constructor.name}"`);
            }
            else {
                p._template = template;
            }
        }
        return p._template;
    }
    async __prepareAndRender(fiber, cb) {
        try {
            await Promise.all([this.willStart(), this.__owl__.willStartCB && this.__owl__.willStartCB()]);
        }
        catch (e) {
            fiber.handleError(e);
            return Promise.resolve();
        }
        if (this.__owl__.isDestroyed) {
            return Promise.resolve();
        }
        if (!fiber.isCompleted) {
            this.__render(fiber);
            cb();
        }
    }
    __render(fiber) {
        const __owl__ = this.__owl__;
        if (__owl__.observer) {
            __owl__.observer.allowMutations = false;
        }
        let error;
        try {
            let vnode = __owl__.renderFn(this, {
                handlers: __owl__.boundHandlers,
                fiber: fiber
            });
            // we iterate over the children to detect those that no longer belong to the
            // current rendering: those ones, if not mounted yet, can (and have to) be
            // destroyed right now, because they are not in the DOM, and thus we won't
            // be notified later on (when patching), that they are removed from the DOM
            for (let childKey in __owl__.children) {
                let child = __owl__.children[childKey];
                if (!child.__owl__.isMounted && child.__owl__.parentLastFiberId < fiber.id) {
                    child.destroy();
                }
            }
            if (!vnode) {
                throw new Error(`Rendering '${this.constructor.name}' did not return anything`);
            }
            fiber.vnode = vnode;
            // we apply here the class information described on the component by the
            // template (so, something like <MyComponent class="..."/>) to the actual
            // root vnode
            if (__owl__.classObj) {
                const data = vnode.data;
                data.class = Object.assign(data.class || {}, __owl__.classObj);
            }
        }
        catch (e) {
            error = e;
        }
        if (__owl__.observer) {
            __owl__.observer.allowMutations = true;
        }
        fiber.root.counter--;
        fiber.isRendered = true;
        if (error) {
            fiber.handleError(error);
        }
    }
    /**
     * Only called by qweb t-component directive (when t-keepalive is set)
     */
    __remount() {
        const __owl__ = this.__owl__;
        if (!__owl__.isMounted) {
            __owl__.isMounted = true;
            this.mounted();
        }
    }
    /**
     * Apply default props (only top level).
     *
     * Note that this method does modify in place the props
     */
    __applyDefaultProps(props, defaultProps) {
        for (let propName in defaultProps) {
            if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
            }
        }
    }
}
Component.template = null;
Component._template = null;
Component.current = null;
Component.components = {};
Component.env = {};
// expose scheduler s.t. it can be mocked for testing purposes
Component.scheduler = scheduler;

/**
 * The `Context` object provides a way to share data between an arbitrary number
 * of component. Usually, data is passed from a parent to its children component,
 * but when we have to deal with some mostly global information, this can be
 * annoying, since each component will need to pass the information to each
 * children, even though some or most of them will not use the information.
 *
 * With a `Context` object, each component can subscribe (with the `useContext`
 * hook) to its state, and will be updated whenever the context state is updated.
 */
function partitionBy(arr, fn) {
    let lastGroup = false;
    let lastValue;
    return arr.reduce((acc, cur) => {
        let curVal = fn(cur);
        if (lastGroup) {
            if (curVal === lastValue) {
                lastGroup.push(cur);
            }
            else {
                lastGroup = false;
            }
        }
        if (!lastGroup) {
            lastGroup = [cur];
            acc.push(lastGroup);
        }
        lastValue = curVal;
        return acc;
    }, []);
}
class Context extends EventBus {
    constructor(state = {}) {
        super();
        this.rev = 1;
        // mapping from component id to last observed context id
        this.mapping = {};
        this.observer = new Observer();
        this.observer.notifyCB = () => {
            // notify components in the next microtask tick to ensure that subscribers
            // are notified only once for all changes that occur in the same micro tick
            let rev = this.rev;
            return Promise.resolve().then(() => {
                if (rev === this.rev) {
                    this.__notifyComponents();
                }
            });
        };
        this.state = this.observer.observe(state);
        this.subscriptions.update = [];
    }
    /**
     * Instead of using trigger to emit an update event, we actually implement
     * our own function to do that.  The reason is that we need to be smarter than
     * a simple trigger function: we need to wait for parent components to be
     * done before doing children components.  More precisely, if an update
     * as an effect of destroying a children, we do not want to call any code
     * from the child, and certainly not render it.
     *
     * This method implements a simple grouping algorithm by depth. If we have
     * connected components of depths [2, 4,4,4,4, 3,8,8], the Context will notify
     * them in the following groups: [2], [4,4,4,4], [3], [8,8]. Each group will
     * be updated sequentially, but each components in a given group will be done in
     * parallel.
     *
     * This is a very simple algorithm, but it avoids checking if a given
     * component is a child of another.
     */
    async __notifyComponents() {
        const rev = ++this.rev;
        const subscriptions = this.subscriptions.update;
        const groups = partitionBy(subscriptions, s => (s.owner ? s.owner.__owl__.depth : -1));
        for (let group of groups) {
            const proms = group.map(sub => sub.callback.call(sub.owner, rev));
            // at this point, each component in the current group has registered a
            // top level fiber in the scheduler. It could happen that rendering these
            // components is done (if they have no children).  This is why we manually
            // flush the scheduler.  This will force the scheduler to check
            // immediately if they are done, which will cause their rendering
            // promise to resolve earlier, which means that there is a chance of
            // processing the next group in the same frame.
            scheduler.flush();
            await Promise.all(proms);
        }
    }
}
/**
 * The`useContext` hook is the normal way for a component to register themselve
 * to context state changes. The `useContext` method returns the context state
 */
function useContext(ctx) {
    const component = Component.current;
    return useContextWithCB(ctx, component, component.render.bind(component));
}
function useContextWithCB(ctx, component, method) {
    const __owl__ = component.__owl__;
    const id = __owl__.id;
    const mapping = ctx.mapping;
    if (id in mapping) {
        return ctx.state;
    }
    if (!__owl__.observer) {
        __owl__.observer = new Observer();
        __owl__.observer.notifyCB = component.render.bind(component);
    }
    const currentCB = __owl__.observer.notifyCB;
    __owl__.observer.notifyCB = function () {
        if (ctx.rev > mapping[id]) {
            // in this case, the context has been updated since we were rendering
            // last, and we do not need to render here with the observer. A
            // rendering is coming anyway, with the correct props.
            return;
        }
        currentCB();
    };
    mapping[id] = 0;
    const renderFn = __owl__.renderFn;
    __owl__.renderFn = function (comp, params) {
        mapping[id] = ctx.rev;
        return renderFn(comp, params);
    };
    ctx.on("update", component, async (contextRev) => {
        if (mapping[id] < contextRev) {
            mapping[id] = contextRev;
            await method();
        }
    });
    const __destroy = component.__destroy;
    component.__destroy = parent => {
        ctx.off("update", component);
        delete mapping[id];
        __destroy.call(component, parent);
    };
    return ctx.state;
}

/**
 * Owl Hook System
 *
 * This file introduces the concept of hooks, similar to React or Vue hooks.
 * We have currently an implementation of:
 * - useState (reactive state)
 * - onMounted
 * - onWillUnmount
 * - useRef
 */
// -----------------------------------------------------------------------------
// useState
// -----------------------------------------------------------------------------
/**
 * This is the main way a component can be made reactive.  The useState hook
 * will return an observed object (or array).  Changes to that value will then
 * trigger a rerendering of the current component.
 */
function useState(state) {
    const component = Component.current;
    const __owl__ = component.__owl__;
    if (!__owl__.observer) {
        __owl__.observer = new Observer();
        __owl__.observer.notifyCB = component.render.bind(component);
    }
    return __owl__.observer.observe(state);
}
// -----------------------------------------------------------------------------
// Life cycle hooks
// -----------------------------------------------------------------------------
function makeLifecycleHook(method, reverse = false) {
    if (reverse) {
        return function (cb) {
            const component = Component.current;
            if (component.__owl__[method]) {
                const current = component.__owl__[method];
                component.__owl__[method] = function () {
                    current.call(component);
                    cb.call(component);
                };
            }
            else {
                component.__owl__[method] = cb;
            }
        };
    }
    else {
        return function (cb) {
            const component = Component.current;
            if (component.__owl__[method]) {
                const current = component.__owl__[method];
                component.__owl__[method] = function () {
                    cb.call(component);
                    current.call(component);
                };
            }
            else {
                component.__owl__[method] = cb;
            }
        };
    }
}
function makeAsyncHook(method) {
    return function (cb) {
        const component = Component.current;
        if (component.__owl__[method]) {
            const current = component.__owl__[method];
            component.__owl__[method] = function (...args) {
                return Promise.all([current.call(component, ...args), cb.call(component, ...args)]);
            };
        }
        else {
            component.__owl__[method] = cb;
        }
    };
}
const onMounted = makeLifecycleHook("mountedCB", true);
const onWillUnmount = makeLifecycleHook("willUnmountCB");
const onWillPatch = makeLifecycleHook("willPatchCB");
const onPatched = makeLifecycleHook("patchedCB", true);
const onWillStart = makeAsyncHook("willStartCB");
const onWillUpdateProps = makeAsyncHook("willUpdatePropsCB");
function useRef(name) {
    const __owl__ = Component.current.__owl__;
    return {
        get el() {
            const val = __owl__.refs && __owl__.refs[name];
            if (val instanceof HTMLElement) {
                return val;
            }
            else if (val instanceof Component) {
                return val.el;
            }
            return null;
        },
        get comp() {
            const val = __owl__.refs && __owl__.refs[name];
            return val instanceof Component ? val : null;
        }
    };
}
// -----------------------------------------------------------------------------
// useSubEnv
// -----------------------------------------------------------------------------
/**
 * This hook is a simple way to let components use a sub environment.  Note that
 * like for all hooks, it is important that this is only called in the
 * constructor method.
 */
function useSubEnv(nextEnv) {
    const component = Component.current;
    component.env = Object.assign(Object.create(component.env), nextEnv);
}
// -----------------------------------------------------------------------------
// useExternalListener
// -----------------------------------------------------------------------------
/**
 * When a component needs to listen to DOM Events on element(s) that are not
 * part of his hierarchy, we can use the `useExternalListener` hook.
 * It will correctly add and remove the event listener, whenever the
 * component is mounted and unmounted.
 *
 * Example:
 *  a menu needs to listen to the click on window to be closed automatically
 *
 * Usage:
 *  in the constructor of the OWL component that needs to be notified,
 *  `useExternalListener(window, 'click', this._doSomething);`
 * */
function useExternalListener(target, eventName, handler, eventParams) {
    const boundHandler = handler.bind(Component.current);
    onMounted(() => target.addEventListener(eventName, boundHandler, eventParams));
    onWillUnmount(() => target.removeEventListener(eventName, boundHandler, eventParams));
}

var _hooks = /*#__PURE__*/Object.freeze({
    __proto__: null,
    useState: useState,
    onMounted: onMounted,
    onWillUnmount: onWillUnmount,
    onWillPatch: onWillPatch,
    onPatched: onPatched,
    onWillStart: onWillStart,
    onWillUpdateProps: onWillUpdateProps,
    useRef: useRef,
    useSubEnv: useSubEnv,
    useExternalListener: useExternalListener
});

class Store extends Context {
    constructor(config) {
        super(config.state);
        this.actions = config.actions;
        this.env = config.env;
        this.getters = {};
        this.updateFunctions = [];
        if (config.getters) {
            const firstArg = {
                state: this.state,
                getters: this.getters
            };
            for (let g in config.getters) {
                this.getters[g] = config.getters[g].bind(this, firstArg);
            }
        }
    }
    dispatch(action, ...payload) {
        if (!this.actions[action]) {
            throw new Error(`[Error] action ${action} is undefined`);
        }
        const result = this.actions[action]({
            dispatch: this.dispatch.bind(this),
            env: this.env,
            state: this.state,
            getters: this.getters
        }, ...payload);
        return result;
    }
}
const isStrictEqual = (a, b) => a === b;
function useStore(selector, options = {}) {
    const component = Component.current;
    const componentId = component.__owl__.id;
    const store = options.store || component.env.store;
    if (!(store instanceof Store)) {
        throw new Error(`No store found when connecting '${component.constructor.name}'`);
    }
    let result = selector(store.state, component.props);
    const hashFn = store.observer.revNumber.bind(store.observer);
    let revNumber = hashFn(result);
    const isEqual = options.isEqual || isStrictEqual;
    if (!store.updateFunctions[componentId]) {
        store.updateFunctions[componentId] = [];
    }
    function selectCompareUpdate(state, props) {
        const oldResult = result;
        result = selector(state, props);
        const newRevNumber = hashFn(result);
        if ((newRevNumber > 0 && revNumber !== newRevNumber) || !isEqual(oldResult, result)) {
            revNumber = newRevNumber;
            if (options.onUpdate) {
                options.onUpdate(result);
            }
            return true;
        }
        return false;
    }
    store.updateFunctions[componentId].push(function () {
        return selectCompareUpdate(store.state, component.props);
    });
    useContextWithCB(store, component, function () {
        let shouldRender = false;
        for (let fn of store.updateFunctions[componentId]) {
            shouldRender = fn() || shouldRender;
        }
        if (shouldRender) {
            return component.render();
        }
    });
    onWillUpdateProps(props => {
        selectCompareUpdate(store.state, props);
    });
    const __destroy = component.__destroy;
    component.__destroy = parent => {
        delete store.updateFunctions[componentId];
        __destroy.call(component, parent);
    };
    if (typeof result !== "object" || result === null) {
        return result;
    }
    return new Proxy(result, {
        get(target, k) {
            return result[k];
        },
        set(target, k, v) {
            throw new Error("Store state should only be modified through actions");
        },
        has(target, k) {
            return k in result;
        }
    });
}
function useDispatch(store) {
    store = store || Component.current.env.store;
    return store.dispatch.bind(store);
}
function useGetters(store) {
    store = store || Component.current.env.store;
    return store.getters;
}

/**
 * Owl Tags
 *
 * We have here a (very) small collection of tag functions:
 *
 * - xml
 *
 * The plan is to add a few other tags such as css, globalcss.
 */
/**
 * XML tag helper for defining templates.  With this, one can simply define
 * an inline template with just the template xml:
 * ```js
 *   class A extends Component {
 *     static template = xml`<div>some template</div>`;
 *   }
 * ```
 */
function xml(strings, ...args) {
    const name = `__template__${QWeb.nextId++}`;
    const value = String.raw(strings, ...args);
    QWeb.registerTemplate(name, value);
    return name;
}
/**
 * CSS tag helper for defining inline stylesheets.  With this, one can simply define
 * an inline stylesheet with just the following code:
 * ```js
 *   class A extends Component {
 *     static style = css`.component-a { color: red; }`;
 *   }
 * ```
 */
function css(strings, ...args) {
    const name = `__sheet__${QWeb.nextId++}`;
    const value = String.raw(strings, ...args);
    registerSheet(name, value);
    return name;
}

var _tags = /*#__PURE__*/Object.freeze({
    __proto__: null,
    xml: xml,
    css: css
});

/**
 * AsyncRoot
 *
 * Owl is by default asynchronous, and the user interface will wait for all its
 * subcomponents to be rendered before updating the DOM. This is most of the
 * time what we want, but in some cases, it makes sense to "detach" a component
 * from this coordination.  This is the goal of the AsyncRoot component.
 */
class AsyncRoot extends Component {
    async __updateProps(nextProps, parentFiber) {
        this.render(parentFiber.force);
    }
}
AsyncRoot.template = xml `<t t-slot="default"/>`;

class Portal extends Component {
    constructor(parent, props) {
        super(parent, props);
        // boolean to indicate whether or not we must listen to 'dom-appended' event
        // to hook on the moment when the target is inserted into the DOM (because it
        // is not when the portal is rendered)
        this.doTargetLookUp = true;
        // set of encountered events that need to be redirected
        this._handledEvents = new Set();
        // function that will be the event's tunnel (needs to be an arrow function to
        // avoid having to rebind `this`)
        this._handlerTunnel = (ev) => {
            ev.stopPropagation();
            this.__trigger(ev.originalComponent, ev.type, ev.detail);
        };
        // Storing the parent's env
        this.parentEnv = null;
        // represents the element that is moved somewhere else
        this.portal = null;
        // the target where we will move `portal`
        this.target = null;
        this.parentEnv = parent ? parent.env : {};
        // put a callback in the env that is propagated to children s.t. portal can
        // register an handler to those events just before children will trigger them
        useSubEnv({
            [portalSymbol]: ev => {
                if (!this._handledEvents.has(ev.type)) {
                    this.portal.elm.addEventListener(ev.type, this._handlerTunnel);
                    this._handledEvents.add(ev.type);
                }
            }
        });
    }
    /**
     * Override to revert back to a classic Component's structure
     *
     * @override
     */
    __callWillUnmount() {
        super.__callWillUnmount();
        this.el.appendChild(this.portal.elm);
        this.doTargetLookUp = true;
    }
    /**
     * At each DOM change, we must ensure that the portal contains exactly one
     * child
     */
    __checkVNodeStructure(vnode) {
        const children = vnode.children;
        let countRealNodes = 0;
        for (let child of children) {
            if (child.sel) {
                countRealNodes++;
            }
        }
        if (countRealNodes !== 1) {
            throw new Error(`Portal must have exactly one non-text child (has ${countRealNodes})`);
        }
    }
    /**
     * Ensure the target is still there at whichever time we render
     */
    __checkTargetPresence() {
        if (!this.target || !document.contains(this.target)) {
            throw new Error(`Could not find any match for "${this.props.target}"`);
        }
    }
    /**
     * Move the portal's element to the target
     */
    __deployPortal() {
        this.__checkTargetPresence();
        this.target.appendChild(this.portal.elm);
    }
    /**
     * Override to remove from the DOM the element we have teleported
     *
     * @override
     */
    __destroy(parent) {
        if (this.portal && this.portal.elm) {
            const displacedElm = this.portal.elm;
            const parent = displacedElm.parentNode;
            if (parent) {
                parent.removeChild(displacedElm);
            }
        }
        super.__destroy(parent);
    }
    /**
     * Override to patch the element that has been teleported
     *
     * @override
     */
    __patch(target, vnode) {
        if (this.doTargetLookUp) {
            const target = document.querySelector(this.props.target);
            if (!target) {
                this.env.qweb.on("dom-appended", this, () => {
                    this.doTargetLookUp = false;
                    this.env.qweb.off("dom-appended", this);
                    this.target = document.querySelector(this.props.target);
                    this.__deployPortal();
                });
            }
            else {
                this.doTargetLookUp = false;
                this.target = target;
            }
        }
        this.__checkVNodeStructure(vnode);
        const shouldDeploy = (!this.portal || this.el.contains(this.portal.elm)) && !this.doTargetLookUp;
        if (!this.doTargetLookUp && !shouldDeploy) {
            // Only on pure patching, provided the
            // this.target's parent has not been unmounted
            this.__checkTargetPresence();
        }
        const portalPatch = this.portal ? this.portal : document.createElement(vnode.children[0].sel);
        this.portal = patch(portalPatch, vnode.children[0]);
        vnode.children = [];
        super.__patch(target, vnode);
        if (shouldDeploy) {
            this.__deployPortal();
        }
    }
    /**
     * Override to set the env
     */
    __trigger(component, eventType, payload) {
        const env = this.env;
        this.env = this.parentEnv;
        super.__trigger(component, eventType, payload);
        this.env = env;
    }
}
Portal.template = xml `<portal><t t-slot="default"/></portal>`;
Portal.props = {
    target: {
        type: String
    }
};

class Link extends Component {
    constructor() {
        super(...arguments);
        this.href = this.env.router.destToPath(this.props);
    }
    async willUpdateProps(nextProps) {
        this.href = this.env.router.destToPath(nextProps);
    }
    get isActive() {
        if (this.env.router.mode === "hash") {
            return document.location.hash === this.href;
        }
        return document.location.pathname === this.href;
    }
    navigate(ev) {
        // don't redirect with control keys
        if (ev.metaKey || ev.altKey || ev.ctrlKey || ev.shiftKey) {
            return;
        }
        // don't redirect on right click
        if (ev.button !== undefined && ev.button !== 0) {
            return;
        }
        // don't redirect if `target="_blank"`
        if (ev.currentTarget && ev.currentTarget.getAttribute) {
            const target = ev.currentTarget.getAttribute("target");
            if (/\b_blank\b/i.test(target)) {
                return;
            }
        }
        ev.preventDefault();
        this.env.router.navigate(this.props);
    }
}
Link.template = xml `
    <a  t-att-class="{'router-link-active': isActive }"
        t-att-href="href"
        t-on-click="navigate">
        <t t-slot="default"/>
    </a>
  `;

class RouteComponent extends Component {
    get routeComponent() {
        return this.env.router.currentRoute && this.env.router.currentRoute.component;
    }
}
RouteComponent.template = xml `
    <t>
        <t
            t-if="routeComponent"
            t-component="routeComponent"
            t-key="env.router.currentRouteName"
            t-props="env.router.currentParams" />
    </t>
  `;

const paramRegexp = /\{\{(.*?)\}\}/;
class Router {
    constructor(env, routes, options = { mode: "history" }) {
        this.currentRoute = null;
        this.currentParams = null;
        env.router = this;
        this.mode = options.mode;
        this.env = env;
        this.routes = {};
        this.routeIds = [];
        let nextId = 1;
        for (let partialRoute of routes) {
            if (!partialRoute.name) {
                partialRoute.name = "__route__" + nextId++;
            }
            if (partialRoute.component) {
                QWeb.registerComponent("__component__" + partialRoute.name, partialRoute.component);
            }
            if (partialRoute.redirect) {
                this.validateDestination(partialRoute.redirect);
            }
            partialRoute.params = partialRoute.path ? findParams(partialRoute.path) : [];
            this.routes[partialRoute.name] = partialRoute;
            this.routeIds.push(partialRoute.name);
        }
    }
    //--------------------------------------------------------------------------
    // Public API
    //--------------------------------------------------------------------------
    async start() {
        this._listener = ev => this._navigate(this.currentPath(), ev);
        window.addEventListener("popstate", this._listener);
        if (this.mode === "hash") {
            window.addEventListener("hashchange", this._listener);
        }
        const result = await this.matchAndApplyRules(this.currentPath());
        if (result.type === "match") {
            this.currentRoute = result.route;
            this.currentParams = result.params;
            const currentPath = this.routeToPath(result.route, result.params);
            if (currentPath !== this.currentPath()) {
                this.setUrlFromPath(currentPath);
            }
        }
    }
    async navigate(to) {
        const path = this.destToPath(to);
        return this._navigate(path);
    }
    async _navigate(path, ev) {
        const initialName = this.currentRouteName;
        const initialParams = this.currentParams;
        const result = await this.matchAndApplyRules(path);
        if (result.type === "match") {
            const finalPath = this.routeToPath(result.route, result.params);
            const isPopStateEvent = ev && ev instanceof PopStateEvent;
            if (!isPopStateEvent) {
                this.setUrlFromPath(finalPath);
            }
            this.currentRoute = result.route;
            this.currentParams = result.params;
        }
        else if (result.type === "nomatch") {
            this.currentRoute = null;
            this.currentParams = null;
        }
        const didChange = this.currentRouteName !== initialName || !shallowEqual(this.currentParams, initialParams);
        if (didChange) {
            this.env.qweb.forceUpdate();
            return true;
        }
        return false;
    }
    destToPath(dest) {
        this.validateDestination(dest);
        return dest.path || this.routeToPath(this.routes[dest.to], dest.params);
    }
    get currentRouteName() {
        return this.currentRoute && this.currentRoute.name;
    }
    //--------------------------------------------------------------------------
    // Private helpers
    //--------------------------------------------------------------------------
    setUrlFromPath(path) {
        const separator = this.mode === "hash" ? location.pathname : "";
        const url = location.origin + separator + path;
        if (url !== window.location.href) {
            window.history.pushState({}, path, url);
        }
    }
    validateDestination(dest) {
        if ((!dest.path && !dest.to) || (dest.path && dest.to)) {
            throw new Error(`Invalid destination: ${JSON.stringify(dest)}`);
        }
    }
    routeToPath(route, params) {
        const path = route.path;
        const parts = path.split("/");
        const l = parts.length;
        for (let i = 0; i < l; i++) {
            const part = parts[i];
            const match = part.match(paramRegexp);
            if (match) {
                const key = match[1].split(".")[0];
                parts[i] = params[key];
            }
        }
        const prefix = this.mode === "hash" ? "#" : "";
        return prefix + parts.join("/");
    }
    currentPath() {
        let result = this.mode === "history" ? window.location.pathname : window.location.hash.slice(1);
        return result || "/";
    }
    match(path) {
        for (let routeId of this.routeIds) {
            let route = this.routes[routeId];
            let params = this.getRouteParams(route, path);
            if (params) {
                return {
                    type: "match",
                    route: route,
                    params: params
                };
            }
        }
        return { type: "nomatch" };
    }
    async matchAndApplyRules(path) {
        const result = this.match(path);
        if (result.type === "match") {
            return this.applyRules(result);
        }
        return result;
    }
    async applyRules(matchResult) {
        const route = matchResult.route;
        if (route.redirect) {
            const path = this.destToPath(route.redirect);
            return this.matchAndApplyRules(path);
        }
        if (route.beforeRouteEnter) {
            const result = await route.beforeRouteEnter({
                env: this.env,
                from: this.currentRoute,
                to: route
            });
            if (result === false) {
                return { type: "cancelled" };
            }
            else if (result !== true) {
                // we want to navigate to another destination
                const path = this.destToPath(result);
                return this.matchAndApplyRules(path);
            }
        }
        return matchResult;
    }
    getRouteParams(route, path) {
        if (route.path === "*") {
            return {};
        }
        if (path.startsWith("#")) {
            path = path.slice(1);
        }
        const descrParts = route.path.split("/");
        const targetParts = path.split("/");
        const l = descrParts.length;
        if (l !== targetParts.length) {
            return false;
        }
        const result = {};
        for (let i = 0; i < l; i++) {
            const descr = descrParts[i];
            let target = targetParts[i];
            const match = descr.match(paramRegexp);
            if (match) {
                const [key, suffix] = match[1].split(".");
                if (suffix === "number") {
                    target = parseInt(target, 10);
                }
                result[key] = target;
            }
            else if (descr !== target) {
                return false;
            }
        }
        return result;
    }
}
function findParams(str) {
    const globalParamRegexp = /\{\{(.*?)\}\}/g;
    const result = [];
    let m;
    do {
        m = globalParamRegexp.exec(str);
        if (m) {
            result.push(m[1].split(".")[0]);
        }
    } while (m);
    return result;
}

/**
 * This file is the main file packaged by rollup (see rollup.config.js).  From
 * this file, we export all public owl elements.
 *
 * Note that dynamic values, such as a date or a commit hash are added by rollup
 */
const Context$1 = Context;
const useState$1 = useState;
const core = { EventBus, Observer };
const router = { Router, RouteComponent, Link };
const Store$1 = Store;
const utils = _utils;
const tags = _tags;
const misc = { AsyncRoot, Portal };
const hooks$1 = Object.assign({}, _hooks, {
    useContext: useContext,
    useDispatch: useDispatch,
    useGetters: useGetters,
    useStore: useStore
});
const __info__ = {};

exports.Component = Component;
exports.Context = Context$1;
exports.QWeb = QWeb;
exports.Store = Store$1;
exports.__info__ = __info__;
exports.config = config;
exports.core = core;
exports.hooks = hooks$1;
exports.misc = misc;
exports.router = router;
exports.tags = tags;
exports.useState = useState$1;
exports.utils = utils;

exports.__info__.version = '1.0.7';
exports.__info__.date = '2020-04-17T13:53:57.507Z';
exports.__info__.hash = '23ce19e';
exports.__info__.url = 'https://github.com/odoo/owl';


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./bundles/basicLayout.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./bundles/basicLayout.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "jw-editor {\n    display: flex;\n    flex-direction: column;\n}\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./packages/plugin-devtools/assets/DevTools.css":
/*!********************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./packages/plugin-devtools/assets/DevTools.css ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* GLOBAL */\n\njw-devtools {\n    bottom: 0;\n    min-height: 30px;\n    max-height: 100%;\n    top: auto;\n    background-color: white;\n    border-top: 1px solid #d0d0d0;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    user-select: none;\n    outline: none;\n}\n\ndevtools-table {\n    display: table;\n}\ndevtools-tbody {\n    display: table-row-group;\n}\ndevtools-tr {\n    display: table-row;\n}\ndevtools-td {\n    display: table-cell;\n    padding-right: 25px;\n}\ndevtools-button {\n    display: inline;\n    text-align: center;\n    align-items: flex-start;\n    box-sizing: border-box;\n    line-height: 2em;\n    font-family: initial;\n}\ndevtools-list {\n    display: block;\n    list-style: none;\n}\ndevtools-listitem {\n    display: list-item;\n}\n\njw-devtools.closed {\n    max-height: 31px;\n}\n\njw-devtools .bold {\n    font-weight: bold;\n}\n\njw-devtools .italic {\n    font-style: italic;\n}\n\njw-devtools .underline {\n    text-decoration: underline;\n}\n\njw-devtools .link {\n    text-decoration: underline;\n    color: blue;\n}\n\njw-devtools .subscript {\n    vertical-align: sub;\n    font-size: 0.7em;\n}\n\njw-devtools .superscript {\n    vertical-align: super;\n    font-size: 0.7em;\n}\n\njw-devtools .marker-node {\n    color: red;\n}\n\ndevtools-panel {\n    display: flex;\n    overflow: auto;\n}\n\ndevtools-panel:not(.active) {\n    display: none;\n}\n\ndevtools-panel .selectable-line:hover {\n    background-color: rgba(118, 82, 108, 0.2);\n}\n\ndevtools-panel .selectable-line.selected {\n    background-color: rgba(118, 82, 108, 0.3);\n}\n\ndevtools-panel devtools-button.logger {\n    float: right;\n    border: none;\n    background-color: transparent;\n    color: #666666;\n    padding: 0;\n    margin: 0;\n    display: none;\n    line-height: 0.7em;\n}\n\ndevtools-panel devtools-about > devtools-button.logger {\n    display: inline;\n    margin-left: 1em;\n}\n\ndevtools-panel .selectable-line:hover devtools-button.logger, devtools-panel .selected devtools-button.logger {\n    display: inline;\n}\n\n/* NAVBAR */\n\njw-devtools:not(.closed) > devtools-navbar {\n    cursor: row-resize;\n}\n\ndevtools-navbar {\n    background-color: #f3f3f3;\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    height: 30px;\n    min-height: 30px;\n    width: 100%;\n    align-items: center;\n    border: 0;\n    border-bottom: 1px solid #d0d0d0;\n    box-sizing: border-box;\n    vertical-align: baseline;\n}\n\ndevtools-navbar > devtools-button {\n    padding: 0 10px 0 10px;\n    background: none;\n    border: 0;\n    vertical-align: middle;\n    outline: none;\n    cursor: auto;\n}\n\ndevtools-navbar > devtools-button:hover {\n    background-color: #d6d6d6;\n}\n\ndevtools-navbar > devtools-button.selected {\n    border-bottom: solid 2px #76526c;\n}\n\n/* CONTENTS */\n\ndevtools-contents {\n    display: flex;\n    flex-direction: row;\n    flex: 1;\n    overflow: auto;\n    position: relative;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n/* mainpane */\n\ndevtools-mainpane {\n    display: flex;\n    overflow: auto;\n    flex-direction: column;\n    width: 100%;\n}\n\nmainpane-contents {\n    overflow: auto;\n    flex: 1;\n    padding: 1em;\n}\n\nmainpane-contents > devtools-table devtools-td:nth-child(1)  {\n    width: 100px;\n}\n\ndevtools-command {\n    display: block;\n}\n\n/* tree */\n\ndevtools-tree {\n    display: block;\n    flex-grow: 1;\n    width: 100%;\n}\n\ndevtools-tree devtools-children {\n    display: block;\n    position: relative;\n    box-sizing: border-box;\n    padding: 1px 0 1px 1.5em;\n    border-left: 1px solid #d0d0d0;\n}\n\ndevtools-tree div {\n    width: 100%;\n}\n\ndevtools-tree > devtools-node.root > devtools-nodename {\n    background-color: #76526c;\n    color: white;\n    padding-left: 5px;\n    box-sizing: border-box;\n}\n\njw-devtools devtools-nodename.inline {\n    display: inline;\n}\n\ndevtools-tree devtools-nodename.block {\n    color: #76526c;\n    width: 100%;\n    display: inline-block;\n}\n\ndevtools-tree devtools-nodename.line-break:after {\n    content: '\\A';\n    white-space: pre;\n}\n\ndevtools-node {\n    outline: none;\n}\n\ndevtools-node:not(.folded):not(.self-closing):not(.root) > devtools-nodename.block:before {\n    content: '⌄ ';\n}\n\ndevtools-node.folded:not(.self-closing) > devtools-nodename.block:before {\n    content: '› ';\n}\n\ndevtools-node.folded devtools-children {\n    display: none;\n}\n\ndevtools-path {\n    display: block;\n    border-top: 1px solid #d0d0d0;\n    background-color: #dddddd;\n    /* position: fixed; */\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n\ndevtools-pathnode {\n    display: inline-block;\n    padding: .2em 1em .2em 1em;\n    color: #696969;\n    font-size: 13px;\n}\n\ndevtools-pathnode:hover {\n    background-color: #d6d6d6;\n}\n\ndevtools-pathnode.selected {\n    background-color: #d0d0d0;\n}\n\n/* sidepane */\n\ndevtools-sidepane {\n    position: relative;\n    overflow: auto;\n    display: block;\n    font-size: 15px;\n    box-sizing: border-box;\n    width: 30%;\n    background-color: white;\n    border-left: 1px solid #d0d0d0;\n}\n\ndevtools-sidepane devtools-about {\n    border-bottom: 1px solid #d0d0d0;\n    padding: 10px;\n}\n\ndevtools-sidepane devtools-about devtools-type {\n    font-family: initial;\n    font-style: italic;\n    font-size: smaller;\n    color: #76526c;\n    padding-right: .5em;\n}\n\ndevtools-sidepane devtools-properties {\n    font-size: 12px;\n    padding: 10px;\n    overflow: auto;\n    margin-bottom: 30px;\n}\n\ndevtools-infotitle {\n    display: block;\n}\n\ndevtools-sidepane devtools-properties devtools-infotitle {\n    padding: 1em;\n    font-family: initial;\n    font-size: larger;\n    color: #382034;\n}\n\ndevtools-sidepane devtools-properties devtools-infotitle:first-child {\n    padding-top: 0em;\n}\n\ndevtools-sidepane devtools-properties devtools-table {\n    width: 100%;\n    font-size: inherit;\n}\n\ndevtools-sidepane devtools-properties devtools-table devtools-tbody{\n    vertical-align: top;\n}\n\ndevtools-sidepane devtools-properties devtools-table devtools-td {\n    padding: 0.3em;\n}\n\ndevtools-sidepane devtools-properties devtools-table devtools-td:nth-child(1) {\n    width: 100px;\n}\n\ndevtools-sidepane devtools-properties devtools-table devtools-list {\n    list-style-position: inside;\n    padding-left: 0;\n    margin: 0;\n}\n\ndevtools-sidepane devtools-properties > devtools-table > devtools-tbody > devtools-tr:nth-child(even) {\n    background-color: #f4f4f4;\n}\n\ndevtools-info {\n    display: flex;\n    flex-direction: column;\n}\n\ndevtools-info devtools-about devtools-id {\n    float: right;\n    color: #76526c;\n    font-size: smaller;\n}\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./packages/plugin-dialog/src/ui/Dialog.css":
/*!****************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./packages/plugin-dialog/src/ui/Dialog.css ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "jw-dialog-container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\njw-dialog-container jw-backdrop {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.5;\n    background-color: #000000;\n}\njw-dialog-container jw-dialog {\n    position: absolute;\n    display: flex;\n    max-width: 80%;\n}\njw-dialog-container jw-dialog > jw-content {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    background-color: #F7F7F7;\n    padding: 10px;\n    border-radius: 10px;\n}\njw-dialog-container jw-dialog > jw-content > jw-button.close {\n    position: absolute;\n    right: 10px;\n    top: 4px;\n    cursor: pointer;\n}\njw-dialog-container jw-dialog table.form-table {\n    border: none;\n}\njw-dialog-container jw-dialog table.form-table td {\n    border: none;\n}\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./packages/plugin-toolbar/assets/Toolbar.css":
/*!******************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./packages/plugin-toolbar/assets/Toolbar.css ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "jw-toolbar {\n    display: block;\n    min-height: 14px;\n    background-color: #875A7B;\n    border-bottom: 1px solid #68465f;\n    color: white;\n    overflow: hidden;\n    font-family: \"Montserrat\", sans-serif;\n    text-align: center;\n    width: 100%;\n}\n\n.jw-primary-button {\n    background-color: #00A09D;\n    color: white;\n}\n\njw-toolbar span {\n    font-weight: 600;\n    padding: 5px;\n}\n\njw-toolbar .pressed {\n    background-color: #9c8897;\n    color: white;\n}\n\njw-toolbar jw-separator {\n    display: inline-block;\n    background-color: #c1a8ba;\n    height: 30px;\n    width: 1px;\n    margin-left: 2px;\n    margin-right: 2px;\n    margin-top: 5px;\n    margin-bottom: 5px;\n    vertical-align: bottom;\n}\n\njw-toolbar toolbar-group jw-separator {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\njw-toolbar toolbar-group {\n    display: inline-block;\n    margin: 5px;\n}\n\njw-toolbar select, jw-toolbar option {\n    background-color: white;\n    border: 1px solid #68465f;\n    padding: 5px;\n    height: 30px !important;\n}\n\njw-toolbar option:disabled {\n    background-color: #875A7B;\n    color: white;\n    font-weight: bold;\n}\n\njw-toolbar button {\n    background-color: white;\n    border: 1px solid #68465f;\n    padding: 5px;\n    width: 30px !important;\n    height: 30px !important;\n}\n\njw-toolbar .h1 {\n    font-size: 2em;\n    font-weight: bold;\n}\njw-toolbar .h2 {\n    font-size: 1.5em;\n    font-weight: bold;\n}\njw-toolbar .h3 {\n    font-size: 1.17em;\n    font-weight: bold;\n}\njw-toolbar .h4 {\n    font-size: 1em;\n    font-weight: bold;\n}\njw-toolbar .h5 {\n    font-size: 0.83em;\n    font-weight: bold;\n}\njw-toolbar .h6 {\n    font-size: 0.67em;\n    font-weight: bold;\n}\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./packages/build-odoo-integration/odoo-integration.ts":
/*!*************************************************************!*\
  !*** ./packages/build-odoo-integration/odoo-integration.ts ***!
  \*************************************************************/
/*! exports provided: OdooWebsiteEditor, BasicEditor, DevTools, Layout, DomLayoutEngine, Renderer, ImageNode, withRange, VRange, createExecCommandHelpersForOdoo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _bundles_BasicEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../bundles/BasicEditor */ "./bundles/BasicEditor.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BasicEditor", function() { return _bundles_BasicEditor__WEBPACK_IMPORTED_MODULE_0__["BasicEditor"]; });

/* harmony import */ var _plugin_devtools_src_DevTools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugin-devtools/src/DevTools */ "./packages/plugin-devtools/src/DevTools.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DevTools", function() { return _plugin_devtools_src_DevTools__WEBPACK_IMPORTED_MODULE_1__["DevTools"]; });

/* harmony import */ var _bundles_OdooWebsiteEditor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../bundles/OdooWebsiteEditor */ "./bundles/OdooWebsiteEditor.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OdooWebsiteEditor", function() { return _bundles_OdooWebsiteEditor__WEBPACK_IMPORTED_MODULE_2__["OdooWebsiteEditor"]; });

/* harmony import */ var _core_src_VRange__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/src/VRange */ "./packages/core/src/VRange.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withRange", function() { return _core_src_VRange__WEBPACK_IMPORTED_MODULE_3__["withRange"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VRange", function() { return _core_src_VRange__WEBPACK_IMPORTED_MODULE_3__["VRange"]; });

/* harmony import */ var _plugin_dom_layout_src_ui_DomLayoutEngine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../plugin-dom-layout/src/ui/DomLayoutEngine */ "./packages/plugin-dom-layout/src/ui/DomLayoutEngine.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DomLayoutEngine", function() { return _plugin_dom_layout_src_ui_DomLayoutEngine__WEBPACK_IMPORTED_MODULE_4__["DomLayoutEngine"]; });

/* harmony import */ var _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Layout", function() { return _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_5__["Layout"]; });

/* harmony import */ var _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_6__["Renderer"]; });

/* harmony import */ var _plugin_image_src_ImageNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../plugin-image/src/ImageNode */ "./packages/plugin-image/src/ImageNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImageNode", function() { return _plugin_image_src_ImageNode__WEBPACK_IMPORTED_MODULE_7__["ImageNode"]; });

/* harmony import */ var _plugin_odoo_snippets_src_OdooBindings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../plugin-odoo-snippets/src/OdooBindings */ "./packages/plugin-odoo-snippets/src/OdooBindings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createExecCommandHelpersForOdoo", function() { return _plugin_odoo_snippets_src_OdooBindings__WEBPACK_IMPORTED_MODULE_8__["createExecCommandHelpersForOdoo"]; });













/***/ }),

/***/ "./packages/core/src/ContextManager.ts":
/*!*********************************************!*\
  !*** ./packages/core/src/ContextManager.ts ***!
  \*********************************************/
/*! exports provided: ContextManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextManager", function() { return ContextManager; });
class ContextManager {
    constructor(editor) {
        this.editor = editor;
        this.defaultContext = {
            range: this.editor.selection.range,
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Match a command from the current context (the `vDocument` selection).
     *
     * Search through all command with `commandId` and return the last
     * `CommandImplementation` that match a particular context.
     *
     * Commands with more specificity will have priority.  If there is multiples
     * commands with the same specificity, the last defined will be retured.
     *
     * The context is the `editor.selection.range.start.ancestors()`.
     *
     * Specificity is defined with:
     * - `lvl2`: if the last predicate of a command "a"'s selector is deeper in
     *   the tree than the last predicate of a command "b"'s selector; command
     *   "a" have more specificity
     * - `lvl1`: if two or more commands have the same `lvl2` specificity; the
     *   command with the longest selector will have more specificity
     * - `lvl0`: if the command has no selector, there is no specificity
     *
     * For example:
     * ```typescript
     * const commandUlP: CommandImplementation = {
     *     selector: [isUl, isP],
     *     handler: () =>{},
     * }
     * const commandP: CommandImplementation = {
     *     selector: [isP],
     *     handler: () =>{},
     * }
     * const commandUl: CommandImplementation = {
     *     selector: [isUl],
     *     handler: () =>{},
     * }
     * const commandImage: CommandImplementation = {
     *     selector: [isImage],
     *     handler: () =>{},
     * }
     * const commandAny: CommandImplementation = {
     *     selector: [],
     *     handler: () =>{},
     * }
     * dispatcher.registerCommand('command', commandUlP)
     * dispatcher.registerCommand('command', commandP)
     * dispatcher.registerCommand('command', commandUl)
     * dispatcher.registerCommand('command', commandImage)
     * dispatcher.registerCommand('command', commandAny)
     * const result = dispatcher._mach('command')
     * ```
     *
     * If the document looks like:
     * ```html
     * <ul>
     *     <li>
     *         <!-- The char "[]" represent the collapsed selection -->
     *         <p>[]a</p>
     *     </li>
     * </ul>
     * ```
     *
     * The ancestors list is `['ul', 'li', 'p']`.
     *
     * The 4 command `commandUlP`, `commandP`, `commandUl`, `commandAny` could
     * match the `command` identifier but not `commandImage`.
     *
     * The priority is calculated with "`lvl2`,`lvl1`".
     * - `commandUlP` specificity: 2,2 `lvl2`: 2 means the last predicate
     *   (`isP`) is found at depth 2 in ancestors `lvl1`: 2 means there are 2
     *   predicates in `commandUlP`'s selector
     * - `commandP` specificity: 2,1 `lvl2`: 2 means the last predicate (`isP`)
     *   is found at depth 2 in ancestors `lvl1`: 1 means there is 1 predicate
     *   in `commandP`'s selector
     * - `commandUl` specificity: 0,1 `lvl0`: 0 means the last predicate
     *   (`isUl`) is found at depth 0 in ancestors `lvl1`: 1 means there is 1
     *   predicate in `commandP`'s selector
     * - `commandAny` specificity: -1,0 No selector means no specificity.
     *   `lvl0`: -1 means it has no depth.  `lvl1`: 0 means there is 0
     *   predicates in `commandAny`'s selector
     *
     * The result will be `commandUlP` because it has the highest specificity.
     *
     * @param items
     * @param paramsContext
     */
    match(items, paramsContext) {
        let maxFirstMatchDepth = -1;
        let maxSelectorLength = 0;
        let matchingItem;
        let matchingContext;
        for (const item of items) {
            const context = { ...this.defaultContext, ...item.context, ...paramsContext };
            let firstMatchDepth = -1;
            let index = 0;
            const selector = item.selector || [];
            const matches = [];
            const start = context.range.start;
            const nodes = start.ancestors();
            const node = start.previousSibling() || start.nextSibling();
            if (node) {
                nodes.unshift(node);
            }
            const maximumDepth = nodes.length - 1;
            for (const predicate of [...selector].reverse()) {
                let matchFound = false;
                while (!matchFound && index < nodes.length) {
                    if (nodes[index].test(predicate)) {
                        matchFound = true;
                        matches.unshift(nodes[index]);
                        if (firstMatchDepth === -1) {
                            // Deeper match has higher specificity. So lower
                            // index in ancestors, means higher specificity.
                            firstMatchDepth = maximumDepth - index;
                        }
                    }
                    index++;
                }
                // Stop checking the predicates of this particular command
                // since at least one of them don't match the context.
                if (!matchFound)
                    break;
            }
            if (matches.length === selector.length &&
                maxFirstMatchDepth <= firstMatchDepth &&
                maxSelectorLength <= selector.length &&
                (!item.check || item.check({ ...context, selector: matches }))) {
                maxFirstMatchDepth = firstMatchDepth;
                maxSelectorLength = selector.length;
                matchingItem = item;
                matchingContext = context;
            }
        }
        return [matchingItem, matchingContext];
    }
}


/***/ }),

/***/ "./packages/core/src/Core.ts":
/*!***********************************!*\
  !*** ./packages/core/src/Core.ts ***!
  \***********************************/
/*! exports provided: Core */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Core", function() { return Core; });
/* harmony import */ var _JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");


class Core extends _JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            insert: {
                handler: this.insert,
            },
            insertParagraphBreak: {
                handler: this.insertParagraphBreak,
            },
            setSelection: {
                handler: this.setSelection,
            },
            deleteBackward: {
                handler: this.deleteBackward,
            },
            deleteForward: {
                handler: this.deleteForward,
            },
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Insert a paragraph break.
     */
    insertParagraphBreak(params) {
        const range = params.context.range;
        // Remove the contents of the range if needed.
        if (!range.isCollapsed()) {
            range.empty();
        }
        if (range.startContainer.breakable) {
            range.startContainer.splitAt(range.start);
        }
        else {
            // Use a separator to break paragraphs in an unbreakable.
            const Separator = this.editor.configuration.defaults.Separator;
            range.start.before(new Separator());
        }
    }
    /**
     * Insert a VNode at the current position of the selection.
     *
     * @param params
     */
    insert(params) {
        // Remove the contents of the range if needed.
        if (!params.context.range.isCollapsed()) {
            params.context.range.empty();
        }
        params.context.range.start.before(params.node);
    }
    /**
     * Delete in the backward direction (backspace key expected behavior).
     */
    deleteBackward(params) {
        const range = params.context.range;
        if (range.isCollapsed()) {
            // Basic case: remove the node directly preceding the range.
            const previousSibling = range.start.previousSibling();
            if (previousSibling &&
                range.startContainer.breakable &&
                range.startContainer.editable) {
                previousSibling.removeBackward();
            }
            else if (range.startContainer.breakable && range.startContainer.editable) {
                // Otherwise set range start at previous valid leaf.
                let ancestor = range.start.parent;
                while ((ancestor === null || ancestor === void 0 ? void 0 : ancestor.breakable) && ancestor.editable && !ancestor.previousSibling()) {
                    ancestor = ancestor.parent;
                }
                if ((ancestor === null || ancestor === void 0 ? void 0 : ancestor.breakable) && ancestor.editable) {
                    const previous = ancestor.previousSibling().lastLeaf();
                    if (previous) {
                        range.setStart(previous, _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].AFTER);
                        range.empty();
                    }
                }
            }
        }
        else {
            range.empty();
        }
    }
    /**
     * Delete in the forward direction (delete key expected behavior).
     */
    deleteForward(params) {
        const range = params.context.range;
        if (range.isCollapsed()) {
            // Basic case: remove the node directly following the range.
            const nextSibling = range.end.nextSibling();
            if (nextSibling && range.endContainer.breakable && range.endContainer.editable) {
                nextSibling.removeForward();
            }
            else if (range.endContainer.breakable && range.endContainer.editable) {
                // Otherwise set range end at next valid leaf.
                let ancestor = range.end.parent;
                while ((ancestor === null || ancestor === void 0 ? void 0 : ancestor.breakable) && ancestor.editable && !ancestor.nextSibling()) {
                    ancestor = ancestor.parent;
                }
                if ((ancestor === null || ancestor === void 0 ? void 0 : ancestor.breakable) && ancestor.editable) {
                    const next = ancestor.nextSibling().firstLeaf();
                    if (next) {
                        range.setEnd(next, _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE);
                        range.empty();
                    }
                }
            }
        }
        else {
            range.empty();
        }
    }
    /**
     * Navigate to a given range.
     *
     * @param params
     */
    setSelection(params) {
        this.editor.selection.set(params.vSelection);
    }
}


/***/ }),

/***/ "./packages/core/src/Dispatcher.ts":
/*!*****************************************!*\
  !*** ./packages/core/src/Dispatcher.ts ***!
  \*****************************************/
/*! exports provided: Dispatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dispatcher", function() { return Dispatcher; });
class Dispatcher {
    constructor(editor) {
        this.__nextHandlerTokenID = 0;
        this.commands = {};
        this.commandHooks = {};
        this.editor = editor;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Call all hooks registred for the command `id`.
     *
     * @param commandId The identifier of the command.
     * @param params The parameters of the command.
     */
    async dispatch(commandId, params = {}) {
        const commands = this.commands[commandId];
        if (!commands) {
            console.warn(`Command '${commandId}' not found.`);
            return;
        }
        let result;
        const [command, context] = this.editor.contextManager.match(commands, params.context);
        if (command) {
            // Update command arguments with the computed execution context.
            const args = { ...params, context };
            // Call command handler.
            result = await command.handler(args);
            await this._dispatchHooks(commandId, args);
        }
        return result;
    }
    /**
     * Trigger the dispatcher for a custom command.
     */
    async dispatchCustom() {
        return this._dispatchHooks('@custom');
    }
    /**
     * Register all handlers declared in a plugin, and match them with their
     * corresponding command.
     *
     */
    registerCommand(id, impl) {
        if (!this.commands[id]) {
            this.commands[id] = [impl];
        }
        else {
            this.commands[id].push(impl);
        }
    }
    /**
     * Register a callback that will be executed for each `execCommand` call.
     *
     * @param id The identifier of the command to hook.
     * @param hook The callback that will be executed.
     */
    registerCommandHook(id, hook) {
        if (!this.commandHooks[id]) {
            this.commandHooks[id] = [];
        }
        this.commandHooks[id].push(hook);
    }
    /**
     * Dispatch to all registred `commandHooks`.
     */
    async _dispatchHooks(commandId, args) {
        const hooks = this.commandHooks[commandId] || [];
        const globalHooks = this.commandHooks['*'] || [];
        for (const hookCallback of [...hooks, ...globalHooks]) {
            await hookCallback(args, commandId);
        }
    }
}


/***/ }),

/***/ "./packages/core/src/JWEditor.ts":
/*!***************************************!*\
  !*** ./packages/core/src/JWEditor.ts ***!
  \***************************************/
/*! exports provided: Mode, JWEditor, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mode", function() { return Mode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWEditor", function() { return JWEditor; });
/* harmony import */ var _Dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Dispatcher */ "./packages/core/src/Dispatcher.ts");
/* harmony import */ var _JWPlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _Core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Core */ "./packages/core/src/Core.ts");
/* harmony import */ var _ContextManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ContextManager */ "./packages/core/src/ContextManager.ts");
/* harmony import */ var _VSelection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VSelection */ "./packages/core/src/VSelection.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plugin-keymap/src/Keymap */ "./packages/plugin-keymap/src/Keymap.ts");
/* harmony import */ var _utils_src_errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/src/errors */ "./packages/utils/src/errors.ts");
/* harmony import */ var _VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");
/* harmony import */ var _VNodes_SeparatorNode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./VNodes/SeparatorNode */ "./packages/core/src/VNodes/SeparatorNode.ts");











var Mode;
(function (Mode) {
    Mode["CONFIGURATION"] = "configuration";
    Mode["EDITION"] = "edition";
})(Mode || (Mode = {}));
class JWEditor {
    constructor() {
        this._mode = Mode.CONFIGURATION;
        this.plugins = new Map();
        this.configuration = {
            defaults: {
                Container: _VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_8__["ContainerNode"],
                Atomic: _VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_9__["AtomicNode"],
                Separator: _VNodes_SeparatorNode__WEBPACK_IMPORTED_MODULE_10__["SeparatorNode"],
            },
            plugins: [],
            loadables: {},
        };
        this.selection = new _VSelection__WEBPACK_IMPORTED_MODULE_4__["VSelection"]();
        this.loaders = {};
        this.mutex = Promise.resolve();
        // use a set so that when async function are called, wait until every batch
        // commands finish.
        this.preventRenders = new Set();
        this.dispatcher = new _Dispatcher__WEBPACK_IMPORTED_MODULE_0__["Dispatcher"](this);
        this.plugins = new Map();
        this.contextManager = new _ContextManager__WEBPACK_IMPORTED_MODULE_3__["ContextManager"](this);
        this.nextEventMutex = this.nextEventMutex.bind(this);
        // Core is a special mandatory plugin that handles the matching between
        // the commands supported in the core of the editor and the VDocument.
        this.load(_Core__WEBPACK_IMPORTED_MODULE_2__["Core"]);
        this.load(_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_6__["Keymap"]);
    }
    async nextEventMutex(next) {
        return (this.mutex = this.mutex.then(next));
    }
    /**
     * Start the editor on the editable DOM node set on this editor instance.
     */
    async start() {
        this._mode = Mode.EDITION;
        this._loadPlugins();
        // Load editor-level loadables.
        if (this.configuration.loadables) {
            for (const loadableId of Object.keys(this.loaders)) {
                const loadable = this.configuration.loadables[loadableId];
                if (loadable) {
                    this.loaders[loadableId](loadable, this.configuration);
                }
            }
        }
        for (const plugin of this.plugins.values()) {
            await plugin.start();
        }
    }
    load(PluginOrLoadables, config) {
        // Actual loading is deferred to `start`.
        if (this._mode !== Mode.CONFIGURATION) {
            throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_7__["ModeError"](Mode.CONFIGURATION);
        }
        else if (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["isConstructor"])(PluginOrLoadables, _JWPlugin__WEBPACK_IMPORTED_MODULE_1__["JWPlugin"])) {
            // Add the plugin to the configuration.
            const Plugin = PluginOrLoadables;
            const plugins = this.configuration.plugins;
            const index = plugins.findIndex(([p]) => p === Plugin);
            if (index !== -1) {
                // Remove this module from the config to avoid loading it twice.
                plugins.splice(index, 1);
            }
            plugins.push([Plugin, config || {}]);
        }
        else {
            // Add the loadables to the configuration.
            const configuredLoadables = this.configuration.loadables;
            for (const loadableIdentifier of Object.keys(PluginOrLoadables)) {
                const loadables = PluginOrLoadables[loadableIdentifier];
                if (configuredLoadables[loadableIdentifier]) {
                    configuredLoadables[loadableIdentifier].push(...loadables);
                }
                else {
                    configuredLoadables[loadableIdentifier] = [...loadables];
                }
            }
        }
    }
    /**
     * Load the plugins specified in the editor configuration.
     *
     */
    _loadPlugins() {
        // Resolve dependencies.
        const Plugins = [...this.configuration.plugins];
        for (let offset = 1; offset <= Plugins.length; offset++) {
            const index = Plugins.length - offset;
            const [Plugin] = Plugins[index];
            for (const Dependency of [...Plugin.dependencies].reverse()) {
                const depIndex = Plugins.findIndex(([P]) => P === Dependency);
                if (depIndex === -1) {
                    // Load the missing dependency with no config parameters.
                    Plugins.splice(index, 0, [Dependency, {}]);
                }
                else if (depIndex > index) {
                    // Load the dependency before the plugin depending on it.
                    const [[Dep, config]] = Plugins.splice(depIndex, 1);
                    Plugins.splice(index, 0, [Dep, config]);
                    offset--;
                }
            }
        }
        // Load plugins.
        for (const [PluginClass, configuration] of Plugins) {
            const plugin = new PluginClass(this, configuration);
            this.plugins.set(PluginClass, plugin);
            // Register the commands of this plugin.
            Object.keys(plugin.commands).forEach(key => {
                const implementation = { ...plugin.commands[key] };
                // Bind handlers to the plugin itself. This preserves the
                // typing of the handler parameters which would be lost if
                // the binding was done in the plugin definition.
                implementation.handler = implementation.handler.bind(plugin);
                this.dispatcher.registerCommand(key, implementation);
            });
            // Register the hooks of this plugin.
            for (const [id, hook] of Object.entries(plugin.commandHooks)) {
                this.dispatcher.registerCommandHook(id, hook.bind(plugin));
            }
            // Load loaders.
            for (const loadableId of Object.keys(plugin.loaders)) {
                if (this.loaders[loadableId]) {
                    throw new Error(`Multiple loaders for '${loadableId}'.`);
                }
                else {
                    // Bind loaders to the plugin itself. This preserves the
                    // typing of the loader parameters which would be lost if
                    // the binding was done in the plugin definition.
                    const loader = plugin.loaders[loadableId];
                    this.loaders[loadableId] = loader.bind(plugin);
                }
            }
        }
        // Load loadables.
        for (const loadableIdentifier of Object.keys(this.loaders)) {
            for (const plugin of this.plugins.values()) {
                const loadableArray = plugin.loadables[loadableIdentifier];
                if (loadableArray) {
                    this.loaders[loadableIdentifier](loadableArray, plugin);
                }
            }
        }
    }
    configure(PluginOrEditorConfig, pluginConfig) {
        if (this._mode !== Mode.CONFIGURATION) {
            throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_7__["ModeError"](Mode.CONFIGURATION);
        }
        else if (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["isConstructor"])(PluginOrEditorConfig, _JWPlugin__WEBPACK_IMPORTED_MODULE_1__["JWPlugin"])) {
            // Configure the plugin.
            const Plugin = PluginOrEditorConfig;
            const conf = this.configuration.plugins.find(([P]) => P === Plugin);
            if (conf) {
                // Update the previous config if the plugin was already added.
                conf[1] = { ...conf[1], ...pluginConfig };
            }
            else {
                // Add the new plugin constructor and his configuration.
                this.configuration.plugins.push([Plugin, pluginConfig]);
            }
        }
        else {
            // Configure the editor.
            const preconf = this.configuration;
            const conf = PluginOrEditorConfig;
            this.configuration = { ...preconf, ...conf };
            // Merge special `defaults` configuration key.
            if (conf.defaults) {
                this.configuration.defaults = {
                    ...preconf.defaults,
                    ...conf.defaults,
                };
            }
            // Handle special `plugins` configuration key through `load`.
            if (conf.plugins) {
                this.configuration.plugins = [...preconf.plugins];
                for (const [Plugin, pluginConfiguration] of conf.plugins) {
                    this.load(Plugin, pluginConfiguration || {});
                }
            }
            // Handle special `loadables` configuration key through `load`.
            if (conf.loadables) {
                this.configuration.loadables = { ...preconf.loadables };
                this.load(conf.loadables);
            }
        }
    }
    async execBatch(callback) {
        console.log('this.preventRenders:', this.preventRenders);
        this.preventRenders.add(callback);
        await callback();
        this.preventRenders.delete(callback);
        // const dom = this.plugins.get(Dom);
        // return dom._renderInEditable();
    }
    /**
     * Execute the given command.
     *
     * @param id name identifier of the command to execute
     * @param params arguments object of the command to execute
     */
    async execCommand(commandName, params) {
        return await this.dispatcher.dispatch(commandName, params);
    }
    /**
     * Execute arbitrary code in `callback`, then dispatch the event.
     */
    async execCustomCommand(callback) {
        await callback();
        await this.dispatcher.dispatchCustom();
    }
    /**
     * Stop this editor instance.
     */
    async stop() {
        for (const plugin of this.plugins.values()) {
            await plugin.stop();
        }
        // Clear loaders.
        this.loaders = {};
        this._mode = Mode.CONFIGURATION;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (JWEditor);


/***/ }),

/***/ "./packages/core/src/JWPlugin.ts":
/*!***************************************!*\
  !*** ./packages/core/src/JWPlugin.ts ***!
  \***************************************/
/*! exports provided: JWPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWPlugin", function() { return JWPlugin; });
class JWPlugin {
    constructor(editor, configuration = {}) {
        this.editor = editor;
        this.configuration = configuration;
        this.dependencies = new Map();
        this.loaders = {};
        this.loadables = {};
        this.commands = {};
        this.commandHooks = {};
        // Populate instantiated dependencies.
        for (const Dependency of this.constructor.dependencies) {
            this.dependencies.set(Dependency, editor.plugins.get(Dependency));
        }
    }
    /**
     * Start the plugin. Called when the editor starts.
     */
    async start() {
        // This is where plugins can do asynchronous work when the editor is
        // starting (e.g. retrieve data from a server, render stuff, etc).
    }
    /**
     * Stop the plugin. Called when the editor stops.
     */
    async stop() {
        // This is where plugins can do asynchronous work when the editor is
        // stopping (e.g. save on a server, close connections, etc).
    }
}
JWPlugin.dependencies = [];


/***/ }),

/***/ "./packages/core/src/Modifier.ts":
/*!***************************************!*\
  !*** ./packages/core/src/Modifier.ts ***!
  \***************************************/
/*! exports provided: Modifier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modifier", function() { return Modifier; });
class Modifier {
    get name() {
        return '';
    }
    toString() {
        return this.name;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    applyTo(node) {
        node.modifiers.prepend(this);
    }
    isSameAs(otherModifier) {
        return this === otherModifier;
    }
    clone() {
        return new this.constructor();
    }
}


/***/ }),

/***/ "./packages/core/src/Modifiers.ts":
/*!****************************************!*\
  !*** ./packages/core/src/Modifiers.ts ***!
  \****************************************/
/*! exports provided: Modifiers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modifiers", function() { return Modifiers; });
/* harmony import */ var _Modifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Modifier */ "./packages/core/src/Modifier.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");


class Modifiers {
    constructor(...modifiers) {
        this._contents = [];
        const clonedModifiers = modifiers.map(mod => {
            return mod instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"] ? mod.clone() : mod;
        });
        this.append(...clonedModifiers);
    }
    //--------------------------------------------------------------------------
    // Getters
    //--------------------------------------------------------------------------
    /**
     * Return the length of the array.
     */
    get length() {
        return this._contents.length;
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a new instance of the Modifiers class containing the same
     * modifiers.
     */
    clone() {
        return new Modifiers(...this._contents.map(mod => mod.clone()));
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Append one or more modifiers to the array. If one of the given modifiers
     * is a modifier class constructor, instantiate it.
     *
     * @param modifiers
     */
    append(...modifiers) {
        for (const modifier of modifiers) {
            if (modifier instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"]) {
                this._contents.push(modifier);
            }
            else {
                this._contents.push(new modifier());
            }
        }
    }
    /**
     * Prepend one or more modifiers to the array. If one of the given modifiers
     * is a modifier class constructor, instantiate it.
     *
     * @param modifiers
     */
    prepend(...modifiers) {
        for (const modifier of modifiers) {
            if (modifier instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"]) {
                this._contents.unshift(modifier);
            }
            else {
                this._contents.unshift(new modifier());
            }
        }
    }
    find(modifier) {
        if (modifier instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"]) {
            // `modifier` is an instance of `Modifier` -> find it in the array.
            return this._contents.find(instance => instance === modifier);
        }
        else if (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["isConstructor"])(modifier, _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"])) {
            // `modifier` is a `Modifier` class -> find its first instance in
            // the array.
            return this._contents.find(mod => mod.constructor.name === modifier.name);
        }
        else if (modifier instanceof Function) {
            // `modifier` is a callback -> call `find` natively on the array.
            return this._contents.find(modifier);
        }
    }
    /**
     * Return the first modifier in the array that is an instance of the given
     * modifier class or create one, append it and return it.
     * If the modifier passed is a modifier instance, return it if it was
     * present in the array.
     *
     * @param modifier
     */
    get(modifier) {
        let found = this.find(modifier);
        if (!found && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["isConstructor"])(modifier, _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"])) {
            found = new modifier();
            this.append(found);
        }
        return found;
    }
    /**
     * Return all the modifiers instances that are hold by `this`.
     */
    getContent() {
        return this._contents;
    }
    filter(modifier, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    thisArg) {
        if (modifier instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"]) {
            // `modifier` is an instance of `Modifier` -> find it in the array
            // and return it in a new array.
            return this._contents.filter(m => m === modifier);
        }
        else if (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["isConstructor"])(modifier, _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"])) {
            // `modifier` is a `Modifier` class -> return all instances of it in
            // the array.
            return this._contents.filter(m => m instanceof modifier);
        }
        else {
            // `modifier` is a callback -> call `filter` natively on the array.
            return this._contents.filter(modifier, thisArg);
        }
    }
    /**
     * Remove the first modifier in the array that is an instance of the given
     * modifier class. If a modifier instance is given, remove that particuar
     * instance from the array. Return true if a modifier was removed, false
     * otherwise.
     *
     * @param modifier
     */
    remove(modifier) {
        const modifierIndex = this._contents.findIndex(modifierInstance => {
            if (modifier instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"]) {
                return modifierInstance === modifier;
            }
            else {
                return modifierInstance instanceof modifier;
            }
        });
        if (modifierIndex === -1) {
            return false;
        }
        else {
            this._contents.splice(modifierIndex, 1);
            return true;
        }
    }
    /**
     * Replace the first modifier in the array that is an instance of the given
     * modifier class or that matches the particular instance passed with the
     * given modifier instance. If the new modifier passed is a class,
     * instantiate it. If no modifier was found, simply push the new modifier on
     * the array.
     *
     * Return true if a modifier was replaced, false if the modifier was simply
     * added.
     *
     * @param oldModifier
     * @param newModifier
     */
    replace(oldModifier, newModifier) {
        const oldModifierIndex = this._contents.findIndex(modifierInstance => {
            if (oldModifier instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"]) {
                return modifierInstance === oldModifier;
            }
            else {
                return modifierInstance instanceof oldModifier;
            }
        });
        if (oldModifierIndex === -1) {
            this.append(newModifier);
            return false;
        }
        else {
            const modifier = newModifier instanceof _Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"] ? newModifier : new newModifier();
            this[oldModifierIndex] = modifier;
            return true;
        }
    }
    /**
     * Replace the modifiers that have the same constructor. Otherwise append
     * them.
     */
    replaceOrAppend(modifiers) {
        for (const modifier of modifiers.getContent()) {
            const foundModifier = this.find(modifier.constructor);
            if (foundModifier) {
                this.replace(foundModifier, modifier);
            }
            else {
                this.append(modifier.clone());
            }
        }
    }
    /**
     * Remove the first modifier in the array that is an instance of the given
     * modifier class or that matches the particular instance passed.
     * If no modifier was found, add the given modifier instead.
     * If the given new modifier is a class, instantiate it.
     *
     * @param modifier
     */
    toggle(modifier) {
        this.remove(modifier) || this.append(modifier);
    }
    /**
     * Return true if the modifiers in this array are the same as the modifiers
     * in the given array (as defined by the `isSameAs` methods of the
     * modifiers).
     *
     * @param otherModifiers
     */
    areSameAs(otherModifiers) {
        const modifiersMap = new Map(this._contents.map(a => [a, otherModifiers.find(b => a.isSameAs(b))]));
        const aModifiers = Array.from(modifiersMap.keys());
        const bModifiers = Array.from(modifiersMap.values());
        const allAinB = aModifiers.every(a => a.isSameAs(modifiersMap.get(a)));
        const allBinA = otherModifiers.every(b => bModifiers.includes(b) || b.isSameAs(this.find(b)));
        return allAinB && allBinA;
    }
    /**
     * Proxy for the native `some` method of `Array`, called on `this._contents`.
     *
     * @see Array.some
     * @param callbackfn
     */
    some(callbackfn) {
        return this._contents.some(callbackfn);
    }
    /**
     * Proxy for the native `every` method of `Array`, called on `this._contents`.
     *
     * @see Array.every
     * @param callbackfn
     */
    every(callbackfn) {
        return this._contents.every(callbackfn);
    }
    /**
     * Proxy for the native `map` method of `Array`, called on `this._contents`.
     *
     * @see Array.map
     * @param callbackfn
     */
    map(callbackfn) {
        return this._contents.map(callbackfn);
    }
}


/***/ }),

/***/ "./packages/core/src/VNodes/AbstractNode.ts":
/*!**************************************************!*\
  !*** ./packages/core/src/VNodes/AbstractNode.ts ***!
  \**************************************************/
/*! exports provided: AbstractNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractNode", function() { return AbstractNode; });
/* harmony import */ var _VNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _Modifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Modifiers */ "./packages/core/src/Modifiers.ts");



let id = 0;
class AbstractNode {
    constructor() {
        this.id = id;
        this.editable = true;
        this.tangible = true;
        this.breakable = true;
        this.modifiers = new _Modifiers__WEBPACK_IMPORTED_MODULE_2__["Modifiers"]();
        id++;
    }
    /**
     * Return whether the given predicate is a constructor of a VNode class.
     *
     * @param predicate The predicate to check.
     */
    static isConstructor(predicate) {
        return predicate.prototype instanceof AbstractNode;
    }
    get name() {
        return this.constructor.name;
    }
    /**
     * Return the text content of this node.
     */
    get textContent() {
        return this.children()
            .map(child => child.textContent)
            .join('');
    }
    /**
     * @override
     */
    toString() {
        return this.name;
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Transform the given DOM location into its VDocument counterpart.
     *
     * @param domNode DOM node corresponding to this VNode
     * @param offset The offset of the location in the given domNode
     */
    locate(domNode, offset) {
        // Position `BEFORE` is preferred over `AFTER`, unless the offset
        // overflows the children list, in which case `AFTER` is needed.
        let position = _VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE;
        const domNodeLength = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["nodeLength"])(domNode);
        if (domNodeLength && offset >= domNodeLength) {
            position = _VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER;
        }
        return [this, position];
    }
    /**
     * Return a new VNode with the same type and attributes as this VNode.
     */
    clone(params) {
        const clone = new this.constructor(params);
        clone.modifiers = this.modifiers.clone();
        return clone;
    }
    /**
     * Replace this VNode with the given VNode.
     *
     * @param node
     */
    replaceWith(node) {
        this.before(node);
        this.mergeWith(node);
    }
    //--------------------------------------------------------------------------
    // Properties
    //--------------------------------------------------------------------------
    /**
     * Return the length of this VNode.
     */
    get length() {
        return this.children().length;
    }
    is(predicate) {
        if (AbstractNode.isConstructor(predicate)) {
            return this instanceof predicate;
        }
        else {
            return predicate(this);
        }
    }
    /**
     * Test this node against the given predicate.
     *
     * If the predicate is falsy, return true. If the predicate is a constructor
     * of a VNode class, return whether this node is an instance of that class.
     * If the predicate is a standard function, return the result of this
     * function when called with the node as parameter.
     *
     *
     * @param predicate The predicate to test this node against.
     */
    test(predicate) {
        if (!predicate) {
            return true;
        }
        else if (AbstractNode.isConstructor(predicate)) {
            return this instanceof predicate;
        }
        else {
            return predicate(this);
        }
    }
    /**
     * Return true if this VNode comes before the given VNode in the pre-order
     * traversal.
     *
     * @param vNode
     */
    isBefore(vNode) {
        const thisPath = [this, ...this.ancestors()];
        const nodePath = [vNode, ...vNode.ancestors()];
        // Find the last distinct ancestors in the path to the root.
        let thisAncestor;
        let nodeAncestor;
        do {
            thisAncestor = thisPath.pop();
            nodeAncestor = nodePath.pop();
        } while (thisAncestor && nodeAncestor && thisAncestor === nodeAncestor);
        if (thisAncestor && nodeAncestor) {
            const thisParent = thisAncestor.parent;
            const nodeParent = nodeAncestor.parent;
            if (thisParent && thisParent === nodeParent) {
                // Compare the indices of both ancestors in their shared parent.
                const thisIndex = thisParent.childVNodes.indexOf(thisAncestor);
                const nodeIndex = nodeParent.childVNodes.indexOf(nodeAncestor);
                return thisIndex < nodeIndex;
            }
            else {
                // The very first ancestor of both nodes are different so
                // they actually come from two different trees altogether.
                return false;
            }
        }
        else {
            // One of the nodes was in the ancestors path of the other.
            return !thisAncestor && !!nodeAncestor;
        }
    }
    /**
     * Return true if this VNode comes after the given VNode in the pre-order
     * traversal.
     *
     * @param vNode
     */
    isAfter(vNode) {
        return vNode.isBefore(this);
    }
    closest(predicate) {
        if (this.test(predicate)) {
            return this;
        }
        else {
            return this.ancestor(predicate);
        }
    }
    ancestor(predicate) {
        let ancestor = this.parent;
        while (ancestor && !ancestor.test(predicate)) {
            ancestor = ancestor.parent;
        }
        return ancestor;
    }
    ancestors(predicate) {
        const ancestors = [];
        let parent = this.parent;
        while (parent) {
            if (parent.test(predicate)) {
                ancestors.push(parent);
            }
            parent = parent.parent;
        }
        return ancestors;
    }
    commonAncestor(node, predicate) {
        if (!this.parent) {
            return;
        }
        else if (this.parent === node.parent && this.parent.test(predicate)) {
            return this.parent;
        }
        const thisPath = [this, ...this.ancestors(predicate)];
        const nodePath = [node, ...node.ancestors(predicate)];
        let commonAncestor;
        while (thisPath[thisPath.length - 1] === nodePath.pop()) {
            commonAncestor = thisPath.pop();
        }
        return commonAncestor;
    }
    siblings(predicate) {
        const siblings = [];
        let sibling = this.previousSibling();
        while (sibling) {
            if (sibling.test(predicate)) {
                siblings.unshift(sibling);
            }
            sibling = sibling.previousSibling();
        }
        sibling = this.nextSibling();
        while (sibling) {
            if (sibling.test(predicate)) {
                siblings.push(sibling);
            }
            sibling = sibling.nextSibling();
        }
        return siblings;
    }
    adjacents(predicate) {
        const adjacents = [];
        let sibling = this.previousSibling();
        while (sibling && sibling.test(predicate)) {
            adjacents.unshift(sibling);
            sibling = sibling.previousSibling();
        }
        sibling = this.nextSibling();
        while (sibling && sibling.test(predicate)) {
            adjacents.push(sibling);
            sibling = sibling.nextSibling();
        }
        return adjacents;
    }
    previousSibling(predicate) {
        if (!this.parent)
            return;
        const index = this.parent.childVNodes.indexOf(this);
        let sibling = this.parent.childVNodes[index - 1];
        // Skip ignored siblings and those failing the predicate test.
        while (sibling && !(sibling.tangible && sibling.test(predicate))) {
            sibling = sibling.previousSibling();
        }
        return sibling;
    }
    nextSibling(predicate) {
        if (!this.parent)
            return;
        const index = this.parent.childVNodes.indexOf(this);
        let sibling = this.parent.childVNodes[index + 1];
        // Skip ignored siblings and those failing the predicate test.
        while (sibling && !(sibling.tangible && sibling.test(predicate))) {
            sibling = sibling.nextSibling();
        }
        return sibling;
    }
    previous(predicate) {
        let previous = this.previousSibling();
        if (previous) {
            // The previous node is the last leaf of the previous sibling.
            previous = previous.lastLeaf();
        }
        else {
            // If it has no previous sibling then climb up to the parent.
            previous = this.parent;
        }
        while (previous && !previous.test(predicate)) {
            previous = previous.previous();
        }
        return previous;
    }
    next(predicate) {
        // The node after node is its first child.
        let next = this.firstChild();
        if (!next) {
            // If it has no children then it is its next sibling.
            next = this.nextSibling();
        }
        if (!next) {
            // If it has no siblings either then climb up to the closest parent
            // which has a next sibiling.
            let ancestor = this.parent;
            while (ancestor && !ancestor.nextSibling()) {
                ancestor = ancestor.parent;
            }
            next = ancestor && ancestor.nextSibling();
        }
        while (next && !next.test(predicate)) {
            next = next.next();
        }
        return next;
    }
    previousLeaf(predicate) {
        return this.previous((node) => {
            return Object(_VNode__WEBPACK_IMPORTED_MODULE_0__["isLeaf"])(node) && node.test(predicate);
        });
    }
    nextLeaf(predicate) {
        return this.next((node) => {
            return Object(_VNode__WEBPACK_IMPORTED_MODULE_0__["isLeaf"])(node) && node.test(predicate);
        });
    }
    previousSiblings(predicate) {
        const previousSiblings = [];
        let sibling = this.previousSibling();
        while (sibling) {
            if (sibling.test(predicate)) {
                previousSiblings.push(sibling);
            }
            sibling = sibling.previousSibling();
        }
        return previousSiblings;
    }
    nextSiblings(predicate) {
        const nextSiblings = [];
        let sibling = this.nextSibling();
        while (sibling) {
            if (sibling.test(predicate)) {
                nextSiblings.push(sibling);
            }
            sibling = sibling.nextSibling();
        }
        return nextSiblings;
    }
    //--------------------------------------------------------------------------
    // Updating
    //--------------------------------------------------------------------------
    /**
     * Insert the given VNode before this VNode.
     *
     * @param node
     */
    before(node) {
        if (!this.parent) {
            throw 'Cannot insert a VNode before a VNode with no parent.';
        }
        this.parent.insertBefore(node, this);
    }
    /**
     * Insert the given VNode after this VNode.
     *
     * @param node
     */
    after(node) {
        if (!this.parent) {
            throw 'Cannot insert a VNode after a VNode with no parent.';
        }
        this.parent.insertAfter(node, this);
    }
    /**
     * Wrap this node in the given node by inserting the given node at this
     * node's position in its parent and appending this node to the given node.
     *
     * @param node
     */
    wrap(node) {
        this.before(node);
        node.append(this);
    }
    /**
     * Remove this node.
     */
    remove() {
        if (this.parent) {
            this.parent.removeChild(this);
        }
    }
    /**
     * Remove this node in forward direction. (e.g. `Delete` key)
     */
    removeForward() {
        this.remove();
    }
    /**
     * Remove this node in backward direction. (e.g. `Backspace` key)
     */
    removeBackward() {
        this.remove();
    }
    //--------------------------------------------------------------------------
    // Private.
    //--------------------------------------------------------------------------
    /**
     * Return a convenient string representation of this node and its
     * descendants.
     *
     * @param __repr
     * @param level
     */
    _repr(__repr = '', level = 0) {
        __repr += Array(level * 4 + 1).join(' ') + this.name + ' (' + this.id + ')' + '\n';
        this.childVNodes.forEach(child => {
            __repr = child._repr(__repr, level + 1);
        });
        return __repr;
    }
}


/***/ }),

/***/ "./packages/core/src/VNodes/AtomicNode.ts":
/*!************************************************!*\
  !*** ./packages/core/src/VNodes/AtomicNode.ts ***!
  \************************************************/
/*! exports provided: AtomicNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AtomicNode", function() { return AtomicNode; });
/* harmony import */ var _AbstractNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractNode */ "./packages/core/src/VNodes/AbstractNode.ts");
/* harmony import */ var _utils_src_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/src/errors */ "./packages/utils/src/errors.ts");


/**
 * This class provides typing overrides for multiple VNode methods which are
 * supposed to take parameters but that are unused in the case of atomic nodes.
 */
/* eslint-disable @typescript-eslint/no-unused-vars */
class AtomicNode extends _AbstractNode__WEBPACK_IMPORTED_MODULE_0__["AbstractNode"] {
    get childVNodes() {
        return [];
    }
    children(predicate) {
        return [];
    }
    /**
     * See {@link AbstractNode.hasChildren}.
     *
     * @return Returns `false` since an atomic node cannot have children.
     */
    hasChildren() {
        return false;
    }
    /**
     * See {@link AbstractNode.nthChild}.
     *
     * @return Returns `undefined` since an atomic node cannot have children.
     */
    nthChild(n) {
        return undefined;
    }
    firstChild(predicate) {
        return undefined;
    }
    lastChild(predicate) {
        return undefined;
    }
    firstLeaf(predicate) {
        return this;
    }
    lastLeaf(predicate) {
        return this;
    }
    firstDescendant(predicate) {
        return undefined;
    }
    lastDescendant(predicate) {
        return undefined;
    }
    descendants(predicate) {
        return [];
    }
    //--------------------------------------------------------------------------
    // Updating children.
    //--------------------------------------------------------------------------
    /**
     * See {@link AbstractNode.prepend}.
     *
     * @throws AtomicityError An atomic node cannot have children.
     */
    prepend(...children) {
        throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_1__["AtomicityError"](this);
    }
    /**
     * See {@link AbstractNode.prepend}.
     *
     * @throws AtomicityError An atomic node cannot have children.
     */
    append(...children) {
        throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_1__["AtomicityError"](this);
    }
    /**
   /**
     * See {@link AbstractNode.insertBefore}.
     *
     * @throws AtomicityError An atomic node cannot have children.
     */
    insertBefore(node, reference) {
        throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_1__["AtomicityError"](this);
    }
    /**
     * See {@link AbstractNode.insertAfter}.
     *
     * @throws AtomicityError An atomic node cannot have children.
     */
    insertAfter(node, reference) {
        throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_1__["AtomicityError"](this);
    }
    /**
     * See {@link AbstractNode.empty}.
     */
    empty() {
        return;
    }
    /**
     * See {@link AbstractNode.removeChild}.
     *
     * @throws AtomicityError An atomic node cannot have children.
     */
    removeChild(child) {
        throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_1__["AtomicityError"](this);
    }
    /**
     * See {@link AbstractNode.splitAt}.
     *
     * @throws AtomicityError An atomic node cannot be split.
     */
    splitAt(child) {
        throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_1__["AtomicityError"](this);
    }
    /**
     * See {@link AbstractNode.mergeWith}.
     */
    mergeWith(newContainer) {
        return;
    }
    /**
     * See {@link AbstractNode.unwrap}.
     */
    unwrap() {
        return;
    }
}


/***/ }),

/***/ "./packages/core/src/VNodes/ContainerNode.ts":
/*!***************************************************!*\
  !*** ./packages/core/src/VNodes/ContainerNode.ts ***!
  \***************************************************/
/*! exports provided: ContainerNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerNode", function() { return ContainerNode; });
/* harmony import */ var _AbstractNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractNode */ "./packages/core/src/VNodes/AbstractNode.ts");
/* harmony import */ var _VNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _utils_src_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/src/errors */ "./packages/utils/src/errors.ts");



class ContainerNode extends _AbstractNode__WEBPACK_IMPORTED_MODULE_0__["AbstractNode"] {
    constructor() {
        super(...arguments);
        this.childVNodes = [];
    }
    children(predicate) {
        return this.childVNodes.filter(child => {
            return child.tangible && child.test(predicate);
        });
    }
    /**
     * See {@link AbstractNode.hasChildren}.
     */
    hasChildren() {
        return this.children().length > 0;
    }
    /**
     * See {@link AbstractNode.nthChild}.
     */
    nthChild(n) {
        return this.children()[n - 1];
    }
    firstChild(predicate) {
        let child = this.childVNodes[0];
        while (child && !(child.tangible && child.test(predicate))) {
            child = child.nextSibling();
        }
        return child;
    }
    lastChild(predicate) {
        let child = this.childVNodes[this.childVNodes.length - 1];
        while (child && !(child.tangible && child.test(predicate))) {
            child = child.previousSibling();
        }
        return child;
    }
    firstLeaf(predicate) {
        const isValidLeaf = (node) => {
            return Object(_VNode__WEBPACK_IMPORTED_MODULE_1__["isLeaf"])(node) && node.test(predicate);
        };
        if (isValidLeaf(this)) {
            return this;
        }
        else {
            return this.firstDescendant((node) => isValidLeaf(node));
        }
    }
    lastLeaf(predicate) {
        const isValidLeaf = (node) => {
            return Object(_VNode__WEBPACK_IMPORTED_MODULE_1__["isLeaf"])(node) && node.test(predicate);
        };
        if (isValidLeaf(this)) {
            return this;
        }
        else {
            return this.lastDescendant((node) => isValidLeaf(node));
        }
    }
    firstDescendant(predicate) {
        let firstDescendant = this.firstChild();
        while (firstDescendant && !firstDescendant.test(predicate)) {
            firstDescendant = this._descendantAfter(firstDescendant);
        }
        return firstDescendant;
    }
    lastDescendant(predicate) {
        let lastDescendant = this.lastChild();
        while (lastDescendant && lastDescendant.hasChildren()) {
            lastDescendant = lastDescendant.lastChild();
        }
        while (lastDescendant && !lastDescendant.test(predicate)) {
            lastDescendant = this._descendantBefore(lastDescendant);
        }
        return lastDescendant;
    }
    descendants(predicate) {
        const descendants = [];
        let currentDescendant = this.firstChild();
        while (currentDescendant) {
            if (currentDescendant.test(predicate)) {
                descendants.push(currentDescendant);
            }
            currentDescendant = this._descendantAfter(currentDescendant);
        }
        return descendants;
    }
    //--------------------------------------------------------------------------
    // Updating
    //--------------------------------------------------------------------------
    /**
     * Return a new VNode with the same type and attributes as this VNode.
     */
    clone(deepClone, params) {
        const clone = super.clone(params);
        if (deepClone) {
            for (const child of this.childVNodes) {
                clone.append(child.clone(true));
            }
        }
        return clone;
    }
    /**
     * See {@link AbstractNode.prepend}.
     */
    prepend(...children) {
        for (const child of children) {
            this._insertAtIndex(child, 0);
        }
    }
    /**
     * See {@link AbstractNode.append}.
     */
    append(...children) {
        for (const child of children) {
            this._insertAtIndex(child, this.childVNodes.length);
        }
    }
    /**
     * See {@link AbstractNode.insertBefore}.
     */
    insertBefore(node, reference) {
        const index = this.childVNodes.indexOf(reference);
        if (index < 0) {
            throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_2__["ChildError"](this, node);
        }
        this._insertAtIndex(node, index);
    }
    /**
     * See {@link AbstractNode.insertAfter}.
     */
    insertAfter(node, reference) {
        const index = this.childVNodes.indexOf(reference);
        if (index < 0) {
            throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_2__["ChildError"](this, node);
        }
        this._insertAtIndex(node, index + 1);
    }
    /**
     * See {@link AbstractNode.empty}.
     */
    empty() {
        for (const child of this.childVNodes) {
            child.remove();
        }
    }
    /**
     * See {@link AbstractNode.removeChild}.
     */
    removeChild(child) {
        const index = this.childVNodes.indexOf(child);
        if (index < 0) {
            throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_2__["ChildError"](this, child);
        }
        this._removeAtIndex(index);
    }
    /**
     * See {@link AbstractNode.splitAt}.
     */
    splitAt(child) {
        if (child.parent !== this) {
            throw new _utils_src_errors__WEBPACK_IMPORTED_MODULE_2__["ChildError"](this, child);
        }
        else if (!this.breakable) {
            // Unbreakable nodes do not split.
            return this;
        }
        const duplicate = this.clone();
        const index = child.parent.childVNodes.indexOf(child);
        while (this.childVNodes.length > index) {
            duplicate.append(this.childVNodes[index]);
        }
        this.after(duplicate);
        return duplicate;
    }
    /**
     * See {@link AbstractNode.mergeWith}.
     */
    mergeWith(newContainer) {
        if (newContainer !== this) {
            if (newContainer.childVNodes.includes(this)) {
                for (const child of this.childVNodes.slice()) {
                    newContainer.insertBefore(child, this);
                }
            }
            else {
                newContainer.append(...this.childVNodes);
            }
            this.remove();
        }
    }
    /**
     * See {@link AbstractNode.unwrap}.
     */
    unwrap() {
        for (const child of this.childVNodes.slice()) {
            this.before(child);
        }
        this.remove();
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return the descendant of this node that directly precedes the given node
     * in depth-first pre-order traversal.
     *
     * @param node
     */
    _descendantBefore(node) {
        let previous = node.previousSibling();
        if (previous) {
            // The node before node is the last leaf of its previous sibling.
            previous = previous.lastLeaf();
        }
        else if (node.parent !== this) {
            // If it has no previous sibling then climb up to the parent.
            // This is similar to `previous` but can't go further than `this`.
            previous = node.parent;
        }
        return previous;
    }
    /**
     * Return the descendant of this node that directly follows the given node
     * in depth-first pre-order traversal.
     *
     * @param node
     */
    _descendantAfter(node) {
        // The node after node is its first child.
        let next = node.firstChild();
        if (!next) {
            // If it has no children then it is its next sibling.
            next = node.nextSibling();
        }
        if (!next) {
            // If it has no siblings either then climb up to the closest parent
            // which has a next sibiling.
            // This is similar to `next` but can't go further than `this`.
            let ancestor = node.parent;
            while (ancestor !== this && !ancestor.nextSibling()) {
                ancestor = ancestor.parent;
            }
            if (ancestor !== this) {
                next = ancestor.nextSibling();
            }
        }
        return next;
    }
    /**
     * Insert a VNode at the given index within this VNode's children.
     *
     * @param child
     * @param index The index at which the insertion must take place within this
     * VNode's parent, holding marker nodes into account.
     */
    _insertAtIndex(child, index) {
        if (child.parent) {
            const currentIndex = child.parent.childVNodes.indexOf(child);
            if (index && child.parent === this && currentIndex < index) {
                index--;
            }
            child.parent.removeChild(child);
        }
        this.childVNodes.splice(index, 0, child);
        child.parent = this;
    }
    /**
     * Remove the nth child from this node.
     *
     * @param index The index of the child to remove including marker nodes.
     */
    _removeAtIndex(index) {
        const child = this.childVNodes.splice(index, 1)[0];
        child.parent = undefined;
    }
}


/***/ }),

/***/ "./packages/core/src/VNodes/FragmentNode.ts":
/*!**************************************************!*\
  !*** ./packages/core/src/VNodes/FragmentNode.ts ***!
  \**************************************************/
/*! exports provided: FragmentNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FragmentNode", function() { return FragmentNode; });
/* harmony import */ var _ContainerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");

class FragmentNode extends _ContainerNode__WEBPACK_IMPORTED_MODULE_0__["ContainerNode"] {
    constructor() {
        super(...arguments);
        this.editable = true;
        this.breakable = false;
    }
    set parent(parent) {
        this.mergeWith(parent);
        parent.removeChild(this);
    }
}


/***/ }),

/***/ "./packages/core/src/VNodes/MarkerNode.ts":
/*!************************************************!*\
  !*** ./packages/core/src/VNodes/MarkerNode.ts ***!
  \************************************************/
/*! exports provided: MarkerNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarkerNode", function() { return MarkerNode; });
/* harmony import */ var _AtomicNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");

class MarkerNode extends _AtomicNode__WEBPACK_IMPORTED_MODULE_0__["AtomicNode"] {
    constructor() {
        super(...arguments);
        this.tangible = false;
    }
}
MarkerNode.atomic = true;


/***/ }),

/***/ "./packages/core/src/VNodes/SeparatorNode.ts":
/*!***************************************************!*\
  !*** ./packages/core/src/VNodes/SeparatorNode.ts ***!
  \***************************************************/
/*! exports provided: SeparatorNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SeparatorNode", function() { return SeparatorNode; });
/* harmony import */ var _AtomicNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");

/**
 * This class represents an atomic node that is used as a content separator.
 */
class SeparatorNode extends _AtomicNode__WEBPACK_IMPORTED_MODULE_0__["AtomicNode"] {
}


/***/ }),

/***/ "./packages/core/src/VNodes/VElement.ts":
/*!**********************************************!*\
  !*** ./packages/core/src/VNodes/VElement.ts ***!
  \**********************************************/
/*! exports provided: VElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VElement", function() { return VElement; });
/* harmony import */ var _ContainerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");

class VElement extends _ContainerNode__WEBPACK_IMPORTED_MODULE_0__["ContainerNode"] {
    constructor(params) {
        super();
        this.htmlTag = params.htmlTag;
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a new VNode with the same type and attributes as this VNode.
     */
    clone(deepClone, params) {
        const defaults = {
            htmlTag: this.htmlTag,
        };
        return super.clone(deepClone, { ...defaults, ...params });
    }
}


/***/ }),

/***/ "./packages/core/src/VNodes/VNode.ts":
/*!*******************************************!*\
  !*** ./packages/core/src/VNodes/VNode.ts ***!
  \*******************************************/
/*! exports provided: RelativePosition, isLeaf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelativePosition", function() { return RelativePosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLeaf", function() { return isLeaf; });
var RelativePosition;
(function (RelativePosition) {
    RelativePosition["BEFORE"] = "BEFORE";
    RelativePosition["AFTER"] = "AFTER";
    RelativePosition["INSIDE"] = "INSIDE";
})(RelativePosition || (RelativePosition = {}));
/**
 * Return true if the given node is a leaf in the VDocument, that is a node that
 * has no children.
 *
 * @param node node to check
 */
function isLeaf(node) {
    return !node.hasChildren();
}


/***/ }),

/***/ "./packages/core/src/VRange.ts":
/*!*************************************!*\
  !*** ./packages/core/src/VRange.ts ***!
  \*************************************/
/*! exports provided: VRange, withRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VRange", function() { return VRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withRange", function() { return withRange; });
/* harmony import */ var _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VNodes/MarkerNode */ "./packages/core/src/VNodes/MarkerNode.ts");
/* harmony import */ var _VNodes_FragmentNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VNodes/FragmentNode */ "./packages/core/src/VNodes/FragmentNode.ts");
/* harmony import */ var _VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VNodes/AbstractNode */ "./packages/core/src/VNodes/AbstractNode.ts");





class VRange {
    constructor(boundaryPoints) {
        this.start = new _VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_1__["MarkerNode"]();
        this.end = new _VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_1__["MarkerNode"]();
        // If a range context is given, adapt this range to match it.
        if (boundaryPoints) {
            const [start, end] = boundaryPoints;
            const [startNode, startPosition] = start;
            const [endNode, endPosition] = end;
            if (endPosition === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER) {
                this.setEnd(endNode, endPosition);
                this.setStart(startNode, startPosition);
            }
            else {
                this.setStart(startNode, startPosition);
                this.setEnd(endNode, endPosition);
            }
        }
    }
    /**
     * Return the context of a collapsed range at the given location, targetting
     * a reference VNode and specifying the position relative to that VNode.
     *
     * @param reference
     * @param position
     */
    static at(reference, position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE) {
        return VRange.selecting(reference, position, reference, position);
    }
    /**
     * Return the context of a range at the location of the given range.
     *
     * @param range
     */
    static clone(range) {
        return [
            [range.start, _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE],
            [range.end, _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER],
        ];
    }
    static selecting(startNode, startPosition = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE, endNode = startNode, endPosition = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER) {
        if (startPosition instanceof _VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_4__["AbstractNode"]) {
            endNode = startPosition;
            startPosition = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE;
        }
        return [
            [startNode, startPosition],
            [endNode, endPosition],
        ];
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    get startContainer() {
        return this.start.parent;
    }
    get endContainer() {
        return this.end.parent;
    }
    /**
     * Return true if the range is collapsed.
     */
    isCollapsed() {
        if (!this.startContainer || !this.endContainer)
            return;
        const startIndex = this.start.parent.childVNodes.indexOf(this.start);
        return this.startContainer.childVNodes[startIndex + 1] === this.end;
    }
    selectedNodes(predicate) {
        const selectedNodes = [];
        let node = this.start;
        const bound = this.end.next();
        const endContainers = this.end.ancestors();
        while ((node = node.next()) && node !== bound) {
            if (!endContainers.includes(node)) {
                let selectedNode = node;
                while (!(selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.test(_VNodes_FragmentNode__WEBPACK_IMPORTED_MODULE_2__["FragmentNode"])) && (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.test(predicate))) {
                    if (selectedNode.editable) {
                        selectedNodes.push(selectedNode);
                    }
                    // Find the next ancestor whose children are all selected
                    // and add it to the list.
                    selectedNode = selectedNode.ancestor(ancestor => {
                        return ancestor.children().every(child => {
                            return selectedNodes.includes(child);
                        });
                    });
                }
            }
        }
        return selectedNodes;
    }
    targetedNodes(predicate) {
        const targetedNodes = this.traversedNodes(predicate);
        const closestStartAncestor = this.start.ancestor(predicate);
        if (closestStartAncestor === null || closestStartAncestor === void 0 ? void 0 : closestStartAncestor.editable) {
            targetedNodes.unshift(closestStartAncestor);
        }
        else if (closestStartAncestor) {
            const children = [...closestStartAncestor.childVNodes].reverse();
            for (const child of children) {
                if (!targetedNodes.includes(child) && child.test(predicate)) {
                    targetedNodes.unshift(child);
                }
            }
        }
        return targetedNodes;
    }
    traversedNodes(predicate) {
        const traversedNodes = [];
        let node = this.start;
        const bound = this.end.next();
        while ((node = node.next()) && node !== bound) {
            if (node.editable && node.test(predicate)) {
                traversedNodes.push(node);
            }
        }
        return traversedNodes;
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Collapse the range.
     *
     * @param [edge] range edge on which to collapse
     */
    collapse(edge = this.start) {
        if (edge === this.start) {
            this.setEnd(edge);
        }
        else if (edge === this.end) {
            this.setStart(edge);
        }
    }
    /**
     * Set the range's start point (in traversal order) at the given location,
     * targetting a `reference` VNode and specifying the `position` in reference
     * to that VNode ('BEFORE', 'AFTER'), like in an `xpath.
     *
     * @param reference
     * @param [position]
     */
    setStart(reference, position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE) {
        if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE) {
            reference = reference.firstLeaf();
        }
        else if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER) {
            reference = reference.lastLeaf();
        }
        if (reference.is(_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_3__["ContainerNode"]) && !reference.hasChildren()) {
            reference.prepend(this.start);
        }
        else if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER && reference !== this.end) {
            // We check that `reference` isn't `this.end` to avoid a backward
            // collapsed range.
            reference.after(this.start);
        }
        else if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].INSIDE) {
            reference.append(this.start);
        }
        else {
            reference.before(this.start);
        }
    }
    /**
     * Set the range's end point (in traversal order) at the given location,
     * targetting a `reference` VNode and specifying the `position` in reference
     * to that VNode ('BEFORE', 'AFTER'), like in an `xpath.
     *
     * @param reference
     * @param [position]
     */
    setEnd(reference, position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER) {
        if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE) {
            reference = reference.firstLeaf();
        }
        else if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER) {
            reference = reference.lastLeaf();
        }
        if (reference.is(_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_3__["ContainerNode"]) && !reference.hasChildren()) {
            reference.append(this.end);
        }
        else if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE && reference !== this.start) {
            // We check that `reference` isn't `this.start` to avoid a backward
            // collapsed range.
            reference.before(this.end);
        }
        else if (position === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].INSIDE) {
            reference.append(this.end);
        }
        else {
            reference.after(this.end);
        }
    }
    /**
     * Extend this range in such a way that it includes the given node.
     *
     * This method moves the boundary marker that is closest to the given node
     * up or down the tree in order to include the given node into the range.
     * Because of that, calling this method will always result in a range that
     * is at least the size that it was prior to calling it, and usually bigger.
     *
     * @param targetNode The node to extend the range to.
     */
    extendTo(targetNode) {
        let position;
        if (targetNode.isBefore(this.start)) {
            targetNode = targetNode.previous();
            if (targetNode.hasChildren()) {
                targetNode = targetNode.firstLeaf();
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE;
            }
            else {
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER;
            }
            if (targetNode && this.end.nextSibling() !== targetNode) {
                this.setStart(targetNode, position);
            }
        }
        else if (targetNode.isAfter(this.end)) {
            if (targetNode.hasChildren()) {
                targetNode = targetNode.next();
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE;
            }
            else {
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER;
            }
            if (targetNode) {
                this.setEnd(targetNode, position);
            }
        }
    }
    /**
     * Split the range containers up to their common ancestor. Return all
     * children of the common ancestor that are targeted by the range after the
     * split. If a predicate is given, splitting continues up to and including
     * the node closest to the common ancestor that matches the predicate.
     *
     * @param predicate
     */
    split(predicate) {
        const ancestor = this.startContainer.commonAncestor(this.endContainer);
        const closest = ancestor.closest(predicate);
        const container = closest ? closest.parent : ancestor;
        // Split the start ancestors.
        let start = this.start;
        do {
            let startAncestor = start.parent;
            // Do not split at the start edge of a node.
            if (start.previousSibling()) {
                startAncestor = startAncestor.splitAt(start);
            }
            start = startAncestor;
        } while (start.parent !== container);
        // Split the end ancestors.
        let end = this.end;
        do {
            const endAncestor = end.parent;
            // Do not split at the end edge of a node.
            if (end.nextSibling()) {
                endAncestor.splitAt(end);
                endAncestor.append(end);
            }
            end = endAncestor;
        } while (end.parent !== container);
        // Return all top-most split nodes between and including start and end.
        const nodes = [];
        let node = start;
        while (node !== end) {
            nodes.push(node);
            node = node.nextSibling();
        }
        nodes.push(end);
        return nodes;
    }
    /**
     * Empty the range by removing selected nodes and collapsing it by merging
     * nodes between start and end.
     */
    empty() {
        const removableNodes = this.selectedNodes(node => {
            var _a, _b;
            // TODO: Replace this check by complex table selection support.
            return node.breakable || ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.breakable) || ((_b = node.parent) === null || _b === void 0 ? void 0 : _b.is(_VNodes_FragmentNode__WEBPACK_IMPORTED_MODULE_2__["FragmentNode"]));
        });
        // Remove selected nodes without touching the start range's ancestors.
        const startAncestors = this.start.ancestors();
        for (const node of removableNodes.filter(node => !startAncestors.includes(node))) {
            node.remove();
        }
        // Collapse the range by merging nodes between start and end.
        if (this.startContainer !== this.endContainer) {
            const commonAncestor = this.start.commonAncestor(this.end);
            let ancestor = this.endContainer.parent;
            while (ancestor !== commonAncestor) {
                if (ancestor.children().length > 1) {
                    ancestor.splitAt(this.endContainer);
                }
                if (this.endContainer.breakable) {
                    this.endContainer.mergeWith(ancestor);
                }
                ancestor = ancestor.parent;
            }
            if (this.endContainer.breakable) {
                this.endContainer.mergeWith(this.startContainer);
            }
        }
    }
    /**
     * Remove this range from its VDocument.
     */
    remove() {
        this.start.remove();
        this.end.remove();
    }
}
/**
 * Create a temporary range corresponding to the given boundary points and
 * call the given callback with the newly created range as argument. The
 * range is automatically destroyed after calling the callback.
 *
 * @param bounds The points corresponding to the range boundaries.
 * @param callback The callback to call with the newly created range.
 */
async function withRange(bounds, callback) {
    const range = new VRange(bounds);
    const result = await callback(range);
    range.remove();
    return result;
}


/***/ }),

/***/ "./packages/core/src/VSelection.ts":
/*!*****************************************!*\
  !*** ./packages/core/src/VSelection.ts ***!
  \*****************************************/
/*! exports provided: ANCHOR_CHAR, FOCUS_CHAR, Direction, VSelection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANCHOR_CHAR", function() { return ANCHOR_CHAR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_CHAR", function() { return FOCUS_CHAR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Direction", function() { return Direction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VSelection", function() { return VSelection; });
/* harmony import */ var _VRange__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VRange */ "./packages/core/src/VRange.ts");
/* harmony import */ var _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VNodes/AbstractNode */ "./packages/core/src/VNodes/AbstractNode.ts");



const ANCHOR_CHAR = '[';
const FOCUS_CHAR = ']';
var Direction;
(function (Direction) {
    Direction["BACKWARD"] = "BACKWARD";
    Direction["FORWARD"] = "FORWARD";
})(Direction || (Direction = {}));
class VSelection {
    constructor() {
        this.range = new _VRange__WEBPACK_IMPORTED_MODULE_0__["VRange"]();
        this._direction = Direction.FORWARD;
    }
    get anchor() {
        return this.direction === Direction.FORWARD ? this.range.start : this.range.end;
    }
    get focus() {
        return this.direction === Direction.FORWARD ? this.range.end : this.range.start;
    }
    get direction() {
        return this._direction;
    }
    isCollapsed() {
        return this.range.isCollapsed();
    }
    /**
     * Update the selection according to the given description.
     *
     * @param selection
     */
    set(selection) {
        this._direction = selection.direction;
        this.select(selection.anchorNode, selection.anchorPosition, selection.focusNode, selection.focusPosition);
    }
    /**
     * Set a collapsed selection at the given location, targetting a `reference`
     * VNode and specifying the `position` in reference to that VNode ('BEFORE',
     * 'AFTER'), like in an `xpath`.
     *
     * @param position
     * @param reference
     */
    setAt(reference, position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE) {
        this.setAnchor(reference, position);
        this.collapse();
    }
    select(anchorNode, anchorPosition = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE, focusNode = anchorNode, focusPosition = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].AFTER) {
        if (anchorPosition instanceof _VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_2__["AbstractNode"]) {
            focusNode = anchorPosition;
            anchorPosition = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE;
        }
        if (focusPosition === _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].AFTER) {
            this.setFocus(focusNode, focusPosition);
            this.setAnchor(anchorNode, anchorPosition);
        }
        else {
            this.setAnchor(anchorNode, anchorPosition);
            this.setFocus(focusNode, focusPosition);
        }
    }
    /**
     * Set the anchor of the selection by targetting a `reference` VNode and
     * specifying the `position` in reference to that VNode ('BEFORE', 'AFTER'),
     * like in an `xpath`. If no relative position if given, include the
     * reference node in the selection.
     *
     * @param reference
     * @param [position]
     */
    setAnchor(reference, position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE) {
        if (this.direction === Direction.FORWARD) {
            this.range.setStart(reference, position);
        }
        else {
            this.range.setEnd(reference, position);
        }
    }
    /**
     * Set the focus of the selection by targetting a `reference` VNode and
     * specifying the `position` in reference to that VNode ('BEFORE', 'AFTER'),
     * like in an `xpath`. If no relative position if given, include the
     * reference node in the selection.
     *
     * @param reference
     * @param [position]
     */
    setFocus(reference, position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].AFTER) {
        if (this.direction === Direction.FORWARD) {
            this.range.setEnd(reference, position);
        }
        else {
            this.range.setStart(reference, position);
        }
    }
    /**
     * Extend the selection from its anchor to the given location, targetting a
     * `reference` VNode and specifying the `direction` of the extension.
     *
     * @param reference
     * @param [direction] default: Direction.FORWARD
     */
    extendTo(reference, direction = Direction.FORWARD) {
        let position;
        if (direction === Direction.FORWARD) {
            if (reference.hasChildren()) {
                reference = reference.next();
                reference = reference.firstLeaf();
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE;
            }
            else {
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].AFTER;
            }
        }
        else {
            reference = reference.previous();
            if (reference.hasChildren()) {
                reference = reference.firstLeaf();
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE;
            }
            else {
                position = _VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].AFTER;
            }
        }
        if (reference) {
            this.setFocus(reference, position);
        }
    }
    /**
     * Collapse the selection on its anchor.
     *
     */
    collapse() {
        this.range.collapse(this.anchor);
    }
}


/***/ }),

/***/ "./packages/plugin-align/src/Align.ts":
/*!********************************************!*\
  !*** ./packages/plugin-align/src/Align.ts ***!
  \********************************************/
/*! exports provided: AlignType, Align */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlignType", function() { return AlignType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Align", function() { return Align; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");



var AlignType;
(function (AlignType) {
    AlignType["LEFT"] = "left";
    AlignType["CENTER"] = "center";
    AlignType["RIGHT"] = "right";
    AlignType["JUSTIFY"] = "justify";
})(AlignType || (AlignType = {}));
class Align extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            align: {
                handler: this.align.bind(this),
            },
        };
        this.loadables = {
            shortcuts: [
                {
                    pattern: 'Ctrl+Shift+L',
                    commandId: 'align',
                    commandArgs: { type: AlignType.LEFT },
                },
                {
                    pattern: 'Ctrl+Shift+E',
                    commandId: 'align',
                    commandArgs: { type: AlignType.CENTER },
                },
                {
                    pattern: 'Ctrl+Shift+R',
                    commandId: 'align',
                    commandArgs: { type: AlignType.RIGHT },
                },
                {
                    pattern: 'Ctrl+Shift+J',
                    commandId: 'align',
                    commandArgs: { type: AlignType.JUSTIFY },
                },
            ],
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return true if the given node has the given alignment style. If no type
     * is passed, return true if the given node has an alignment style at all.
     *
     * @param node
     * @param [type]
     */
    static isAligned(node, type) {
        var _a;
        const align = (_a = node.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_2__["Attributes"])) === null || _a === void 0 ? void 0 : _a.style.get('text-align');
        return type ? align === null || align === void 0 ? void 0 : align.includes(type) : !!align;
    }
    /**
     * Align text.
     */
    align(params) {
        var _a, _b;
        const nodes = params.context.range.targetedNodes((node) => {
            return node.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_1__["ContainerNode"]) || (node.parent && !node.parent.editable);
        });
        const type = params.type;
        for (const node of nodes) {
            const alignedAncestor = node.ancestor(Align.isAligned);
            // Compute current alignment.
            const currentAlignment = (_b = (_a = alignedAncestor === null || alignedAncestor === void 0 ? void 0 : alignedAncestor.modifiers) === null || _a === void 0 ? void 0 : _a.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_2__["Attributes"])) === null || _b === void 0 ? void 0 : _b.style.get('text-align');
            if (!alignedAncestor || currentAlignment !== type) {
                node.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_2__["Attributes"]).style.set('text-align', type.toLowerCase());
            }
        }
    }
}
Align.dependencies = [];


/***/ }),

/***/ "./packages/plugin-align/src/AlignButtons.ts":
/*!***************************************************!*\
  !*** ./packages/plugin-align/src/AlignButtons.ts ***!
  \***************************************************/
/*! exports provided: AlignLeftButton, AlignCenterButton, AlignRightButton, AlignJustifyButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlignLeftButton", function() { return AlignLeftButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlignCenterButton", function() { return AlignCenterButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlignRightButton", function() { return AlignRightButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlignJustifyButton", function() { return AlignJustifyButton; });
/* harmony import */ var _Align__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Align */ "./packages/plugin-align/src/Align.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");


function isAligned(node, type) {
    const alignedAncestor = node.ancestor(_Align__WEBPACK_IMPORTED_MODULE_0__["Align"].isAligned);
    return _Align__WEBPACK_IMPORTED_MODULE_0__["Align"].isAligned(alignedAncestor || node, type);
}
const AlignLeftButton = {
    title: 'Align left',
    class: 'fa-align-left',
    commandId: 'align',
    commandArgs: { type: _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].LEFT },
    selected: (editor) => {
        return editor.selection.range
            .targetedNodes(node => node.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_1__["ContainerNode"]))
            .every(node => isAligned(node, _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].LEFT));
    },
};
const AlignCenterButton = {
    title: 'Align center',
    class: 'fa-align-center',
    commandId: 'align',
    commandArgs: { type: _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].CENTER },
    selected: (editor) => {
        return editor.selection.range
            .targetedNodes(node => node.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_1__["ContainerNode"]))
            .every(node => isAligned(node, _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].CENTER));
    },
};
const AlignRightButton = {
    title: 'Align right',
    class: 'fa-align-right',
    commandId: 'align',
    commandArgs: { type: _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].RIGHT },
    selected: (editor) => {
        return editor.selection.range
            .targetedNodes(node => node.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_1__["ContainerNode"]))
            .every(node => isAligned(node, _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].RIGHT));
    },
};
const AlignJustifyButton = {
    title: 'Align justify',
    class: 'fa-align-justify',
    commandId: 'align',
    commandArgs: { type: _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].JUSTIFY },
    selected: (editor) => {
        return editor.selection.range
            .targetedNodes(node => node.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_1__["ContainerNode"]))
            .every(node => isAligned(node, _Align__WEBPACK_IMPORTED_MODULE_0__["AlignType"].JUSTIFY));
    },
};


/***/ }),

/***/ "./packages/plugin-backgroundcolor/src/BackgroundColor.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-backgroundcolor/src/BackgroundColor.ts ***!
  \****************************************************************/
/*! exports provided: BackgroundColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackgroundColor", function() { return BackgroundColor; });
/* harmony import */ var _plugin_color_src_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-color/src/Color */ "./packages/plugin-color/src/Color.ts");

class BackgroundColor extends _plugin_color_src_Color__WEBPACK_IMPORTED_MODULE_0__["Color"] {
    constructor() {
        super(...arguments);
        this.styleName = 'background-color';
        this.configuration = { defaultColor: 'white', ...this.configuration };
        this.commands = {
            colorBackground: {
                handler: this.color,
            },
            uncolorBackground: {
                handler: this.uncolor,
            },
        };
        this.loadables = {
            shortcuts: [
                {
                    pattern: 'CTRL+H',
                    commandId: 'colorBackground',
                    // TODO: use dialog to get params
                    commandArgs: {
                        color: 'yellow',
                    },
                },
                {
                    pattern: 'CTRL+SHIFT+H',
                    commandId: 'uncolorBackground',
                },
            ],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-blockquote/src/Blockquote.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-blockquote/src/Blockquote.ts ***!
  \******************************************************/
/*! exports provided: Blockquote */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Blockquote", function() { return Blockquote; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _BlockquoteXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BlockquoteXmlDomParser */ "./packages/plugin-blockquote/src/BlockquoteXmlDomParser.ts");


class Blockquote extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_BlockquoteXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["BlockquoteXmlDomParser"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-blockquote/src/BlockquoteNode.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-blockquote/src/BlockquoteNode.ts ***!
  \**********************************************************/
/*! exports provided: BlockquoteNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockquoteNode", function() { return BlockquoteNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");

class BlockquoteNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor() {
        super({ htmlTag: 'BLOCKQUOTE' });
    }
}


/***/ }),

/***/ "./packages/plugin-blockquote/src/BlockquoteXmlDomParser.ts":
/*!******************************************************************!*\
  !*** ./packages/plugin-blockquote/src/BlockquoteXmlDomParser.ts ***!
  \******************************************************************/
/*! exports provided: BlockquoteXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockquoteXmlDomParser", function() { return BlockquoteXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _BlockquoteNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BlockquoteNode */ "./packages/plugin-blockquote/src/BlockquoteNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class BlockquoteXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'BLOCKQUOTE';
        };
    }
    async parse(item) {
        const blockquote = new _BlockquoteNode__WEBPACK_IMPORTED_MODULE_2__["BlockquoteNode"]();
        blockquote.modifiers.append(this.engine.parseAttributes(item));
        const nodes = await this.engine.parse(...item.childNodes);
        blockquote.append(...nodes);
        return [blockquote];
    }
}
BlockquoteXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-bold/src/Bold.ts":
/*!******************************************!*\
  !*** ./packages/plugin-bold/src/Bold.ts ***!
  \******************************************/
/*! exports provided: Bold */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bold", function() { return Bold; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _BoldFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BoldFormat */ "./packages/plugin-bold/src/BoldFormat.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _BoldXmlDomParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BoldXmlDomParser */ "./packages/plugin-bold/src/BoldXmlDomParser.ts");




class Bold extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_BoldXmlDomParser__WEBPACK_IMPORTED_MODULE_3__["BoldXmlDomParser"]],
            shortcuts: [
                {
                    pattern: 'CTRL+B',
                    commandId: 'toggleFormat',
                    commandArgs: { FormatClass: _BoldFormat__WEBPACK_IMPORTED_MODULE_1__["BoldFormat"] },
                },
            ],
        };
    }
}
Bold.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]];


/***/ }),

/***/ "./packages/plugin-bold/src/BoldButtons.ts":
/*!*************************************************!*\
  !*** ./packages/plugin-bold/src/BoldButtons.ts ***!
  \*************************************************/
/*! exports provided: BoldButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoldButton", function() { return BoldButton; });
/* harmony import */ var _BoldFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BoldFormat */ "./packages/plugin-bold/src/BoldFormat.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");


const BoldButton = {
    title: 'Toggle bold',
    class: 'fa-bold',
    commandId: 'toggleFormat',
    commandArgs: { FormatClass: _BoldFormat__WEBPACK_IMPORTED_MODULE_0__["BoldFormat"] },
    selected: (editor) => editor.plugins.get(_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__["Inline"]).isAllFormat(_BoldFormat__WEBPACK_IMPORTED_MODULE_0__["BoldFormat"]),
};


/***/ }),

/***/ "./packages/plugin-bold/src/BoldFormat.ts":
/*!************************************************!*\
  !*** ./packages/plugin-bold/src/BoldFormat.ts ***!
  \************************************************/
/*! exports provided: BoldFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoldFormat", function() { return BoldFormat; });
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");

class BoldFormat extends _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__["Format"] {
    constructor(htmlTag = 'B') {
        super(htmlTag);
    }
}


/***/ }),

/***/ "./packages/plugin-bold/src/BoldXmlDomParser.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-bold/src/BoldXmlDomParser.ts ***!
  \******************************************************/
/*! exports provided: BoldXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoldXmlDomParser", function() { return BoldXmlDomParser; });
/* harmony import */ var _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatParser */ "./packages/plugin-inline/src/FormatParser.ts");
/* harmony import */ var _BoldFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BoldFormat */ "./packages/plugin-bold/src/BoldFormat.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class BoldXmlDomParser extends _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__["FormatParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'B' || Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'STRONG');
        };
    }
    /**
     * Parse a bold node.
     *
     * @param item
     */
    async parse(item) {
        const bold = new _BoldFormat__WEBPACK_IMPORTED_MODULE_1__["BoldFormat"](Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item));
        bold.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        this.applyFormat(bold, children);
        return children;
    }
}
BoldXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-char/src/Char.ts":
/*!******************************************!*\
  !*** ./packages/plugin-char/src/Char.ts ***!
  \******************************************/
/*! exports provided: Char */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Char", function() { return Char; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _CharNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CharNode */ "./packages/plugin-char/src/CharNode.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _CharFormatHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CharFormatHtmlDomRenderer */ "./packages/plugin-char/src/CharFormatHtmlDomRenderer.ts");
/* harmony import */ var _CharHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CharHtmlDomRenderer */ "./packages/plugin-char/src/CharHtmlDomRenderer.ts");
/* harmony import */ var _CharXmlDomParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CharXmlDomParser */ "./packages/plugin-char/src/CharXmlDomParser.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");









class Char extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_CharXmlDomParser__WEBPACK_IMPORTED_MODULE_5__["CharXmlDomParser"]],
            renderers: [_CharFormatHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_3__["CharFormatHtmlDomRenderer"], _CharHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_4__["CharHtmlDomRenderer"]],
        };
        this.commands = {
            insertText: {
                handler: this.insertText,
            },
            insertHtml: {
                handler: this.insertHtml.bind(this),
            },
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Insert text at the current position of the selection.
     *
     * If the selection is collapsed, add `text` to the vDocument and copy the
     * formating of the previous char or the next char.
     *
     * If the selection is not collapsed, replace the text with the formating
     * that was present in the selection.
     *
     * @param params
     */
    insertText(params) {
        const range = params.context.range;
        const text = params.text;
        const inline = this.editor.plugins.get(_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]);
        const modifiers = inline.getCurrentModifiers(range);
        if (params.formats) {
            modifiers.replaceOrAppend(params.formats);
        }
        const style = inline.getCurrentStyle(range);
        // Remove the contents of the range if needed.
        console.log('!range.isCollapsed():', !range.isCollapsed());
        if (!range.isCollapsed()) {
            range.empty();
        }
        // Split the text into CHAR nodes and insert them at the range.
        const characters = text.split('');
        const charNodes = characters.map(char => {
            return new _CharNode__WEBPACK_IMPORTED_MODULE_1__["CharNode"]({ char: char, modifiers: modifiers.clone() });
        });
        charNodes.forEach(charNode => {
            charNode.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_7__["Attributes"]).style = style;
            range.start.before(charNode);
        });
        if (params.select && charNodes.length) {
            this.editor.selection.select(charNodes[0], charNodes[charNodes.length - 1]);
        }
        inline.resetCache();
    }
    async insertHtml(params) {
        const parser = this.editor.plugins.get(_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_6__["Parser"]);
        const domParser = parser && parser.engines['dom/html'];
        if (!domParser) {
            // TODO: remove this when the editor can be instantiated on
            // something else than DOM.
            throw new Error(`No DOM parser installed.`);
        }
        const div = document.createElement('div');
        div.innerHTML = params.html;
        const parsedEditable = await domParser.parse(div);
        const newNodes = parsedEditable[0].children();
        // Remove the contents of the range if needed.
        // todo: use Point or Range but not both.
        const range = params.context.range;
        if (!range.isCollapsed()) {
            range.empty();
        }
        if (params.rangePoint) {
            const [node, position] = params.rangePoint;
            switch (position) {
                case _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_8__["RelativePosition"].BEFORE:
                    newNodes.forEach(node.before.bind(node));
                    break;
                case _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_8__["RelativePosition"].AFTER:
                    [...newNodes].reverse().forEach(node.after.bind(node));
                    break;
                case _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_8__["RelativePosition"].INSIDE:
                    node.append(...newNodes);
                    break;
            }
        }
        else {
            newNodes.forEach(range.start.before.bind(range.start));
        }
        return newNodes;
    }
}
Char.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]];


/***/ }),

/***/ "./packages/plugin-char/src/CharFormatHtmlDomRenderer.ts":
/*!***************************************************************!*\
  !*** ./packages/plugin-char/src/CharFormatHtmlDomRenderer.ts ***!
  \***************************************************************/
/*! exports provided: CharFormatHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharFormatHtmlDomRenderer", function() { return CharFormatHtmlDomRenderer; });
/* harmony import */ var _plugin_inline_src_FormatDomRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatDomRenderer */ "./packages/plugin-inline/src/FormatDomRenderer.ts");
/* harmony import */ var _CharNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CharNode */ "./packages/plugin-char/src/CharNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");





class CharFormatHtmlDomRenderer extends _plugin_inline_src_FormatDomRenderer__WEBPACK_IMPORTED_MODULE_0__["FormatDomRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _CharNode__WEBPACK_IMPORTED_MODULE_1__["CharNode"];
    }
    async render(node) {
        const previousSibling = node.previousSibling();
        if (previousSibling && node.isSameTextNode(previousSibling)) {
            return this.engine.render(previousSibling);
        }
        const textNode = await this.super.render(node);
        // If the node has attributes, wrap it inside a span with those
        // attributes.
        let rendering;
        const attributes = node.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"]);
        if (attributes === null || attributes === void 0 ? void 0 : attributes.length) {
            const span = document.createElement('span');
            this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"], node, span);
            textNode.forEach(child => span.appendChild(child));
            rendering = [span];
        }
        else {
            rendering = textNode;
        }
        return this.renderFormats(node.modifiers.filter(_plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_3__["Format"]), rendering);
    }
}
CharFormatHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-char/src/CharHtmlDomRenderer.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-char/src/CharHtmlDomRenderer.ts ***!
  \*********************************************************/
/*! exports provided: CharHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharHtmlDomRenderer", function() { return CharHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _CharNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CharNode */ "./packages/plugin-char/src/CharNode.ts");
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");




class CharHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _CharNode__WEBPACK_IMPORTED_MODULE_1__["CharNode"];
    }
    async render(node) {
        // Consecutive compatible char nodes are rendered as a single text node.
        let text = '' + node.char;
        let next = node.nextSibling();
        const charNodes = [node];
        while (next && node.isSameTextNode(next)) {
            if (next instanceof _CharNode__WEBPACK_IMPORTED_MODULE_1__["CharNode"]) {
                charNodes.push(next);
                if (next.char === ' ' && text[text.length - 1] === ' ') {
                    // Browsers don't render consecutive space chars otherwise.
                    text += '\u00A0';
                }
                else {
                    text += next.char;
                }
            }
            next = next.nextSibling();
        }
        // Render block edge spaces as non-breakable space (otherwise browsers
        // won't render them).
        const previous = node.previousSibling();
        if (!previous || !previous.is(_plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_2__["InlineNode"])) {
            text = text.replace(/^ /g, '\u00A0');
        }
        if (!next || !next.is(_plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_2__["InlineNode"])) {
            text = text.replace(/ $/g, '\u00A0');
        }
        const rendering = Promise.resolve([document.createTextNode(text)]);
        return this.engine.rendered(charNodes, [this, rendering]);
    }
}
CharHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-char/src/CharNode.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-char/src/CharNode.ts ***!
  \**********************************************/
/*! exports provided: CharNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharNode", function() { return CharNode; });
/* harmony import */ var _core_src_VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/MarkerNode */ "./packages/core/src/VNodes/MarkerNode.ts");
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");


class CharNode extends _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_1__["InlineNode"] {
    constructor(params) {
        super();
        if (params.char.length !== 1) {
            throw new Error('Cannot make a CharNode out of anything else than a string of length 1.');
        }
        this.char = params.char;
        if (params.modifiers) {
            this.modifiers = params.modifiers;
        }
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    get name() {
        return this.char;
    }
    /**
     * Return a new VNode with the same type and attributes as this VNode.
     *
     * @override
     */
    clone(params) {
        const defaults = {
            char: this.char,
            modifiers: this.modifiers.clone(),
        };
        return super.clone({ ...defaults, ...params });
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return the length of this VNode.
     */
    get length() {
        return 1;
    }
    /**
     * Return the text content of this node.
     *
     * @override
     */
    get textContent() {
        return this.char;
    }
    /**
     * Return true if `a` has the same format properties as `b`.
     *
     * @param a
     * @param b
     */
    isSameTextNode(node) {
        if (this.is(CharNode) && node.is(CharNode)) {
            // Char VNodes are the same text node if they have the same
            // modifiers.
            return this.modifiers.areSameAs(node.modifiers);
        }
        else if (this.is(_core_src_VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_0__["MarkerNode"]) || node.is(_core_src_VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_0__["MarkerNode"])) {
            // A Marker node is always considered to be part of the same text
            // node as another node in the sense that the text node must not
            // be broken up just because it contains a marker.
            return true;
        }
        else {
            // Nodes that are not valid in a text node must end the text node.
            return false;
        }
    }
}
CharNode.atomic = true;


/***/ }),

/***/ "./packages/plugin-char/src/CharXmlDomParser.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-char/src/CharXmlDomParser.ts ***!
  \******************************************************/
/*! exports provided: CharXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharXmlDomParser", function() { return CharXmlDomParser; });
/* harmony import */ var _utils_src_formattingSpace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/src/formattingSpace */ "./packages/utils/src/formattingSpace.ts");
/* harmony import */ var _CharNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CharNode */ "./packages/plugin-char/src/CharNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");




class CharXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_2__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item.nodeType === Node.TEXT_NODE;
        };
    }
    async parse(item) {
        const nodes = [];
        const text = Object(_utils_src_formattingSpace__WEBPACK_IMPORTED_MODULE_0__["removeFormattingSpace"])(item);
        for (let i = 0; i < text.length; i++) {
            const char = text.charAt(i);
            let parsedVNode;
            if (char === '\n') {
                parsedVNode = new this.engine.editor.configuration.defaults.Separator();
            }
            else {
                parsedVNode = new _CharNode__WEBPACK_IMPORTED_MODULE_1__["CharNode"]({ char: char });
            }
            nodes.push(parsedVNode);
        }
        return nodes;
    }
}
CharXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_3__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-color/src/Color.ts":
/*!********************************************!*\
  !*** ./packages/plugin-color/src/Color.ts ***!
  \********************************************/
/*! exports provided: Color */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _core_src_VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/src/VNodes/AbstractNode */ "./packages/core/src/VNodes/AbstractNode.ts");
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");
/* harmony import */ var _plugin_xml_src_CssStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plugin-xml/src/CssStyle */ "./packages/plugin-xml/src/CssStyle.ts");







class Color extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    hasColor(color, node) {
        var _a;
        if (color instanceof _core_src_VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_2__["AbstractNode"]) {
            node = color;
        }
        const nodeBackgroundColor = (_a = node.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"])) === null || _a === void 0 ? void 0 : _a.style.get(this.styleName);
        if (color instanceof _core_src_VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_2__["AbstractNode"]) {
            return !!nodeBackgroundColor;
        }
        else {
            return nodeBackgroundColor === color;
        }
    }
    /**
     * Apply the given color to the range.
     *
     * @param params
     */
    color(params) {
        var _a;
        const color = params.color;
        if (params.context.range.isCollapsed()) {
            // Set the style cache.
            const inline = this.dependencies.get(_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__["Inline"]);
            const currentCache = inline.cache.style || {};
            inline.cache.style = new _plugin_xml_src_CssStyle__WEBPACK_IMPORTED_MODULE_6__["CssStyle"]({ ...currentCache, [this.styleName]: color });
        }
        else {
            const selectedNodes = params.context.range.selectedNodes();
            // Skip if the node already has the right color, through an
            // ancestor or a format.
            const notColoredYet = selectedNodes.filter(node => {
                if (this.hasColor(color, node))
                    return false;
                const colorAncestor = node.ancestor(this.hasColor.bind(this));
                return !colorAncestor || !this.hasColor(color, colorAncestor);
            });
            for (const node of notColoredYet) {
                // Apply the style to the node or its first format.
                this._nodeOrFirstFormat(node)
                    .modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"])
                    .style.set(this.styleName, color);
                // If there are ancestors of this node whose children all have
                // this style, style these ancestors instead of their
                // descendants.
                let parent = node.parent;
                while (parent && parent.editable && this._isAllColored(parent, color)) {
                    parent.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"]).style.set(this.styleName, color);
                    // TODO: not remove the children's styles when we have modifiers.
                    for (const child of parent.children()) {
                        (_a = child.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"])) === null || _a === void 0 ? void 0 : _a.style.remove(this.styleName);
                    }
                    parent = parent.parent;
                }
            }
        }
    }
    /**
     * Remove the current color from the range. If the color was applied to
     * an ancestor, apply the default color to its relevant inline descendants.
     *
     * @param params
     */
    uncolor(params) {
        var _a, _b, _c, _d;
        const range = params.context.range;
        const defaultColor = this.configuration.defaultColor;
        const hasColor = this.hasColor.bind(this);
        if (range.isCollapsed()) {
            const inline = this.dependencies.get(_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__["Inline"]);
            if (range.start.ancestor(hasColor)) {
                // Set the color style cache to the default color.
                if (!inline.cache.style) {
                    inline.cache.style = new _plugin_xml_src_CssStyle__WEBPACK_IMPORTED_MODULE_6__["CssStyle"]();
                }
                inline.cache.style.set(this.styleName, defaultColor);
            }
            else if (inline.cache.style) {
                // Unset the color style cache.
                inline.cache.style.remove(this.styleName);
            }
        }
        else {
            for (const node of params.context.range.selectedNodes()) {
                const target = this._nodeOrFirstFormat(node);
                const currentColor = (_a = target.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"])) === null || _a === void 0 ? void 0 : _a.style.get(this.styleName);
                if (!currentColor || currentColor === defaultColor || node.ancestor(hasColor)) {
                    // Set the color to the default color.
                    target.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"]).style.set(this.styleName, defaultColor);
                }
                else {
                    // Remove the color.
                    (_b = target.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"])) === null || _b === void 0 ? void 0 : _b.style.remove(this.styleName);
                }
                // Uncolor the children and their formats as well.
                for (const child of node.children()) {
                    (_c = child.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"])) === null || _c === void 0 ? void 0 : _c.style.remove(this.styleName);
                    if (child.is(_plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_3__["InlineNode"])) {
                        for (const format of child.modifiers.filter(_plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_4__["Format"])) {
                            (_d = format.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_5__["Attributes"])) === null || _d === void 0 ? void 0 : _d.style.remove(this.styleName);
                        }
                    }
                }
            }
        }
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return the node's first format if any, itself otherwise.
     *
     * @param node
     */
    _nodeOrFirstFormat(node) {
        return node.modifiers.filter(_plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_4__["Format"])[0] || node;
    }
    /**
     * Return true if all the children of the given node have the given color.
     *
     * @param node
     * @param color
     */
    _isAllColored(node, color) {
        return node.children().every(child => this.hasColor(color, child));
    }
}
Color.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__["Inline"]];


/***/ }),

/***/ "./packages/plugin-devtools/assets/DevTools.css":
/*!******************************************************!*\
  !*** ./packages/plugin-devtools/assets/DevTools.css ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./DevTools.css */ "./node_modules/css-loader/dist/cjs.js!./packages/plugin-devtools/assets/DevTools.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);

var exported = content.locals ? content.locals : {};



module.exports = exported;

/***/ }),

/***/ "./packages/plugin-devtools/assets/DevTools.xml":
/*!******************************************************!*\
  !*** ./packages/plugin-devtools/assets/DevTools.xml ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<templates>\n    <!-- INSPECTOR -->\n    <devtools-panel class=\"inspector\" t-name=\"InspectorComponent\" t-att-class=\"{active: props.isOpen}\"\n        t-on-node-selected=\"selectNode\"\n        t-on-keydown=\"onKeydown\">\n        <devtools-contents t-if=\"props.isOpen\">\n            <devtools-mainpane>\n                <mainpane-contents>\n                    <devtools-tree>\n                        <TreeComponent\n                            vNode=\"domEngine.root\"\n                            isRoot=\"true\"\n                            selectedPath=\"getPath(selectedNode)\"\n                            selectedID=\"state.selectedID\"/>\n                    </devtools-tree>\n                </mainpane-contents>\n                <PathComponent\n                    path=\"getPath(selectedNode)\"\n                    selectedID=\"state.selectedID\"/>\n            </devtools-mainpane>\n            <devtools-sidepane>\n                <InfoComponent vNode=\"selectedNode\"/>\n            </devtools-sidepane>\n        </devtools-contents>\n    </devtools-panel>\n\n    <!-- INSPECTOR.Tree -->\n    <devtools-node t-name=\"TreeComponent\"\n        t-att-class=\"{\n            block: props.vNode.length and !props.vNode.char,\n            folded: state.folded,\n            root: props.isRoot,\n            'self-closing': !props.vNode.hasChildren(),\n        }\"\n        tabindex=\"1\"\n        t-on-keydown=\"onKeydown\"\n        t-on-node-selected=\"selectNode\">\n        <t t-if=\"props.isRoot\">\n            <devtools-nodename class=\"selectable-line block\"\n                t-on-click=\"onClickNode\" t-on-dblclick=\"onDblClickNode\"\n                t-att-class=\"{\n                    selected: props.selectedID == props.vNode.id,\n                }\">root</devtools-nodename>\n            <t t-call=\"treeChildren\"/>\n        </t>\n        <t t-else=\"\">\n            <devtools-nodename t-if=\"!props.vNode.tangible\"\n                t-on-click=\"onClickNode\" t-on-dblclick=\"onDblClickNode\"\n                class=\"selectable-line inline marker-node\" t-att-class=\"{\n                    selected: props.selectedID == props.vNode.id,\n                }\">\n                <b><t t-esc=\"repr()\"/></b>\n            </devtools-nodename>\n            <devtools-nodename t-elif=\"props.vNode.char\" t-on-click=\"onClickNode\"\n                t-on-dblclick=\"onDblClickNode\"\n                class=\"selectable-line inline\" t-att-class=\"{\n                    bold: isFormat(props.vNode, 'b'),\n                    italic: isFormat(props.vNode, 'i'),\n                    underline: isFormat(props.vNode, 'u'),\n                    link: isFormat(props.vNode, 'link'),\n                    subscript: isFormat(props.vNode, 'subscript'),\n                    superscript: isFormat(props.vNode, 'superscript'),\n                    selected: props.selectedID == props.vNode.id,\n                }\">\n                <t t-esc=\"repr()\"/>\n            </devtools-nodename>\n            <t t-else=\"\">\n                <devtools-nodename class=\"selectable-line block\" t-on-click=\"onClickNode\"\n                    t-on-dblclick=\"onDblClickNode\"\n                    t-att-class=\"{\n                        bold: isFormat(props.vNode, 'b'),\n                        italic: isFormat(props.vNode, 'i'),\n                        underline: isFormat(props.vNode, 'u'),\n                        link: isFormat(props.vNode, 'link'),\n                        subscript: isFormat(props.vNode, 'subscript'),\n                        superscript: isFormat(props.vNode, 'superscript'),\n                        selected: props.selectedID == props.vNode.id,\n                        'line-break': props.vNode.htmlTag === 'BR',\n                    }\">\n                    <t t-esc=\"repr()\"/>\n                </devtools-nodename>\n                <t t-call=\"treeChildren\"/>\n            </t>\n        </t>\n    </devtools-node>\n\n    <t t-name=\"treeChildren\">\n        <devtools-children>\n            <TreeComponent t-if=\"!state.folded\"\n                t-foreach=\"props.vNode.childVNodes.slice()\" t-as=\"child\"\n                t-key=\"child.id\"\n                vNode=\"child\"\n                selectedPath=\"props.selectedPath\"\n                selectedID=\"props.selectedID\"/>\n        </devtools-children>\n    </t>\n\n    <!-- INSPECTOR.Path -->\n    <devtools-path t-name=\"PathComponent\">\n        <devtools-pathnode t-foreach=\"props.path\" t-as=\"vNode\"\n            t-key=\"vNode.id\"\n            t-att-class=\"{\n                selected: vNode.id == props.selectedID\n            }\"\n            t-on-click=\"selectNode(vNode)\">\n            <t t-esc=\"getNodeRepr(vNode)\"/>\n        </devtools-pathnode>\n    </devtools-path>\n\n    <!-- INSPECTOR.Info -->\n    <devtools-info t-name=\"InfoComponent\">\n        <devtools-navbar>\n            <devtools-button t-on-click=\"openTab('vNode')\" t-att-class=\"{\n                selected: state.currentTab == 'vNode',\n            }\">VNode</devtools-button>\n            <devtools-button t-on-click=\"openTab('selection')\" t-att-class=\"{\n                selected: state.currentTab == 'selection',\n            }\">Selection</devtools-button>\n        </devtools-navbar>\n        <t t-call=\"infoVNode\" t-if=\"state.currentTab == 'vNode'\"/>\n        <t t-call=\"infoSelection\" t-if=\"state.currentTab == 'selection'\"/>\n    </devtools-info>\n\n    <!-- INSPECTOR.Info.vNode -->\n    <t t-name=\"infoVNode\">\n        <devtools-about>\n            <devtools-type><t t-esc=\"className(props.vNode)\"/></devtools-type> <t t-esc=\"props.vNode.name\"/>\n            <t t-if=\"props.vNode.char\">:\n                \"<t t-esc=\"props.vNode.char\"/>\"\n            </t>\n            <devtools-button class=\"logger\" t-on-click=\"logVNode(props.vNode)\">&gt;_</devtools-button>\n            <devtools-id><t t-esc=\"props.vNode.id\"/></devtools-id>\n        </devtools-about>\n        <devtools-properties>\n            <devtools-infotitle>👤 About me</devtools-infotitle>\n            <devtools-table>\n                <devtools-tbody>\n                    <devtools-tr t-foreach=\"aboutMeProps\" t-as=\"propName\" t-key=\"propName_index\">\n                        <devtools-td><t t-esc=\"propName\"/></devtools-td>\n                        <devtools-td><t t-esc=\"propRepr(props.vNode, propName)\"/></devtools-td>\n                    </devtools-tr>\n                    <devtools-tr>\n                        <devtools-td>total length</devtools-td>\n                        <devtools-td><t t-esc=\"totalLength(props.vNode)\"/></devtools-td>\n                    </devtools-tr>\n                    <devtools-tr>\n                        <devtools-td>text content</devtools-td>\n                        <devtools-td><t t-esc=\"props.vNode.textContent\"/></devtools-td>\n                    </devtools-tr>\n                </devtools-tbody>\n            </devtools-table>\n            <devtools-infotitle>📖 My Properties</devtools-infotitle>\n            <devtools-table>\n                <devtools-tbody>\n                    <devtools-tr t-foreach=\"nodeProperties(props.vNode)\" t-as=\"prop\" t-key=\"prop_index\">\n                        <devtools-td><t t-esc=\"prop.key\"/></devtools-td>\n                        <devtools-td><t t-esc=\"prop.value\"/></devtools-td>\n                    </devtools-tr>\n                </devtools-tbody>\n            </devtools-table>\n            <devtools-infotitle>👪 My Family</devtools-infotitle>\n            <devtools-table>\n                <devtools-tbody>\n                    <devtools-tr t-foreach=\"familyProps\" t-as=\"propName\"\n                    t-key=\"propName_index\">\n                        <devtools-td><t t-esc=\"propName\"/></devtools-td>\n                        <devtools-td t-if=\"propName === 'parent'\" t-on-click=\"selectNode(props.vNode.parent)\">\n                            <t t-esc=\"propRepr(props.vNode, propName)\"/>\n                        </devtools-td>\n                        <devtools-td t-elif=\"propName === 'siblings'\">\n                            <devtools-list>\n                                <devtools-listitem t-if=\"props.vNode.previousSibling()\"\n                                    t-on-click=\"selectNode(props.vNode.previousSibling())\">\n                                    previous: <t t-esc=\"props.vNode.previousSibling().name\"/>\n                                </devtools-listitem>\n                                <devtools-listitem t-else=\"\">previous: none</devtools-listitem>\n                                <devtools-listitem t-if=\"props.vNode.nextSibling()\"\n                                    t-on-click=\"selectNode(props.vNode.nextSibling())\">\n                                    next: <t t-esc=\"props.vNode.nextSibling().name\"/>\n                                </devtools-listitem>\n                                <devtools-listitem t-else=\"\">next: none</devtools-listitem>\n                            </devtools-list>\n                        </devtools-td>\n                        <devtools-td t-elif=\"propName === 'children'\">\n                            <devtools-list t-if=\"props.vNode.childVNodes.length\">\n                                <devtools-listitem t-foreach=\"props.vNode.children()\"\n                                    t-as=\"child\" t-key=\"child.id\"\n                                    t-on-click=\"selectNode(child)\">\n                                    <t t-esc=\"child.name\"/>\n                                </devtools-listitem>\n                            </devtools-list>\n                            <t t-else=\"\">none</t>\n                        </devtools-td>\n                        <devtools-td t-else=\"\"><t t-esc=\"propRepr(props.vNode, propName)\"/></devtools-td>\n                    </devtools-tr>\n                </devtools-tbody>\n            </devtools-table>\n        </devtools-properties>\n    </t>\n\n    <!-- INSPECTOR.Info.selection -->\n    <t t-name=\"infoSelection\">\n        <devtools-about>\n            <devtools-type>VSelection</devtools-type> Selection\n        </devtools-about>\n        <devtools-properties>\n            <devtools-infotitle>👤 About me</devtools-infotitle>\n            <devtools-table>\n                <devtools-tbody>\n                    <devtools-tr>\n                        <devtools-td>direction</devtools-td>\n                        <devtools-td><t t-esc=\"env.editor.selection.direction\"/></devtools-td>\n                    </devtools-tr>\n                    <devtools-tr>\n                        <devtools-td><strong class=\"marker-node\">[</strong> anchor</devtools-td>\n                        <devtools-td><t t-esc=\"_repr(env.editor.selection.anchor)\"/></devtools-td>\n                    </devtools-tr>\n                    <devtools-tr>\n                        <devtools-td><strong class=\"marker-node\">]</strong> focus</devtools-td>\n                        <devtools-td><t t-esc=\"_repr(env.editor.selection.focus)\"/></devtools-td>\n                    </devtools-tr>\n                </devtools-tbody>\n            </devtools-table>\n        </devtools-properties>\n    </t>\n\n    <devtools-panel t-name=\"CommandsComponent\"\n        t-att-class=\"{active: props.isOpen}\" tabindex=\"1\"\n        t-on-keydown=\"onKeydown\">\n        <devtools-contents t-if=\"props.isOpen\">\n            <t t-set=\"selectedCommandImplementations\" t-value=\"state.registry[state.selectedCommandIdentifier]\"/>\n            <devtools-mainpane style=\"overflow: hidden\">\n                <devtools-navbar>\n                    <devtools-button t-on-click=\"openTab('queue')\" t-att-class=\"{\n                        selected: state.currentTab == 'queue',\n                    }\">Queue</devtools-button>\n                    <devtools-button t-on-click=\"openTab('registry')\" t-att-class=\"{\n                        selected: state.currentTab == 'registry',\n                    }\">Registry</devtools-button>\n                </devtools-navbar>\n                <mainpane-contents t-if=\"state.currentTab == 'queue'\" style=\"overflow: auto\">\n                    <devtools-table style=\"width: 100%;\">\n                        <devtools-tbody>\n                            <devtools-tr t-foreach=\"Array.from(props.commands.keys()).reverse()\" t-as=\"commandIndex\"\n                                t-key=\"commandIndex_index\" class=\"selectable-line\"\n                                t-att-class=\"{\n                                    selected: state.selectedCommandIndex == commandIndex,\n                                }\"\n                                t-on-click=\"selectCommandByIndex(commandIndex)\">\n                                <devtools-td><t t-esc=\"props.commands[commandIndex][0]\"/></devtools-td>\n                            </devtools-tr>\n                        </devtools-tbody>\n                    </devtools-table>\n                </mainpane-contents>\n                <mainpane-contents t-elif=\"state.currentTab == 'registry'\" style=\"overflow: auto\">\n                    <devtools-command t-foreach=\"Object.keys(state.registry).sort()\" t-as=\"commandIdentifier\"\n                        t-key=\"record_index\" class=\"selectable-line\"\n                        t-att-class=\"{\n                            selected: state.selectedCommandIdentifier == commandIdentifier,\n                        }\"\n                        t-on-click=\"selectCommand(commandIdentifier)\">\n                        <t t-esc=\"commandIdentifier\"/>\n                    </devtools-command>\n                </mainpane-contents>\n            </devtools-mainpane>\n            <devtools-sidepane>\n                <devtools-info t-if=\"state.currentTab == 'queue'\">\n                    <t t-set=\"selectedCommand\" t-value=\"props.commands[state.selectedCommandIndex]\"/>\n                    <devtools-about t-if=\"selectedCommand\">\n                        <devtools-type>Command</devtools-type> <t t-esc=\"selectedCommand[0]\"/>\n                    </devtools-about>\n                    <devtools-properties t-if=\"selectedCommand\">\n                        <devtools-infotitle>Arguments</devtools-infotitle>\n                        <devtools-properties>\n                            <t t-if=\"selectedCommand\">\n                                <t t-set=\"payload\" t-value=\"selectedCommand[1]\"/>\n                                <t t-call=\"commandArgs\"/>\n                            </t>\n                            <t t-call=\"selectedCommandTable\"/>\n                        </devtools-properties>\n                    </devtools-properties>\n                </devtools-info>\n                <devtools-info t-elif=\"state.currentTab == 'registry'\">\n                    <t t-if=\"state.registry\">\n                        <devtools-about t-if=\"state.selectedCommandIdentifier\">\n                            <devtools-type>Command</devtools-type> <t t-esc=\"state.selectedCommandIdentifier\"/>\n                        </devtools-about>\n                        <devtools-properties t-if=\"state.selectedCommandIdentifier\">\n                            <t t-call=\"selectedCommandTable\"/>\n                        </devtools-properties>\n                    </t>\n                </devtools-info>\n            </devtools-sidepane>\n        </devtools-contents>\n    </devtools-panel>\n\n    <t t-name=\"commandArgs\">\n        <devtools-table>\n            <devtools-tbody>\n                <t t-foreach=\"Object.keys(payload)\" t-as=\"key\" t-key=\"key_index\">\n                    <devtools-tr t-if=\"key !== 'context'\">\n                        <t t-set=\"value\" t-value=\"payload[key]\"/>\n                        <devtools-td>\n                            <t t-esc=\"key\"/>\n                        </devtools-td>\n                        <devtools-td>\n                            <t t-if=\"value and key == 'vSelection'\" t-call=\"payloadVSelection\"/>\n                            <t t-else=\"\"><t t-esc=\"formatPayloadValue(value)\"/></t>\n                        </devtools-td>\n                    </devtools-tr>\n                </t>\n            </devtools-tbody>\n        </devtools-table>\n    </t>\n\n    <t t-name=\"payloadVSelection\">\n        <devtools-table>\n            <devtools-tbody>\n                <devtools-tr>\n                    <devtools-td>\n                        direction\n                    </devtools-td>\n                    <devtools-td>\n                        <t t-esc=\"value.direction or 'unset'\"/>\n                    </devtools-td>\n                </devtools-tr>\n                <devtools-tr>\n                    <devtools-td>\n                        anchor\n                    </devtools-td>\n                    <devtools-td>\n                        <t t-esc=\"value.anchorPosition\"/> <t t-esc=\"value.anchorNode.id\"/> (<t t-esc=\"value.anchorNode.name\"/>)\n                    </devtools-td>\n                </devtools-tr>\n                <devtools-tr>\n                    <devtools-td>\n                        focus\n                    </devtools-td>\n                    <devtools-td>\n                        <t t-esc=\"value.focusPosition\"/> <t t-esc=\"value.focusNode.id\"/> (<t t-esc=\"value.focusNode.name\"/>)\n                    </devtools-td>\n                </devtools-tr>\n            </devtools-tbody>\n        </devtools-table>\n    </t>\n\n    <t t-name=\"selectedCommandTable\">\n        <devtools-infotitle>Command definitions</devtools-infotitle>\n        <devtools-table>\n            <devtools-tbody>\n                <devtools-tr t-foreach=\"selectedCommandImplementations\"\n                    t-as=\"selectedCommandImplementation\" t-key=\"selectedCommandImplementation_index\"\n                    class=\"selectable-line\"\n                    t-att-class=\"{\n                        selected: state.selectedCommandImplementationIndex == handlerIndex,\n                    }\">\n                    <devtools-td><t t-esc=\"selectedCommandImplementation.handler.name\"/></devtools-td>\n                    <devtools-td><t t-esc=\"selectedCommandImplementation.handler\"/></devtools-td>\n                </devtools-tr>\n            </devtools-tbody>\n        </devtools-table>\n        <t t-set=\"mappings\" t-value=\"matchingMappings(state.selectedCommandIdentifier)\"/>\n        <t t-if=\"mappings.length\">\n            <devtools-infotitle>Shortcuts</devtools-infotitle>\n            <devtools-table>\n                <devtools-tbody>\n                    <devtools-tr t-foreach=\"mappings\" t-as=\"mapping\" t-key=\"mapping_index\">\n                        <devtools-td style=\"width: 50%;\"><t t-esc=\"stringifyPattern(mapping.pattern)\"/></devtools-td>\n                        <devtools-td><t t-esc=\"argsRepr(mapping.configuredCommand.commandArgs)\"/></devtools-td>\n                    </devtools-tr>\n                </devtools-tbody>\n            </devtools-table>\n        </t>\n    </t>\n\n    <!-- SHORTCUTS -->\n    <devtools-panel t-name=\"ShortcutsComponent\"\n        t-att-class=\"{active: props.isOpen}\" tabindex=\"1\"\n        t-on-keydown=\"onKeydown\">\n        <devtools-contents t-if=\"props.isOpen\">\n            <devtools-mainpane style=\"overflow: hidden\">\n                <mainpane-contents style=\"overflow: auto\">\n                    <devtools-table>\n                        <devtools-tr t-foreach=\"mappings\" t-as=\"mapping\" t-key=\"mapping_index\" class=\"selectable-line\">\n                            <devtools-td><t t-esc=\"stringifyPattern(mapping.pattern)\"/></devtools-td>\n                            <devtools-td><t t-esc=\"mapping.configuredCommand.commandId\"/></devtools-td>\n                            <devtools-td><t t-esc=\"argsRepr(mapping.configuredCommand.commandArgs)\"/></devtools-td>\n                        </devtools-tr>\n                    </devtools-table>\n                </mainpane-contents>\n            </devtools-mainpane>\n        </devtools-contents>\n    </devtools-panel>\n\n    <!-- MAIN -->\n    <jw-devtools t-name=\"devtools\"\n        t-att-class=\"{\n            closed: state.closed,\n        }\"\n        t-attf-style=\"height: {{state.height}}px\"\n        tabindex=\"2\">\n        <devtools-navbar\n            t-on-click=\"toggleClosed\"\n            t-on-mousedown=\"startResize\"\n            t-on-touchstart=\"startResize\">\n            <devtools-button t-on-click=\"openTab('inspector')\" t-att-class=\"{\n                selected: state.currentTab == 'inspector',\n            }\">Inspector</devtools-button>\n            <devtools-button t-on-click=\"openTab('commands')\" t-att-class=\"{\n                selected: state.currentTab == 'commands',\n            }\">Commands</devtools-button>\n            <devtools-button t-on-click=\"openTab('shortcuts')\" t-att-class=\"{\n                selected: state.currentTab == 'shortcuts',\n            }\">Shortcuts</devtools-button>\n            <devtools-button t-on-click=\"inpectDom()\">&#128269;</devtools-button>\n        </devtools-navbar>\n        <t t-if=\"!state.closed\">\n            <InspectorComponent isOpen=\"state.currentTab == 'inspector'\" t-ref=\"inspector\"/>\n            <CommandsComponent isOpen=\"state.currentTab == 'commands'\"\n                commands=\"state.commands\"/>\n            <ShortcutsComponent isOpen=\"state.currentTab == 'shortcuts'\"/>\n        </t>\n    </jw-devtools>\n\n</templates>\n"

/***/ }),

/***/ "./packages/plugin-devtools/src/DevTools.ts":
/*!**************************************************!*\
  !*** ./packages/plugin-devtools/src/DevTools.ts ***!
  \**************************************************/
/*! exports provided: DevTools */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DevTools", function() { return DevTools; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_owl_src_Owl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-owl/src/Owl */ "./packages/plugin-owl/src/Owl.ts");
/* harmony import */ var _plugin_owl_src_ui_OwlNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-owl/src/ui/OwlNode */ "./packages/plugin-owl/src/ui/OwlNode.ts");
/* harmony import */ var _components_DevToolsComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/DevToolsComponent */ "./packages/plugin-devtools/src/components/DevToolsComponent.ts");
/* harmony import */ var _plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-html/src/Html */ "./packages/plugin-html/src/Html.ts");
/* harmony import */ var _plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../plugin-dom-layout/src/DomLayout */ "./packages/plugin-dom-layout/src/DomLayout.ts");
/* harmony import */ var _assets_DevTools_xml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../assets/DevTools.xml */ "./packages/plugin-devtools/assets/DevTools.xml");
/* harmony import */ var _assets_DevTools_xml__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_assets_DevTools_xml__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _assets_DevTools_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../assets/DevTools.css */ "./packages/plugin-devtools/assets/DevTools.css");
/* harmony import */ var _assets_DevTools_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_assets_DevTools_css__WEBPACK_IMPORTED_MODULE_7__);








class DevTools extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            components: [
                {
                    id: 'devTools',
                    async render() {
                        return [new _plugin_owl_src_ui_OwlNode__WEBPACK_IMPORTED_MODULE_2__["OwlNode"](_components_DevToolsComponent__WEBPACK_IMPORTED_MODULE_3__["DevToolsComponent"], {})];
                    },
                },
            ],
            componentZones: [['devTools', 'debug']],
            owlTemplates: [_assets_DevTools_xml__WEBPACK_IMPORTED_MODULE_6___default.a],
        };
    }
}
DevTools.dependencies = [_plugin_owl_src_Owl__WEBPACK_IMPORTED_MODULE_1__["Owl"], _plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_4__["Html"], _plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_5__["DomLayout"]];


/***/ }),

/***/ "./packages/plugin-devtools/src/components/CommandsComponent.ts":
/*!**********************************************************************!*\
  !*** ./packages/plugin-devtools/src/components/CommandsComponent.ts ***!
  \**********************************************************************/
/*! exports provided: CommandsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommandsComponent", function() { return CommandsComponent; });
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../plugin-keymap/src/Keymap */ "./packages/plugin-keymap/src/Keymap.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./packages/plugin-devtools/src/utils.ts");




class CommandsComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__["OwlComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            currentTab: 'queue',
            registry: this.env.editor.dispatcher.commands,
            selectedCommandIndex: null,
            selectedCommandIdentifier: null,
            selectedCommandImplementationIndex: null,
        };
        this.localStorage = ['currentTab'];
        this.argsRepr = _utils__WEBPACK_IMPORTED_MODULE_3__["argsRepr"];
        this.stringifyPattern = this.env.editor.plugins.get(_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_2__["Keymap"]).stringifyPattern;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Take a payload value and format it for display (mostly to ensure that
     * we can display it properly as a string).
     *
     * @param value
     */
    formatPayloadValue(value) {
        if (value && value instanceof Node && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["nodeName"])(value)) {
            return '<' + Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["nodeName"])(value).toLowerCase() + '>';
        }
        return '' + value;
    }
    /**
     * Handle keydown event to navigate in the command stack.
     */
    onKeydown(event) {
        if (this.state.currentTab === 'queue') {
            if (event.code === 'ArrowDown') {
                this.state.selectedCommandIndex = Math.max(this.state.selectedCommandIndex - 1, 0);
            }
            else if (event.code === 'ArrowUp') {
                this.state.selectedCommandIndex = Math.min(this.state.selectedCommandIndex + 1, this.props.commands.length - 1);
            }
            else {
                return;
            }
        }
        else if (this.state.currentTab === 'registry') {
            const identifiers = Object.keys(this.state.registry).sort();
            const currentIndex = identifiers.indexOf(this.state.selectedCommandIdentifier);
            if (event.code === 'ArrowDown') {
                this.state.selectedCommandIdentifier =
                    identifiers[Math.min(currentIndex + 1, identifiers.length - 1)];
            }
            else if (event.code === 'ArrowUp') {
                this.state.selectedCommandIdentifier = identifiers[Math.max(currentIndex - 1, 0)];
            }
            else {
                return;
            }
        }
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    /**
     * Open the tab with the given tabName.
     *
     * @param tabName
     */
    openTab(tabName) {
        this.state.currentTab = tabName;
    }
    /**
     * Select the command at given index.
     *
     * @param index
     */
    selectCommandByIndex(index) {
        this.state.selectedCommandIndex = index;
        this.state.selectedCommandIdentifier = this.props.commands[index][0];
    }
    /**
     * Select the command with given identifier.
     *
     * @param commandIdentifier
     */
    selectCommand(commandIdentifier) {
        this.state.selectedCommandIdentifier = commandIdentifier;
    }
    /**
     * Return the key mappings matching the given command identifier.
     *
     * @param commandIdentifier
     */
    matchingMappings(commandIdentifier) {
        return this.env.editor.plugins
            .get(_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_2__["Keymap"])
            .mappings.flat()
            .filter(mapping => mapping.configuredCommand.commandId === commandIdentifier);
    }
}


/***/ }),

/***/ "./packages/plugin-devtools/src/components/DevToolsComponent.ts":
/*!**********************************************************************!*\
  !*** ./packages/plugin-devtools/src/components/DevToolsComponent.ts ***!
  \**********************************************************************/
/*! exports provided: DevToolsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DevToolsComponent", function() { return DevToolsComponent; });
/* harmony import */ var _CommandsComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CommandsComponent */ "./packages/plugin-devtools/src/components/CommandsComponent.ts");
/* harmony import */ var _InspectorComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InspectorComponent */ "./packages/plugin-devtools/src/components/InspectorComponent.ts");
/* harmony import */ var _ShortcutsComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ShortcutsComponent */ "./packages/plugin-devtools/src/components/ShortcutsComponent.ts");
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _odoo_owl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @odoo/owl */ "./node_modules/@odoo/owl/dist/owl.js");
/* harmony import */ var _odoo_owl__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_odoo_owl__WEBPACK_IMPORTED_MODULE_5__);






class DevToolsComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_3__["OwlComponent"] {
    constructor() {
        super(...arguments);
        this.inspectorRef = _odoo_owl__WEBPACK_IMPORTED_MODULE_5__["hooks"].useRef('inspector');
        this.state = {
            closed: true,
            currentTab: 'inspector',
            height: 300,
            commands: [],
        };
        this.localStorage = ['closed', 'currentTab', 'height'];
    }
    async willStart() {
        this.env.editor.dispatcher.registerCommandHook('*', this.refresh.bind(this));
        return super.willStart();
    }
    willUnmount() {
        this.state.commands = [];
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Open the tab with the given `tabName`
     *
     * @param {string} tabName
     */
    openTab(tabName) {
        this.state.currentTab = tabName;
    }
    /**
     * Bind mouse handler to allow the selection of the node in the devtools inspector.
     * When the mouse will move, we add a class to highlight the targeted node (linked to VNode).
     * Will be unbind when the user click inside the dom.
     *
     * @param ev
     */
    inpectDom() {
        this.state.currentTab = 'inspector';
        this.inspectorRef.comp.inpectDom();
    }
    /**
     * Refresh this component with respect to the recent dispatching of the
     * given command with the given arguments.
     */
    refresh(params, id) {
        this.state.commands.push([id, params]);
        this.render();
    }
    /**
     * Drag the DevTools to resize them
     *
     * @param {MouseEvent} event
     */
    startResize(event) {
        event.preventDefault();
        this._heightOnLastMousedown = this.state.height;
        if (this.state.closed) {
            return; // Do not resize if the DevTools are closed
        }
        const startY = event instanceof MouseEvent ? event.pageY : event.targetTouches[0].pageY; // Y position of the mousedown
        /**
         * Perform the resizing on every mouse mouvement
         *
         * @param ev
         */
        const doResize = (ev) => {
            const currentY = ev instanceof MouseEvent ? ev.pageY : ev.targetTouches[0].pageY;
            const offset = startY - currentY;
            this.state.height = this._heightOnLastMousedown + offset;
        };
        /**
         * Stop resizing on mouse up
         */
        const stopResize = () => {
            window.removeEventListener('mousemove', doResize, false);
            window.removeEventListener('mouseup', stopResize, false);
            window.removeEventListener('touchmove', doResize, false);
            window.removeEventListener('touchend', stopResize, false);
        };
        window.addEventListener('mousemove', doResize);
        window.addEventListener('mouseup', stopResize);
        window.addEventListener('touchmove', doResize);
        window.addEventListener('touchend', stopResize);
    }
    /**
     * Toggle the `closed` state of the DevTools (only on a simple click: not
     * if some resizing occurred between mousedown and mouseup)
     */
    toggleClosed(event) {
        const didJustResize = this._heightOnLastMousedown !== this.state.height;
        const isOnButton = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["nodeName"])(event.target) === 'DEVTOOLS-BUTTON';
        if (!didJustResize && !(isOnButton && !this.state.closed)) {
            this.state.closed = !this.state.closed;
        }
    }
}
DevToolsComponent.components = {
    CommandsComponent: _CommandsComponent__WEBPACK_IMPORTED_MODULE_0__["CommandsComponent"],
    InspectorComponent: _InspectorComponent__WEBPACK_IMPORTED_MODULE_1__["InspectorComponent"],
    ShortcutsComponent: _ShortcutsComponent__WEBPACK_IMPORTED_MODULE_2__["ShortcutsComponent"],
};
DevToolsComponent.template = 'devtools';


/***/ }),

/***/ "./packages/plugin-devtools/src/components/InfoComponent.ts":
/*!******************************************************************!*\
  !*** ./packages/plugin-devtools/src/components/InfoComponent.ts ***!
  \******************************************************************/
/*! exports provided: InfoComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoComponent", function() { return InfoComponent; });
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");
/* harmony import */ var _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/src/VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");



class InfoComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__["OwlComponent"] {
    constructor() {
        super(...arguments);
        this.aboutMeProps = ['id', 'name', 'length', 'atomic', 'modifiers'];
        this.familyProps = ['parent', 'children', 'siblings'];
        this.customPropsBlacklist = this.aboutMeProps.concat(this.familyProps).concat(['childVNodes']);
        this.state = {
            currentTab: 'vNode',
        };
        this.localStorage = ['currentTab'];
    }
    /**
     * Open the tab with the given `tabName`
     *
     * @param {string} tabName
     */
    openTab(tabName) {
        this.state.currentTab = tabName;
    }
    /**
     * Trigger a 'node-selected' custom event
     * with the given `vNode` to select it
     *
     * @param {VNode} vNode
     */
    selectNode(vNode) {
        this.trigger('node-selected', {
            vNode: vNode,
        });
    }
    /**
     * Return the name of the class of the given VNode.
     *
     * @param vNode
     */
    className(vNode) {
        return vNode.constructor.name;
    }
    /**
     * Return a string representing the contents of a property of a VNode.
     *
     * @param vNode
     * @param propName
     */
    propRepr(vNode, propName) {
        let prop = vNode[propName];
        if (propName === 'atomic') {
            if (vNode.is(_core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_1__["AtomicNode"])) {
                return 'true';
            }
            else if (vNode.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_2__["ContainerNode"])) {
                return 'false';
            }
            else {
                return '?';
            }
        }
        else if (propName === 'modifiers') {
            if (!vNode.modifiers.length)
                return '[]';
            return `[ ${vNode.modifiers.map(m => m.toString()).join(', ')} ]`;
        }
        else {
            if ({}.toString.call(prop) === '[object Function]') {
                prop = vNode[propName]();
            }
            return this._propRepr(prop);
        }
    }
    /**
     * Return an object representing the given VNode's public properties as
     * alphabetically sorted pairs of key and value strings.
     *
     * @param vNode
     */
    nodeProperties(vNode) {
        return Object.keys(vNode)
            .filter(key => !key.startsWith('_') && !this.customPropsBlacklist.includes(key))
            .sort()
            .map(key => {
            return { key: key, value: this._propRepr(vNode[key]) };
        });
    }
    /**
     * Return the length of this node and all its descendents.
     *
     * @param __current
     */
    totalLength(vNode, __current = 0) {
        __current += vNode.length;
        vNode.children().forEach((child) => {
            if (child.hasChildren()) {
                __current = this.totalLength(child, __current);
            }
        });
        return __current;
    }
    /**
     * Log a `VNode` to the console.
     *
     * @param vNode
     */
    logVNode(vNode) {
        console.log(vNode);
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    _repr(vNode) {
        const nextSibling = vNode.nextSibling();
        const prevSibling = vNode.previousSibling();
        const position = nextSibling ? 'BEFORE' : prevSibling ? 'AFTER' : 'INSIDE';
        const reference = nextSibling || prevSibling || vNode.parent;
        if (reference) {
            return `${position} ${reference.id} (${reference.name})`;
        }
        else {
            return 'Not in VDocument';
        }
    }
    /**
     * Return a string representing the contents of a property of a VNode.
     *
     * @param vNode
     * @param propName
     */
    _propRepr(prop) {
        let value = '' + prop;
        if (typeof prop === 'object') {
            if (Array.isArray(prop) && !prop.length) {
                value = '[]';
            }
            else if (prop === null) {
                value = 'null';
            }
            else if (prop === undefined) {
                value = 'undefined';
            }
            else if (prop instanceof Set) {
                const items = [];
                prop.forEach(item => {
                    items.push(item);
                });
                value = items.join('\n');
            }
            else if (!prop || !Object.keys(prop).length) {
                value = '{}';
            }
            else if (prop.toString === {}.toString) {
                value = this._objectRepr(prop);
            }
        }
        else if (typeof prop === 'string') {
            value = '"' + value + '"';
        }
        return value;
    }
    /**
     * Return a string representing all key/value pairs of an object.
     *
     * @param vNode
     * @param propName
     */
    _objectRepr(obj) {
        return Object.keys(obj)
            .filter(key => key !== 'toString')
            .map(key => {
            return key + ': ' + obj[key];
        })
            .join('\n');
    }
}


/***/ }),

/***/ "./packages/plugin-devtools/src/components/InspectorComponent.ts":
/*!***********************************************************************!*\
  !*** ./packages/plugin-devtools/src/components/InspectorComponent.ts ***!
  \***********************************************************************/
/*! exports provided: InspectorComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InspectorComponent", function() { return InspectorComponent; });
/* harmony import */ var _InfoComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InfoComponent */ "./packages/plugin-devtools/src/components/InfoComponent.ts");
/* harmony import */ var _PathComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PathComponent */ "./packages/plugin-devtools/src/components/PathComponent.ts");
/* harmony import */ var _TreeComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TreeComponent */ "./packages/plugin-devtools/src/components/TreeComponent.ts");
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");
/* harmony import */ var _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");
/* harmony import */ var _utils_src_polyfill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../utils/src/polyfill */ "./packages/utils/src/polyfill.ts");
/* harmony import */ var _plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../plugin-char/src/CharNode */ "./packages/plugin-char/src/CharNode.ts");







const hoverStyle = 'box-shadow: inset 0 0 0 100vh rgba(95, 146, 204, 0.5); cursor: pointer;';
class InspectorComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_3__["OwlComponent"] {
    constructor(parent, props) {
        var _a;
        super(parent, props);
        this.domEngine = this.env.editor.plugins.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__["Layout"]).engines.dom;
        this._hoveredTargets = [];
        this.state = {
            selectedID: (_a = this.domEngine.components.get('editable')[0]) === null || _a === void 0 ? void 0 : _a.id,
        };
        this.selectedNode = this.getNode(this.state.selectedID);
        this._onInspectorMouseMove = this._onInspectorMouseMove.bind(this);
        this._onInspectorMouseLeave = this._onInspectorMouseLeave.bind(this);
        this._onInspectorMouseDown = this._onInspectorMouseDown.bind(this);
        this._onInspectorClick = this._onInspectorClick.bind(this);
    }
    willUnmount() {
        this._hoveredTargets = [];
        this.selectedNode = null;
    }
    /**
     * Handle keyboard navigation in DevTools (arrows to move in the tree)
     *
     * @param {KeyboardEvent} event
     */
    onKeydown(event) {
        const selected = this.getNode(this.state.selectedID);
        let newSelection;
        switch (event.code) {
            case 'ArrowDown':
                newSelection = selected.nextSibling() || selected.firstChild();
                break;
            case 'ArrowUp':
                newSelection = selected.previousSibling() || selected.parent;
                break;
            case 'ArrowLeft':
                newSelection = selected.previousSibling();
                break;
            case 'ArrowRight':
                newSelection = selected.nextSibling();
                break;
            default:
                return;
        }
        if (newSelection) {
            event.preventDefault();
            this.state.selectedID = newSelection.id;
            this.selectedNode = this.getNode(this.state.selectedID);
        }
    }
    /**
     * Handle the selection of a node. A subcomponent triggers a 'select-node'
     * custom event and this method listens to it, retrieves the `vNode` that it
     * passes in its `detail` key, and modifies its state to account for the
     * change in selection.
     *
     * @param {CustomEvent} event
     * @param {VNode} event.detail.vNode
     */
    selectNode(event) {
        this.state.selectedID = event.detail.vNode.id;
        this.selectedNode = this.getNode(this.state.selectedID);
    }
    getNode(id) {
        return this.domEngine.root.descendants(node => node.id === id)[0] || this.domEngine.root;
    }
    /**
     * Return the path between the given `vNode` and the root vNode, as an array
     * of VNode, sorted from the highest parent (the root) to the given vNode.
     *
     * @param {VNode} vNode
     * @returns {VNode []}
     */
    getPath(vNode) {
        const path = [vNode];
        let parent = vNode.parent;
        while (parent) {
            path.unshift(parent);
            parent = parent.parent;
        }
        return path;
    }
    patched() {
        super.patched();
        const selected = this.el.querySelector('.selected');
        if (selected) {
            //selected.scrollIntoView();
        }
    }
    /**
     * Bind mouse handler to allow the selection of the node in the devtools inspector.
     * When the mouse will move, we add a class to highlight the targeted node (linked to VNode).
     * Will be unbind when the user click inside the dom.
     *
     * @param ev
     */
    inpectDom() {
        window.addEventListener('mousemove', this._onInspectorMouseMove, true);
        window.addEventListener('mouseleave', this._onInspectorMouseLeave, true);
        window.addEventListener('mousedown', this._onInspectorMouseDown, true);
        window.addEventListener('click', this._onInspectorClick, true);
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Add a class to highlight the targeted node (like to VNode).
     *
     * @param ev
     */
    async _onInspectorMouseMove(ev) {
        ev.stopImmediatePropagation();
        ev.preventDefault();
        for (const inspected of this._hoveredTargets) {
            inspected.element.setAttribute('style', inspected.oldStyle);
        }
        this._hoveredTargets = [];
        const elements = [];
        for (const node of this._getNodeFromPosition(ev.clientX, ev.clientY)) {
            for (const domNode of this.domEngine.getDomNodes(node)) {
                const element = domNode instanceof HTMLElement ? domNode : domNode.parentElement;
                if (!elements.includes(element)) {
                    elements.push(element);
                }
            }
        }
        for (const element of elements) {
            const style = element.getAttribute('style') || '';
            this._hoveredTargets.push({
                element: element,
                oldStyle: style,
            });
            element.setAttribute('style', style + ';' + hoverStyle);
        }
    }
    /**
     * remove class to remove the highlight.
     *
     * @param ev
     */
    _onInspectorMouseLeave(ev) {
        ev.stopImmediatePropagation();
        ev.preventDefault();
        for (const inspected of this._hoveredTargets) {
            if (inspected.element === ev.target) {
                this._hoveredTargets.splice(this._hoveredTargets.indexOf(inspected), 1);
                inspected.element.setAttribute('style', inspected.oldStyle);
            }
        }
    }
    /**
     * Prevent default behavior (domEditable normalisation).
     *
     * @param ev
     */
    _onInspectorMouseDown(ev) {
        ev.stopImmediatePropagation();
        ev.preventDefault();
    }
    _getNodeFromPosition(clientX, clientY) {
        const caretPosition = Object(_utils_src_polyfill__WEBPACK_IMPORTED_MODULE_5__["caretPositionFromPoint"])(clientX, clientY);
        let node = caretPosition === null || caretPosition === void 0 ? void 0 : caretPosition.offsetNode;
        let nodes = [];
        while (!nodes.length && node) {
            nodes = this.domEngine.getNodes(node);
            node = node.parentNode;
        }
        if (nodes.length && nodes[0].is(_plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_6__["CharNode"]) && nodes[caretPosition.offset]) {
            return [nodes[caretPosition.offset]];
        }
        return nodes;
    }
    /**
     * Select the targeted node in the devtools inspector and unbind the mouse handler
     *
     * @param ev
     */
    async _onInspectorClick(ev) {
        window.removeEventListener('mousemove', this._onInspectorMouseMove, true);
        window.removeEventListener('mouseleave', this._onInspectorMouseLeave, true);
        window.removeEventListener('mousedown', this._onInspectorMouseDown, true);
        window.removeEventListener('click', this._onInspectorClick, true);
        ev.stopImmediatePropagation();
        ev.preventDefault();
        for (const inspected of this._hoveredTargets) {
            inspected.element.setAttribute('style', inspected.oldStyle);
        }
        this._hoveredTargets = [];
        const nodes = this._getNodeFromPosition(ev.clientX, ev.clientY);
        if (nodes.length) {
            this.state.selectedID = nodes[0].id;
            this.selectedNode = this.getNode(this.state.selectedID);
        }
    }
}
InspectorComponent.components = { InfoComponent: _InfoComponent__WEBPACK_IMPORTED_MODULE_0__["InfoComponent"], PathComponent: _PathComponent__WEBPACK_IMPORTED_MODULE_1__["PathComponent"], TreeComponent: _TreeComponent__WEBPACK_IMPORTED_MODULE_2__["TreeComponent"] };


/***/ }),

/***/ "./packages/plugin-devtools/src/components/PathComponent.ts":
/*!******************************************************************!*\
  !*** ./packages/plugin-devtools/src/components/PathComponent.ts ***!
  \******************************************************************/
/*! exports provided: PathComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathComponent", function() { return PathComponent; });
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");


class PathComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__["OwlComponent"] {
    getNodeRepr(vNode) {
        let repr = vNode.name || '?';
        for (const format of vNode.modifiers.filter(_plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_1__["Format"])) {
            repr += '.' + format.name;
        }
        return repr;
    }
    /**
     * Trigger a 'node-selected' custom event
     * with the given `vNode` to select it
     *
     * @param {VNode} vNode
     */
    selectNode(vNode) {
        this.trigger('node-selected', {
            vNode: vNode,
        });
    }
}


/***/ }),

/***/ "./packages/plugin-devtools/src/components/ShortcutsComponent.ts":
/*!***********************************************************************!*\
  !*** ./packages/plugin-devtools/src/components/ShortcutsComponent.ts ***!
  \***********************************************************************/
/*! exports provided: ShortcutsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShortcutsComponent", function() { return ShortcutsComponent; });
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");
/* harmony import */ var _plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-keymap/src/Keymap */ "./packages/plugin-keymap/src/Keymap.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./packages/plugin-devtools/src/utils.ts");



class ShortcutsComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_0__["OwlComponent"] {
    constructor() {
        super(...arguments);
        this.mappings = this.env.editor.plugins
            .get(_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_1__["Keymap"])
            .mappings.flat()
            .sort((a, b) => {
            if (a.configuredCommand.commandId < b.configuredCommand.commandId)
                return -1;
            if (a.configuredCommand.commandId > b.configuredCommand.commandId)
                return 1;
            return 0;
        });
        this.localStorage = ['currentTab'];
        this.argsRepr = _utils__WEBPACK_IMPORTED_MODULE_2__["argsRepr"];
        this.stringifyPattern = this.env.editor.plugins.get(_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_1__["Keymap"]).stringifyPattern;
    }
}


/***/ }),

/***/ "./packages/plugin-devtools/src/components/TreeComponent.ts":
/*!******************************************************************!*\
  !*** ./packages/plugin-devtools/src/components/TreeComponent.ts ***!
  \******************************************************************/
/*! exports provided: TreeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeComponent", function() { return TreeComponent; });
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");
/* harmony import */ var _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/src/VSelection */ "./packages/core/src/VSelection.ts");
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");





/**
 * Note: `TreeComponent` requires three properties passed by the parent
 *       Component (`DevToolsComponent`) via the template (see `DevTools.xml`):
 *       - vNode: VNode
 *       - isRoot: boolean
 *       - selectedID: number (the ID of the selected VNode)
 */
class TreeComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_1__["OwlComponent"] {
    constructor() {
        super(...arguments);
        // User-friendly representation of the node
        this._repr = this._getNodeRepr(this.props.vNode);
        this.state = {
            // Show the selected node and root by default
            folded: !this.props.isRoot && !this.props.selectedPath.includes(this.props.vNode),
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Update `state.folded` when `props.selectedPath` changes if `props.vNode`
     * is in `props.selectedPath`, unless it is the last item. Also update
     * `state.folded` for the ancestors of the selection marker nodes.
     */
    async willUpdateProps(nextProps) {
        // The selected node itself should stay folded even when selected. Only
        // the nodes in the path leading to it should actually be unfolded. By
        // construction, the last item of `selected path` is always the selected
        // node itself so it can safely be omitted from the check.
        const path = nextProps.selectedPath.slice(0, -1);
        if (path.some(node => node.id === nextProps.vNode.id)) {
            this.state.folded = false;
        }
        const selectionMarkersPath = this._getSelectionMarkersAncestors();
        if (selectionMarkersPath.has(nextProps.vNode.id)) {
            this.state.folded = false;
        }
    }
    /**
     * Handle a click event on a node of the tree: toggle its fold on click its
     * caret, select it otherwise
     *
     * @param {MouseEvent} event
     */
    onClickNode(event) {
        const didClickCaret = event.offsetX < 10;
        if (didClickCaret) {
            this.toggleFolded();
        }
        else {
            this.trigger('node-selected', {
                vNode: this.props.vNode,
            });
        }
    }
    onDblClickNode() {
        const location = {
            anchorNode: this.props.vNode,
            focusNode: this.props.vNode,
            direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__["Direction"].FORWARD,
        };
        this.env.editor.execCommand('setSelection', { vSelection: location });
    }
    /**
     * Handle folding/unfolding on press Enter
     *
     * @param {KeyboardEvent} event
     */
    onKeydown(event) {
        if (event.code === 'Enter') {
            event.preventDefault();
            this.toggleFolded();
            event.stopImmediatePropagation();
        }
    }
    repr() {
        if (this.props.vNode.tangible) {
            return this._repr;
        }
        else {
            // Representation of intangible nodes (e.g. markers) might change
            // depending on the context in which they are referenced, even
            // though they did not actually change per se.
            return this._getNodeRepr(this.props.vNode);
        }
    }
    /**
     * Unfold all of a node's direct ancestors on select it
     * TODO: find a way to do this cross-components
     *
     * @param {CustomEvent} event
     */
    selectNode(event) {
        if (event.detail.vNode.id !== this.props.vNode.id) {
            this.state.folded = false;
        }
    }
    /**
     * Toggle the `folded` propoerty of the state
     */
    toggleFolded() {
        this.state.folded = !this.state.folded;
    }
    /**
     * Return true if the given node has the given format.
     *
     * @param node
     */
    isFormat(node, formatName) {
        return node.is(_plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_3__["InlineNode"]) && !!node.modifiers.find(format => format.name === formatName);
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return a user-friendly representation of the node
     *
     * @param {VNode} node
     * @returns {string}
     */
    _getNodeRepr(node) {
        if (node === this.env.editor.selection.anchor) {
            return _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__["ANCHOR_CHAR"];
        }
        if (node === this.env.editor.selection.focus) {
            return _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__["FOCUS_CHAR"];
        }
        if (node.name) {
            return Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_0__["toUnicode"])(node.name).replace(/Node/, '');
        }
        return '?';
    }
    /**
     * Return a set of the IDs of all ancestors of both selection marker nodes.
     */
    _getSelectionMarkersAncestors() {
        const selectionMarkersAncestors = new Set();
        let ancestor = this.env.editor.selection.anchor.parent;
        while (ancestor) {
            selectionMarkersAncestors.add(ancestor.id);
            ancestor = ancestor.parent;
        }
        ancestor = this.env.editor.selection.focus.parent;
        while (ancestor) {
            selectionMarkersAncestors.add(ancestor.id);
            ancestor = ancestor.parent;
        }
        return selectionMarkersAncestors;
    }
}
// This is a recursive Component: each node of the tree is itself a tree
TreeComponent.components = { TreeComponent };


/***/ }),

/***/ "./packages/plugin-devtools/src/utils.ts":
/*!***********************************************!*\
  !*** ./packages/plugin-devtools/src/utils.ts ***!
  \***********************************************/
/*! exports provided: argsRepr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argsRepr", function() { return argsRepr; });
function argsRepr(args) {
    if (args === undefined)
        return '';
    return `{ ${Object.keys(args)
        .map(key => key + ': ' + args[key])
        .join(', ')} }`;
}


/***/ }),

/***/ "./packages/plugin-dialog/src/Dialog.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-dialog/src/Dialog.ts ***!
  \**********************************************/
/*! exports provided: Dialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dialog", function() { return Dialog; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _ui_DialogZoneHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/DialogZoneHtmlDomRenderer */ "./packages/plugin-dialog/src/ui/DialogZoneHtmlDomRenderer.ts");
/* harmony import */ var _ui_DialogZoneXmlDomParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/DialogZoneXmlDomParser */ "./packages/plugin-dialog/src/ui/DialogZoneXmlDomParser.ts");
/* harmony import */ var _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../plugin-dom-layout/src/DomLayout */ "./packages/plugin-dom-layout/src/DomLayout.ts");






class Dialog extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_ui_DialogZoneXmlDomParser__WEBPACK_IMPORTED_MODULE_3__["DialogZoneXmlDomParser"]],
            renderers: [_ui_DialogZoneHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["DialogZoneHtmlDomRenderer"]],
        };
    }
}
Dialog.dependencies = [_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"], _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_4__["Renderer"], _plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_5__["DomLayout"]];


/***/ }),

/***/ "./packages/plugin-dialog/src/ui/Dialog.css":
/*!**************************************************!*\
  !*** ./packages/plugin-dialog/src/ui/Dialog.css ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./Dialog.css */ "./node_modules/css-loader/dist/cjs.js!./packages/plugin-dialog/src/ui/Dialog.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);

var exported = content.locals ? content.locals : {};



module.exports = exported;

/***/ }),

/***/ "./packages/plugin-dialog/src/ui/Dialog.xml":
/*!**************************************************!*\
  !*** ./packages/plugin-dialog/src/ui/Dialog.xml ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<jw-dialog>\n    <jw-backdrop class=\"jw-close\"></jw-backdrop>\n    <jw-content>\n        <jw-button class=\"jw-close\">❌</jw-button>\n    </jw-content>\n</jw-dialog>\n"

/***/ }),

/***/ "./packages/plugin-dialog/src/ui/DialogZoneHtmlDomRenderer.ts":
/*!********************************************************************!*\
  !*** ./packages/plugin-dialog/src/ui/DialogZoneHtmlDomRenderer.ts ***!
  \********************************************************************/
/*! exports provided: DialogZoneHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogZoneHtmlDomRenderer", function() { return DialogZoneHtmlDomRenderer; });
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _DialogZoneNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DialogZoneNode */ "./packages/plugin-dialog/src/ui/DialogZoneNode.ts");
/* harmony import */ var _Dialog_xml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Dialog.xml */ "./packages/plugin-dialog/src/ui/Dialog.xml");
/* harmony import */ var _Dialog_xml__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Dialog_xml__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Dialog_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Dialog.css */ "./packages/plugin-dialog/src/ui/Dialog.css");
/* harmony import */ var _Dialog_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Dialog_css__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");






const container = document.createElement('jw-container');
container.innerHTML = _Dialog_xml__WEBPACK_IMPORTED_MODULE_3___default.a;
const dialog = container.firstElementChild;
class DialogZoneHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _DialogZoneNode__WEBPACK_IMPORTED_MODULE_2__["DialogZoneNode"];
    }
    async render(node) {
        const float = document.createElement('jw-dialog-container');
        for (const child of node.childVNodes) {
            if (!node.hidden.get(child)) {
                float.appendChild(await this._renderDialog(child));
            }
        }
        return float.childNodes.length ? [float] : [document.createDocumentFragment()];
    }
    async _renderDialog(node) {
        const clone = dialog.cloneNode(true);
        const content = clone.querySelector('jw-content');
        for (const domNode of await this.engine.render(node)) {
            content.appendChild(domNode);
        }
        let componentId;
        const components = this.engine.editor.plugins.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_5__["Layout"]).engines.dom.components;
        for (const [id, nodes] of components) {
            if (nodes.includes(node)) {
                componentId = id;
            }
        }
        clone.addEventListener('click', (ev) => {
            const target = ev.target;
            if (target.classList.contains('jw-close')) {
                this.engine.editor.execCommand('hide', { componentID: componentId });
            }
        });
        return clone;
    }
}
DialogZoneHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-dialog/src/ui/DialogZoneNode.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-dialog/src/ui/DialogZoneNode.ts ***!
  \*********************************************************/
/*! exports provided: DialogZoneNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogZoneNode", function() { return DialogZoneNode; });
/* harmony import */ var _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-layout/src/ZoneNode */ "./packages/plugin-layout/src/ZoneNode.ts");

class DialogZoneNode extends _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"] {
}


/***/ }),

/***/ "./packages/plugin-dialog/src/ui/DialogZoneXmlDomParser.ts":
/*!*****************************************************************!*\
  !*** ./packages/plugin-dialog/src/ui/DialogZoneXmlDomParser.ts ***!
  \*****************************************************************/
/*! exports provided: DialogZoneXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogZoneXmlDomParser", function() { return DialogZoneXmlDomParser; });
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _DialogZoneNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DialogZoneNode */ "./packages/plugin-dialog/src/ui/DialogZoneNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/src/utils */ "./packages/utils/src/utils.ts");




class DialogZoneXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'T-DIALOG';
        };
    }
    async parse(item) {
        const zones = [];
        for (const child of item.querySelectorAll('t[t-zone]')) {
            zones.push(child.getAttribute('t-zone'));
        }
        return [new _DialogZoneNode__WEBPACK_IMPORTED_MODULE_2__["DialogZoneNode"](zones)];
    }
}
DialogZoneXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-divider/src/Divider.ts":
/*!************************************************!*\
  !*** ./packages/plugin-divider/src/Divider.ts ***!
  \************************************************/
/*! exports provided: Divider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Divider", function() { return Divider; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _DividerXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DividerXmlDomParser */ "./packages/plugin-divider/src/DividerXmlDomParser.ts");


class Divider extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_DividerXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["DividerXmlDomParser"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-divider/src/DividerNode.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-divider/src/DividerNode.ts ***!
  \****************************************************/
/*! exports provided: DividerNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DividerNode", function() { return DividerNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");

class DividerNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor() {
        super({ htmlTag: 'DIV' });
    }
}


/***/ }),

/***/ "./packages/plugin-divider/src/DividerXmlDomParser.ts":
/*!************************************************************!*\
  !*** ./packages/plugin-divider/src/DividerXmlDomParser.ts ***!
  \************************************************************/
/*! exports provided: DividerXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DividerXmlDomParser", function() { return DividerXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _DividerNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DividerNode */ "./packages/plugin-divider/src/DividerNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class DividerXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'DIV';
        };
    }
    async parse(item) {
        const divider = new _DividerNode__WEBPACK_IMPORTED_MODULE_2__["DividerNode"]();
        divider.modifiers.append(this.engine.parseAttributes(item));
        const nodes = await this.engine.parse(...item.childNodes);
        divider.append(...nodes);
        return [divider];
    }
}
DividerXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-dom-editable/src/DomEditable.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-dom-editable/src/DomEditable.ts ***!
  \*********************************************************/
/*! exports provided: DomEditable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomEditable", function() { return DomEditable; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-dom-layout/src/DomLayout */ "./packages/plugin-dom-layout/src/DomLayout.ts");
/* harmony import */ var _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/src/VSelection */ "./packages/core/src/VSelection.ts");
/* harmony import */ var _EventNormalizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventNormalizer */ "./packages/plugin-dom-editable/src/EventNormalizer.ts");
/* harmony import */ var _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");








class DomEditable extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor(editor, configuration) {
        super(editor, configuration);
        this.loadables = {
            renderers: [],
            components: [
                {
                    id: 'editable',
                    render: async () => {
                        const parseElement = this.configuration.source;
                        let root;
                        if (parseElement) {
                            const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__["Layout"]);
                            const domLayoutEngine = layout.engines.dom;
                            const node = await domLayoutEngine.parseElement(parseElement);
                            root = node[0];
                        }
                        else {
                            root = new _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_6__["VElement"]({ htmlTag: 'jw-editable' });
                            // Semantic elements are inline by default.
                            // We need to guarantee it's a block so it can contain
                            // other blocks.
                            root.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_7__["Attributes"]).set('style', 'display: block;');
                        }
                        root.editable = false;
                        root.breakable = false;
                        root.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_7__["Attributes"]).set('contentEditable', 'true');
                        if (!this.editor.selection.anchor.parent && this.configuration.autoFocus) {
                            this.editor.selection.setAt(root, _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_5__["RelativePosition"].INSIDE);
                        }
                        return [root];
                    },
                },
            ],
            componentZones: [['editable', 'main']],
        };
        this.commands = {
            selectAll: {
                handler: this.selectAll,
            },
        };
        this._processKeydown = this._processKeydown.bind(this);
    }
    async start() {
        this.eventNormalizer = new _EventNormalizer__WEBPACK_IMPORTED_MODULE_3__["EventNormalizer"](this._isInEditable.bind(this), this._onNormalizedEvent.bind(this));
        window.addEventListener('keydown', this._processKeydown);
    }
    async stop() {
        this.eventNormalizer.destroy();
        window.removeEventListener('keydown', this._processKeydown);
    }
    /**
     * Update the selection in such a way that it selects the entire document.
     *
     * @param params
     */
    selectAll() {
        const domEngine = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__["Layout"]).engines.dom;
        const editable = domEngine.components.get('editable')[0];
        this.editor.selection.set({
            anchorNode: editable.firstLeaf(),
            anchorPosition: _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_5__["RelativePosition"].BEFORE,
            focusNode: editable.lastLeaf(),
            focusPosition: _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_5__["RelativePosition"].AFTER,
            direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__["Direction"].FORWARD,
        });
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    _isInEditable(target) {
        const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__["Layout"]);
        const domLayoutEngine = layout.engines.dom;
        let nodes = domLayoutEngine.getNodes(target);
        while (!nodes.length && target) {
            if (target.previousSibling) {
                target = target.previousSibling;
            }
            else {
                target = target.parentNode;
            }
            nodes = domLayoutEngine.getNodes(target);
        }
        const node = nodes === null || nodes === void 0 ? void 0 : nodes.pop();
        const ancestorContentEditable = node === null || node === void 0 ? void 0 : node.closest(node => { var _a; return !!((_a = node.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_7__["Attributes"])) === null || _a === void 0 ? void 0 : _a.get('contentEditable')); });
        return ((ancestorContentEditable === null || ancestorContentEditable === void 0 ? void 0 : ancestorContentEditable.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_7__["Attributes"]).get('contentEditable')) === 'true');
    }
    /**
     * Handle the received signal and dispatch the corresponding editor command,
     * based on the user's configuration and context.
     *
     * @param action
     */
    _matchCommand(action) {
        switch (action.type) {
            case 'insertLineBreak':
                return ['insertLineBreak', {}];
            case 'insertText':
            case 'insertHtml': {
                const params = { text: action.text };
                return ['insertText', params];
            }
            case 'selectAll':
                return ['selectAll', {}];
            case 'setSelection': {
                const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__["Layout"]);
                const domLayoutEngine = layout.engines.dom;
                const vSelectionParams = {
                    vSelection: domLayoutEngine.parseSelection(action.domSelection),
                };
                return ['setSelection', vSelectionParams];
            }
            case 'insertParagraphBreak':
                return ['insertParagraphBreak', {}];
            case 'deleteWord':
                // TODO: extract range
                if (action.direction === _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__["Direction"].FORWARD) {
                    return ['deleteForward', { range: {} }];
                }
                else {
                    return ['deleteBackward', { range: {} }];
                }
            case 'deleteContent': {
                if (action.direction === _core_src_VSelection__WEBPACK_IMPORTED_MODULE_2__["Direction"].FORWARD) {
                    return ['deleteForward', {}];
                }
                else {
                    return ['deleteBackward', {}];
                }
            }
            default:
                break;
        }
    }
    /**
     * Handle the received signal and dispatch the corresponding editor command,
     * based on the user's configuration and context.
     *
     * @param batchPromise
     */
    async _onNormalizedEvent(batchPromise) {
        return this.editor.nextEventMutex(async () => {
            const batch = await batchPromise;
            let processed = false;
            if (batch.inferredKeydownEvent) {
                const domLayout = this.dependencies.get(_plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_1__["DomLayout"]);
                processed = !!(await domLayout.processKeydown(new KeyboardEvent('keydown', {
                    ...batch.inferredKeydownEvent,
                    key: batch.inferredKeydownEvent.key,
                    code: batch.inferredKeydownEvent.code,
                })));
            }
            if (!processed) {
                for (const action of batch.actions) {
                    try {
                        const commandSpec = this._matchCommand(action);
                        if (commandSpec) {
                            await this.editor.execCommand(...commandSpec);
                        }
                    }
                    catch (e) {
                        console.error('impossible to launch action', action);
                    }
                }
            }
        });
    }
    /**
     * In DomLayout, KeyboardEvent listener to be added to the DOM that calls
     * `execCommand` if the keys pressed match one of the shortcut registered
     * in the keymap.
     * In case of the keydow are defaultPrevented it's means we executed a new
     * command. We split the event agragation of normalizer to ensure to have
     * the next execCommand at the right time.
     *
     * @param event
     */
    _processKeydown(event) {
        if (event.defaultPrevented) {
            this.eventNormalizer.initNextObservation();
        }
    }
}
DomEditable.dependencies = [_plugin_dom_layout_src_DomLayout__WEBPACK_IMPORTED_MODULE_1__["DomLayout"], _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_4__["Layout"]];


/***/ }),

/***/ "./packages/plugin-dom-editable/src/EventNormalizer.ts":
/*!*************************************************************!*\
  !*** ./packages/plugin-dom-editable/src/EventNormalizer.ts ***!
  \*************************************************************/
/*! exports provided: EventNormalizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventNormalizer", function() { return EventNormalizer; });
/* harmony import */ var _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VSelection */ "./packages/core/src/VSelection.ts");
/* harmony import */ var _MutationNormalizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MutationNormalizer */ "./packages/plugin-dom-editable/src/MutationNormalizer.ts");
/* harmony import */ var _utils_src_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/src/polyfill */ "./packages/utils/src/polyfill.ts");
/* harmony import */ var _utils_src_Dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/Dom */ "./packages/utils/src/Dom.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");





const navigationKey = new Set([
    'ArrowUp',
    'ArrowDown',
    'ArrowLeft',
    'ArrowRight',
    'PageUp',
    'PageDown',
    'End',
    'Home',
]);
const inputTypeCommands = new Set([
    'historyUndo',
    'historyRedo',
    'formatBold',
    'formatItalic',
    'formatUnderline',
    'formatStrikeThrough',
    'formatSuperscript',
    'formatSubscript',
    'formatJustifyFull',
    'formatJustifyCenter',
    'formatJustifyRight',
    'formatJustifyLeft',
    'formatIndent',
    'formatOutdent',
    'formatRemove',
    'formatSetBlockTextDirection',
    'formatSetInlineTextDirection',
    'formatBackColor',
    'formatFontColor',
    'formatFontName',
]);
/*
 * Regexp to test if a character is within an alphabet known by us.
 *
 * Note: Not all alphabets are taken into consideration and this RegExp is subject to be completed
 *       as more alphabets will be covered.
 *
 * Unicode range source:
 * - wikipedia
 * - google translate
 * - https://jrgraphix.net/r/Unicode/
 *
 * Tool to generate RegExp range:
 * - https://apps.timwhitlock.info/js/regex
 *
 * The strategy is to separate any word by selecting subsequent characters of a common alphabet.
 */
const alphabetsContainingSpaces = new RegExp('(' +
    [
        '[а-яА-ЯЀ-ӿԀ-ԯ]+',
        '[Ͱ-Ͼἀ-῾]+',
        '[\u0530-\u058F]+',
        '[\u0600-۾ݐ-ݾ\u08a0-\u08fe]+',
        '[\u0900-\u0DFF]+',
        '[a-zA-Z]+',
        '[a-zA-ZÀ-ÿ]+',
        '[a-zA-ZĀ-ſ]+',
        '[a-zA-Zƀ-ɏ]+',
    ].join('|') +
    ')$');
/**
 * These javascript event types might, in case of safari or spell-checking
 * keyboard, trigger dom events in multiple javascript stacks. They will require
 * to observe events during two ticks rather than after a single tick.
 */
const MultiStackEventTypes = ['input', 'compositionend', 'selectAll'];
/**
 * Create a promise that resolve once a timeout finish or when calling
 * `executeAndClear`.
 */
class Timeout {
    constructor(fn, interval = 0) {
        this.fn = fn;
        this.pending = true;
        this.promise = new Promise((resolve) => {
            this._resolve = resolve;
            this.id = window.setTimeout(() => {
                this.pending = false;
                resolve(fn());
            }, interval);
        });
    }
    fire(result) {
        clearTimeout(this.id);
        this.pending = false;
        if (result) {
            this._resolve(result);
        }
        else {
            this._resolve(this.fn());
        }
    }
}
/**
 * ## The problems the normalizer solve
 * Browser and virtual keyboards on mobile does not implement properly the w3c
 * contenteditable specification and are inconsistent.
 *
 * ## Goal of the normalizer
 * 1. Hook any change that happend in an element called the `editable`.
 * 2. Trigger the same event for the same action accross all browsers and
 *    devices.
 *
 * ## Strategy
 * Hook all javascript events that modify the `editable` element. Then, trigger
 * normalized events.
 *
 * ## How to use this normalizer?
 * 1. Javascript Events occurs
 * 2. Normalize javascript one or more `Event` to one or more
 *    `NormalizedAction`.
 * 3. Update our `VDocument` in regard of triggered normalized actions.
 * 4. Render what changed in the `VDocument` HTML in the `editable`.
 *
 * The normalizer does not preventDefault most of the change in the editable
 * happen (the exception for "paste" and "drop" javascript event).
 *
 *
 * ## Handeling javascript events
 * A javascript event is almost never prevented and almost always alter the
 * editable in the DOM.
 *
 * The reason that we do not prevent default is because we need more
 * informations. The information modified in the dom (by observing observing
 * mutations).
 *
 * There is an exception for the event 'paste' and 'drop'.
 *
 * The reason to preventDefault 'paste' is because most of the time, browsers
 * paste content that need to be cleaned. For that reason we prevent it from
 * being inserted in the editable element but the informations can be found in
 * the triggered normalized events actions.
 *
 * The reason to preventDefault 'drop' is because some browsers change page when
 * dropping an image or an url that comes from the address bar (e.g. chrome).
 *
 * ## Supported browser and virtual keyboard
 * - Mac
 *   - Chrome
 *   - Firefox
 *   - Edge
 *   - Safari
 * - Windows
 *   - Chrome
 *   - Firefox
 *   - Edge
 *   - Safari
 * - Linux
 *   - Chrome
 *   - Firefox
 * - Android
 *   - Chrome
 *   - Firefox
 *   - Google keyboard
 *   - Swift keyboard
 * - IOS
 *   - Safari
 *   - Chrome
 *   - Firefox
 */
class EventNormalizer {
    /**
     *
     * @param _isInEditable Callback to check if the node is in editable.
     * @param _triggerEventBatch Callback to trigger for each user action.
     */
    constructor(_isInEditable, _triggerEventBatch, root = document) {
        this._isInEditable = _isInEditable;
        this._triggerEventBatch = _triggerEventBatch;
        /**
         * Event listeners that are bound in the DOM by the normalizer on creation
         * and unbound on destroy.
         */
        this._eventListeners = [];
        /**
         * Cache the state of modifiers keys on each keystrokes.
         */
        this._modifierKeys = {
            ctrlKey: false,
            altKey: false,
            metaKey: false,
            shiftKey: false,
        };
        /**
         * Map of the shadow dom event normalizer.
         * If an event is triggered inside a shadow dom, we instanciate a new
         * EventNormalizer in the shadow dom.
         */
        this._shadowNormalizers = new Map();
        this.initNextObservation();
        // const document = this.editable.ownerDocument;
        this._bindEventInEditable(root, 'compositionstart', this._registerEvent);
        this._bindEventInEditable(root, 'compositionupdate', this._registerEvent);
        this._bindEventInEditable(root, 'compositionend', this._registerEvent);
        this._bindEventInEditable(root, 'beforeinput', this._registerEvent);
        this._bindEventInEditable(root, 'input', this._registerEvent);
        this._bindEvent(document, 'selectionchange', this._onSelectionChange);
        this._bindEventInEditable(root, 'contextmenu', this._onContextMenu);
        this._bindEvent(root, 'mousedown', this._onPointerDown);
        this._bindEvent(root, 'touchstart', this._onPointerDown);
        this._bindEvent(root, 'mouseup', this._onPointerUp);
        this._bindEvent(root, 'touchend', this._onPointerUp);
        this._bindEventInEditable(root, 'keydown', this._onKeyDownOrKeyPress);
        this._bindEventInEditable(root, 'keypress', this._onKeyDownOrKeyPress);
        this._bindEvent(root, 'onkeyup', this._updateModifiersKeys);
        this._bindEventInEditable(root, 'cut', this._onClipboard);
        this._bindEventInEditable(root, 'paste', this._onClipboard);
        this._bindEventInEditable(root, 'dragstart', this._onDragStart);
        this._bindEventInEditable(root, 'drop', this._onDrop);
        this._mutationNormalizer = new _MutationNormalizer__WEBPACK_IMPORTED_MODULE_1__["MutationNormalizer"](root instanceof Document ? root.body : root.lastElementChild);
    }
    /**
     * Called when destroy the event normalizer.
     * Remove all added handlers.
     *
     */
    destroy() {
        this._mutationNormalizer.destroy();
        this._unbindEvents();
        this._shadowNormalizers.forEach(eventNormalizer => eventNormalizer.destroy());
        this._triggerEventBatch = null;
        this._isInEditable = null;
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Bind the occurence of given even type on the given target element to the
     * given listener function. See _unbindEvents to unbind all events bound by
     * calling this function.
     *
     * @param target element on which to listen for events
     * @param type of the event to listen
     * @param listener to call when the even occurs on the target
     */
    _bindEvent(target, type, listener) {
        const boundListener = listener.bind(this);
        this._eventListeners.push({
            target: target,
            type: type,
            listener: boundListener,
        });
        target.addEventListener(type, boundListener, true);
    }
    /**
     * Filter event from editable.
     *
     * @see _bindEvent
     *
     * @param target element on which to listen for events
     * @param type of the event to listen
     * @param listener to call when the even occurs on the target
     */
    _bindEventInEditable(target, type, listener) {
        const boundListener = (ev) => {
            const eventTarget = 'target' in ev && ev.target;
            const shadowRoot = eventTarget instanceof Element && eventTarget.shadowRoot;
            if (shadowRoot) {
                if (!this._shadowNormalizers.get(shadowRoot)) {
                    const eventNormalizer = new EventNormalizer(this._isInEditable, this._triggerEventBatch, shadowRoot);
                    this._shadowNormalizers.set(shadowRoot, eventNormalizer);
                }
            }
            else if (!eventTarget || this._isInEditable(eventTarget)) {
                listener.call(this, ev);
            }
        };
        this._bindEvent(target, type, boundListener);
    }
    /**
     * Unbind all events bound by calls to _bindEvent.
     *
     */
    _unbindEvents() {
        this._eventListeners.forEach(({ target, type, listener }) => {
            target.removeEventListener(type, listener, true);
        });
    }
    /**
     * Register given event on the this.currentStackObservation._events queue. If the queue is not yet
     * initialized or has been cleared prior to this call, re-initialize it.
     * After a tick (setTimeout 0ms) the '_processEvents' method is called. All
     * events that happened during the tick are read from the queue and the
     * analysis tries to extract the actions desired by the user such as insert,
     * delete, backspace, spell checking, special characters, etc.
     *
     * @see _processEvents
     */
    _registerEvent(ev) {
        var _a, _b, _c;
        // See comment on `_keyboardSelectionTimeout`.
        if ((_a = this._keyboardSelectionTimeout) === null || _a === void 0 ? void 0 : _a.pending) {
            this._keyboardSelectionTimeout.fire();
        }
        // See comment on `_pointerSelectionTimeout`.
        if ((_b = this._pointerSelectionTimeout) === null || _b === void 0 ? void 0 : _b.pending) {
            this._pointerSelectionTimeout.fire();
        }
        const isNavigationEvent = ev instanceof KeyboardEvent && ev.type === 'keydown' && navigationKey.has(ev.key);
        if (isNavigationEvent) {
            // Manually triggering the processing of the current stack at this
            // point forces the rendering in the DOM of the result of the
            // observed events. This ensures that the new selection that is
            // eventually going to be set by the browser actually targets nodes
            // that are properly recognized in our abstration, which would not
            // be the case otherwise. See comment on `_stackTimeout`.
            if ((_c = this._stackTimeout) === null || _c === void 0 ? void 0 : _c.pending) {
                this._stackTimeout.fire();
            }
            // TODO: no rendering in editable can happen before the analysis of
            // the selection. There should be a mechanism here that can be used
            // by the normalizer to block the rendering until this resolves.
            this._keyboardSelectionTimeout = new Timeout(async () => {
                const setSelectionAction = {
                    type: 'setSelection',
                    domSelection: this._getSelection(),
                };
                return { actions: [setSelectionAction], mutatedElements: new Set([]) };
            });
            this._triggerEventBatch(this._keyboardSelectionTimeout.promise);
            this.initNextObservation();
        }
        else {
            if (this.currentStackObservation._events.length === 0) {
                // The queue is not initialized or has been reset, so this is a
                // new user action. Re-initialize the queue such that the
                // analysis is not polluted by previous observations.
                // this.initNextObservation();
                const stack = this.currentStackObservation;
                // Start observing mutations.
                this._mutationNormalizer.start();
                // All events of this tick will be processed in the next one.
                this._stackTimeout = new Timeout(() => {
                    return this._processEvents(stack);
                });
                this._triggerEventBatch(this._stackTimeout.promise);
            }
            // It is possible to have multiples keys that must trigger multiples
            // times that are being push in the same tick. To be able to handle
            // this case in `_processEvents`, we aggregate the informations in
            // `_multiKeyStack`.
            if (['keydown', 'keypress', 'input'].includes(ev.type)) {
                // In the multiple key case, a 'keydown' is always the first
                // event triggered between the three (keydown, keypress, input).
                // So we create a new map each time a 'keydown' is registred.
                if (ev.type === 'keydown') {
                    this.currentStackObservation._multiKeyStack.push({});
                }
                const lastMultiKeys = this.currentStackObservation._multiKeyStack[this.currentStackObservation._multiKeyStack.length - 1];
                if (lastMultiKeys) {
                    lastMultiKeys[ev.type] = ev;
                }
            }
            this.currentStackObservation._eventsMap[ev.type] = ev;
            if (ev.type.startsWith('composition')) {
                // In most cases we only need the last composition of the
                // registred events
                this.currentStackObservation._eventsMap.lastComposition = ev;
            }
            this.currentStackObservation._events.push(ev);
        }
    }
    /**
     * This function is the root of the normalization for most events.
     *
     * Process the events registered with `_regiterEvent` and call
     * `_triggerEventBatch` with one or more `NormalizedEvent` when sufficient
     * information has been gathered from all registred events.
     *
     * It could take up to two tick in the browser to gather all the sufficient
     * information. (e.g. Safari)
     *
     */
    /**
     * In some cases, the observation must be delayed to the next tick. In these
     * cases, this control variable will be set to true such that the analysis
     * process knows the current event queue processing has been delayed.
     */
    async _processEvents(currentStackObservation, secondTickObservation = false) {
        // In some cases, for example cutting with Cmd+X on Safari, the browser
        // triggers events in two different stacks. In such cases, observing
        // events occuring during one tick is not enough so we need to delay the
        // analysis after we observe events during two ticks instead.
        const needSecondTickObservation = currentStackObservation._events.every(ev => {
            return !MultiStackEventTypes.includes(ev.type);
        });
        if (needSecondTickObservation && !secondTickObservation) {
            return await new Promise((resolve) => {
                setTimeout(() => {
                    resolve(this._processEvents(currentStackObservation, true));
                });
            });
        }
        let normalizedActions = [];
        const keydownEvent = currentStackObservation._eventsMap.keydown;
        const keypressEvent = currentStackObservation._eventsMap.keypress;
        const inputEvent = currentStackObservation._eventsMap.input;
        const keyboardSelectAllEvent = currentStackObservation._eventsMap.keyboardSelectAll;
        const compositionEvent = currentStackObservation._eventsMap.lastComposition;
        const cutEvent = currentStackObservation._eventsMap.cut;
        const dropEvent = currentStackObservation._eventsMap.drop;
        const pasteEvent = currentStackObservation._eventsMap.paste;
        const compositionData = this._getCompositionData(compositionEvent, inputEvent);
        const isGoogleKeyboardBackspace = compositionData &&
            compositionData.compositionFrom.slice(0, -1) === compositionData.compositionTo &&
            keydownEvent &&
            keydownEvent.key === 'Unidentified';
        const inferredKeydownEvent = keydownEvent &&
            keydownEvent.key === 'Unidentified' &&
            this._inferKeydownEvent(inputEvent);
        //
        // First pass to get the informations
        //
        const key = (keypressEvent &&
            keypressEvent.key !== 'Unidentified' &&
            keypressEvent.key !== 'Dead' &&
            keypressEvent.key) ||
            (inputEvent &&
                inputEvent.data !== null &&
                inputEvent.data.length === 1 &&
                inputEvent.data) ||
            (keydownEvent &&
                keydownEvent.key !== 'Unidentified' &&
                keydownEvent.key !== 'Dead' &&
                keydownEvent.key) ||
            (isGoogleKeyboardBackspace && 'Backspace') ||
            (keydownEvent &&
                keydownEvent.key === 'Unidentified' &&
                inferredKeydownEvent &&
                inferredKeydownEvent.code);
        const inputType = (cutEvent && 'deleteByCut') ||
            (dropEvent && 'insertFromDrop') ||
            (pasteEvent && 'insertFromPaste') ||
            (inputEvent && inputEvent.inputType);
        // In case of accent inserted from a Mac, check that the char before was
        // one of the special accent temporarily inserted in the DOM (e.g. '^',
        // '`', ...).
        //
        const compositionReplaceOneChar = compositionData &&
            compositionData.compositionFrom.length === 1 &&
            compositionData.compositionTo.length === 1;
        const compositionAddOneChar = compositionData &&
            compositionData.compositionFrom === '' &&
            compositionData.compositionTo.length === 1;
        const isCompositionKeyboard = compositionAddOneChar || compositionReplaceOneChar;
        const isVirtualKeyboard = compositionEvent && key && key.length !== 1;
        // Compute the set of mutated elements accross all observed events.
        const mutatedElements = this._mutationNormalizer.getMutatedElements();
        this._mutationNormalizer.stop();
        // When the browser trigger multiples keydown at once, for each keydown
        // there is always also a keypress and an input that must be present.
        const possibleMultiKeydown = currentStackObservation._multiKeyStack.every(keydownMap => keydownMap.keydown &&
            keydownMap.keydown.key !== 'Unidentified' &&
            (keydownMap.input || keydownMap.keydown.key.length > 1));
        // if there is only one _multiKeyMap, it means that there is no
        // multiples keys pushed.
        if (currentStackObservation._multiKeyStack.length > 1 && possibleMultiKeydown) {
            currentStackObservation._multiKeyStack.map(keydownMap => {
                const keyboardAction = this._getKeyboardAction(keydownMap.keydown.key, (keydownMap.input && keydownMap.input.inputType) || '', !!mutatedElements.size);
                if (keyboardAction) {
                    normalizedActions.push(keyboardAction);
                }
            });
        }
        else if (cutEvent) {
            const deleteContentAction = {
                type: 'deleteContent',
                direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD,
            };
            // remove previously parsed keyboard action as we only want to remove
            normalizedActions.push(deleteContentAction);
        }
        else if (dropEvent) {
            normalizedActions.push(...this._getDropActions(dropEvent));
        }
        else if (pasteEvent) {
            normalizedActions.push(this._getDataTransferAction(pasteEvent));
        }
        else if (keyboardSelectAllEvent) {
            const selectAllAction = {
                type: 'selectAll',
            };
            normalizedActions.push(selectAllAction);
        }
        else if (normalizedActions.length === 0 &&
            ((!compositionEvent && key) || isCompositionKeyboard || isVirtualKeyboard)) {
            const keyboardAction = this._getKeyboardAction(key, inputType, !!mutatedElements.size);
            if (keyboardAction) {
                normalizedActions.push(keyboardAction);
            }
            if (compositionReplaceOneChar) {
                normalizedActions = compositionData.actions;
            }
        }
        else if (normalizedActions.length === 0 && compositionData) {
            normalizedActions.push(...compositionData.actions);
        }
        if (inputEvent && inputEvent.inputType && inputEvent.inputType.indexOf('format') === 0) {
            const formatName = inputEvent.inputType.replace('format', '').toLowerCase();
            const applyFormatAction = {
                type: 'applyFormat',
                format: formatName,
                data: inputEvent.data,
            };
            normalizedActions.push(applyFormatAction);
        }
        else if (inputEvent && ['historyUndo', 'historyRedo'].includes(inputEvent.inputType)) {
            const historyAction = {
                type: inputEvent.inputType,
            };
            normalizedActions.push(historyAction);
        }
        this.initNextObservation();
        if (normalizedActions.length > 0) {
            const batch = {
                actions: normalizedActions,
                mutatedElements,
            };
            if (inferredKeydownEvent) {
                batch.inferredKeydownEvent = inferredKeydownEvent;
            }
            return batch;
        }
        return { actions: [] };
    }
    /**
     * Set the next observation.
     */
    initNextObservation() {
        this._followsPointerAction = false;
        this.currentStackObservation = {
            _events: [],
            _multiKeyStack: [],
            _eventsMap: {},
        };
    }
    _getCompositionData(compositionEvent, inputEvent) {
        if (compositionEvent && inputEvent) {
            let compositionDataString = compositionEvent.data;
            // Specific case for SwiftKey. Swiftkey add a space in the
            // inputEvent but not in the composition event.
            const isSwiftKeyAutocorrect = inputEvent.inputType === 'insertText' &&
                inputEvent.data &&
                inputEvent.data.length === 1 &&
                inputEvent.data !== compositionDataString &&
                inputEvent.data === ' ';
            if (isSwiftKeyAutocorrect) {
                compositionDataString += ' ';
            }
            return this._getCompositionFromString(compositionDataString);
        }
        else if (inputEvent && inputEvent.inputType === 'insertReplacementText') {
            // safari trigger an input with 'insertReplacementText' when it
            // correct a word.
            return this._getCompositionFromString(inputEvent.data);
        }
    }
    /**
     * Infer a `KeyboardEvent` `code` from an `InputEvent`
     */
    _inferKeydownEvent(inputEvent) {
        let code;
        if (inputEvent.inputType === 'insertParagraph') {
            code = 'Enter';
        }
        else if (inputEvent.inputType === 'deleteContentBackward') {
            code = 'Backspace';
        }
        else if (inputEvent.inputType === 'deleteContentForward') {
            code = 'Delete';
        }
        if (code) {
            return {
                ...this._modifierKeys,
                key: code,
                code: code,
            };
        }
    }
    /**
     * Get a keyboard action if something has happned in the DOM (insert,
     * delete, navigation).
     *
     * @param key
     * @param inputType
     * @param hasMutataedElements
     * @param isMultiKey
     */
    _getKeyboardAction(key, inputType, hasMutatedElements) {
        const isInsertOrRemoveAction = hasMutatedElements && !inputTypeCommands.has(inputType);
        if (isInsertOrRemoveAction) {
            if (key === 'Backspace' || key === 'Delete') {
                return this._getRemoveAction(key, inputType);
            }
            else if (key === 'Enter') {
                if (inputType === 'insertLineBreak') {
                    const insertLineBreakAction = {
                        type: 'insertLineBreak',
                    };
                    return insertLineBreakAction;
                }
                else {
                    const insertParagraphAction = {
                        type: 'insertParagraphBreak',
                    };
                    return insertParagraphAction;
                }
            }
            else if (key.length === 1) {
                const insertTextAction = {
                    type: 'insertText',
                    text: key,
                };
                return insertTextAction;
            }
        }
    }
    /**
     * Get the actions for a event `ev` of type drop.
     *
     * @param ev
     */
    _getDropActions(ev) {
        const actions = [];
        if (ev.draggingFromEditable && !ev.files.length) {
            const selection = document.getSelection();
            if (!selection.isCollapsed) {
                const deleteContentAction = {
                    type: 'deleteContent',
                    direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD,
                };
                actions.push(deleteContentAction);
            }
        }
        const setSelectionAction = {
            type: 'setSelection',
            domSelection: ev.selection,
        };
        actions.push(setSelectionAction);
        actions.push(this._getDataTransferAction(ev));
        return actions;
    }
    /**
     * Extract informations from dataTranser to know what has been done in the
     * DOM and return it a normalizedAction.
     *
     * when drag and dropping, most browsers wrap the element with tags and
     * styles.  And when dropping in the (same or different) browser, there is
     * many differents behavior.
     *
     * Some browser reload the page when dropping (img or link (from status
     * bar)).  For this reason, we block all the content from being added in the
     * editable. (otherwise reloading happen).
     *
     * Note: The user can drag and drop a link or an img, from the browser
     * navigation bar.
     *
     */
    _getDataTransferAction(dataTransfer) {
        if (dataTransfer.files.length) {
            const insertFilesAction = {
                type: 'insertFiles',
                files: dataTransfer.files,
            };
            return insertFilesAction;
        }
        const uri = dataTransfer['text/uri-list'];
        // eslint-disable-next-line no-control-regex
        const html = dataTransfer['text/html'].replace(/\x00/g, ''); // replace for drag&drop from firefox to chrome
        const text = dataTransfer['text/plain'];
        if (html && uri) {
            const temp = document.createElement('temp');
            temp.innerHTML = html;
            const element = temp.querySelector('a, img');
            if (element) {
                if (!dataTransfer.draggingFromEditable &&
                    Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["nodeName"])(element) === 'A' &&
                    element.innerHTML === '') {
                    // add default content if it's external link
                    element.innerHTML = uri;
                }
                const insertHtmlAction = {
                    type: 'insertHtml',
                    html: element.outerHTML,
                    text: uri,
                };
                return insertHtmlAction;
            }
            else {
                const insertHtmlAction = {
                    type: 'insertHtml',
                    html: html,
                    text: uri,
                };
                return insertHtmlAction;
            }
        }
        else if (html) {
            const insertHtmlAction = {
                type: 'insertHtml',
                // Cross browser drag & drop will add useless meta tag at the
                // beginning of the html.
                html: html && html.replace(/^<meta[^>]+>/, ''),
                text: text,
            };
            return insertHtmlAction;
        }
        else if (uri) {
            const insertHtmlAction = {
                type: 'insertHtml',
                html: '<a href="' + uri + '">' + uri + '</a>',
                text: uri,
            };
            return insertHtmlAction;
        }
        else {
            const insertTextAction = {
                type: 'insertText',
                text: text,
            };
            return insertTextAction;
        }
    }
    /**
     * Process the composition to identify the text that was inserted.
     *
     * Attention, there is a case impossible to retrieve the complete
     * information. In the case of we don't have the event data and mutation
     * and we might have "a b" change from a composition to "a c". We receive
     * the word change "b" to "c" instead of "a b" to "a c".
     *
     */
    _getCompositionFromString(compositionData) {
        const charMap = this._mutationNormalizer.getCharactersMapping();
        // The goal of this function is to precisely find what was inserted by
        // a keyboard supporting spell-checking and suggestions.
        // Example (`|` represents the text cursor):
        //   Previous content: 'My friend Christofe| was here.'
        //   Current content:  'My friend Christophe Matthieu| was here.'
        //   Actual text inserted by the keyboard: 'Christophe Matthieu'
        let index = charMap.index;
        let insert = charMap.insert;
        let remove = charMap.remove;
        if (insert === remove && compositionData) {
            insert = compositionData;
            remove = compositionData;
        }
        // In mutation:
        // - we get the changes
        // - try to extract the word or a part of the word (with or without
        //   position)
        // - locate: where the change has been made
        const selection = this._getSelection();
        // if index === -1 it means we could not find the position in the mutated elements
        if (index === -1) {
            // It is possible that the index of the observed change are
            // undefined
            // Example (`|` represents the collapsed selection):
            //   Previous content: 'aa aa aa| aa aa'
            //   Current content:  'aa aa aa aa| aa aa'
            //   Actual text inserted by the keyboard: 'aa '
            //   Observed change:  'aa ]aa aa aa aa[ aa'
            // TODO CHM: the below min/max does not cover all cases
            // With most spell-checking mobile keyboards, the range is set right
            // after the inserted text. It can then be used as a marker to
            // identify the end of the change.
            let insertEnd = 0;
            // The text has been flattened in the characters mapping. When
            // the index of the node has been found, use the range offset
            // to find the index of the character proper.
            insertEnd += selection.focusOffset;
            index = insertEnd - insert.length;
        }
        else {
            let offset = index + insert.length - 1;
            if (charMap.current.nodes[offset] &&
                (selection.focusNode !== charMap.current.nodes[offset] ||
                    selection.focusOffset !== charMap.current.offsets[offset] + 1)) {
                offset++;
                while (charMap.current.nodes[offset] &&
                    (selection.focusNode !== charMap.current.nodes[offset] ||
                        selection.focusOffset > charMap.current.offsets[offset])) {
                    const text = charMap.current.chars[offset];
                    insert += text;
                    remove += text;
                    offset++;
                }
            }
        }
        const before = charMap.previous.chars.slice(0, index);
        const match = before.match(alphabetsContainingSpaces);
        if (match &&
            (insert === '' || alphabetsContainingSpaces.test(insert)) &&
            (remove === '' || alphabetsContainingSpaces.test(remove))) {
            // the word is write in a alphabet who contain space, search
            // to complete the change and include the rest of the word
            const beginWord = match[1];
            remove = beginWord + remove;
            insert = beginWord + insert;
            index -= beginWord.length;
            // Some virtual keyboards (e.g. SwiftKey) add a space at the end of
            // each composition such that the insert is ' '. We filter out those
            // events.
        }
        else if (compositionData &&
            insert &&
            (remove || insert !== ' ') &&
            compositionData !== insert) {
            const charIndex = compositionData.lastIndexOf(insert);
            if (charIndex !== -1) {
                index -= charIndex;
                insert = compositionData;
                const len = remove.length + charIndex;
                remove = charMap.previous.chars.slice(index, index + len + 1);
            }
        }
        // Trim the trailing space added by some virtual keyboards (e.g.
        // SwiftKey).
        const removedEndSpace = remove[remove.length - 1] === ' ';
        const insertedEndSpace = insert[insert.length - 1] === ' ';
        let rawRemove = remove;
        let rawInsert = insert;
        if (insertedEndSpace && removedEndSpace) {
            rawRemove = rawRemove.slice(0, -1);
        }
        if (insertedEndSpace) {
            rawInsert = rawInsert.slice(0, -1);
        }
        const previousNodes = charMap.previous.nodes;
        const previousOffsets = charMap.previous.offsets;
        const lastPreviousNode = previousNodes[previousNodes.length - 1];
        const lastPreviousOffset = previousOffsets[previousOffsets.length - 1] + 1;
        const offsetEnd = index + rawRemove.length;
        const setSelectionAction = {
            type: 'setSelection',
            domSelection: {
                anchorNode: previousNodes[index] || lastPreviousNode,
                anchorOffset: index in previousOffsets ? previousOffsets[index] : lastPreviousOffset,
                focusNode: previousNodes[offsetEnd] || lastPreviousNode,
                focusOffset: offsetEnd in previousOffsets ? previousOffsets[offsetEnd] : lastPreviousOffset,
                direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD,
            },
        };
        const insertTextAction = {
            type: 'insertText',
            text: rawInsert,
        };
        const actions = [setSelectionAction, insertTextAction];
        if (insertedEndSpace) {
            if (removedEndSpace) {
                index += rawRemove.length;
                const setSelectionAction = {
                    type: 'setSelection',
                    domSelection: {
                        anchorNode: previousNodes[index],
                        anchorOffset: previousOffsets[index],
                        focusNode: previousNodes[offsetEnd],
                        focusOffset: previousOffsets[index + 1],
                        direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD,
                    },
                };
                actions.push(setSelectionAction);
            }
            const insertTextAction = {
                type: 'insertText',
                text: ' ',
            };
            actions.push(insertTextAction);
        }
        return {
            compositionFrom: remove,
            compositionTo: insert,
            actions: actions,
        };
    }
    /**
     * Process the given compiled event as a backspace/delete to identify the
     * text that was removed and return an array of the corresponding
     * NormalizedAction.
     *
     * In the case of cut event, the direction will be `Direction.FORWARD`.
     *
     */
    _getRemoveAction(key, inputType) {
        const direction = key === 'Backspace' ? _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].BACKWARD : _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD;
        // Get characterMapping to retrieve which word has been deleted.
        const characterMapping = this._mutationNormalizer.getCharactersMapping();
        const isSwiftKeyDeleteWord = (inputType === 'deleteContentForward' || inputType === 'deleteContentBackward') &&
            characterMapping.remove.length > 1;
        if (inputType === 'deleteWordForward' ||
            inputType === 'deleteWordBackward' ||
            isSwiftKeyDeleteWord) {
            const deleteWordAction = {
                type: 'deleteWord',
                direction: direction,
                text: characterMapping.remove,
            };
            return deleteWordAction;
        }
        if (inputType === 'deleteHardLineForward' ||
            inputType === 'deleteHardLineBackward' ||
            inputType === 'deleteSoftLineForward' ||
            inputType === 'deleteSoftLineBackward') {
            const deleteHardLineAction = {
                type: 'deleteHardLine',
                direction: direction,
                domSelection: {
                    anchorNode: characterMapping.previous.nodes[characterMapping.index],
                    anchorOffset: characterMapping.previous.offsets[characterMapping.index],
                    focusNode: characterMapping.previous.nodes[characterMapping.index + characterMapping.remove.length - 1],
                    focusOffset: characterMapping.previous.offsets[characterMapping.index + characterMapping.remove.length - 1] + 1,
                    direction: direction,
                },
            };
            return deleteHardLineAction;
        }
        const deleteContentAction = {
            type: 'deleteContent',
            direction: direction,
        };
        return deleteContentAction;
    }
    /**
     * Return true if the given node can be considered a textual node, that is
     * a text node or a BR node.
     *
     * @param node
     */
    _isTextualNode(node) {
        return node.nodeType === Node.TEXT_NODE || Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["nodeName"])(node) === 'BR';
    }
    /**
     * Get the current selection from the DOM. If there is no selection in the
     * DOM, return a fake one at offset 0 of the editable element.
     * If an event is given, then the selection must be at least partially
     * contained in the target of the event, otherwise it means it took no
     * part in it. In this case, return the caret position instead.
     *
     * @param [ev]
     */
    _getSelection(ev) {
        var _a;
        let selectionDescription;
        let target;
        let root;
        if (ev) {
            target = this._getEventTarget(ev);
            root = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["getDocument"])(target);
        }
        else if ((_a = this._initialCaretPosition) === null || _a === void 0 ? void 0 : _a.offsetNode) {
            root = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["getDocument"])(this._initialCaretPosition.offsetNode);
        }
        else {
            root = document;
        }
        const selection = root.getSelection();
        let forward;
        if (!selection || selection.rangeCount === 0) {
            // No selection in the DOM. Create a fake one.
            selectionDescription = {
                anchorNode: document.body,
                anchorOffset: 0,
                focusNode: document.body,
                focusOffset: 0,
                direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD,
            };
        }
        else {
            // The selection direction is sorely missing from the DOM api.
            const nativeRange = selection.getRangeAt(0);
            if (selection.anchorNode === selection.focusNode) {
                forward = selection.anchorOffset <= selection.focusOffset;
            }
            else {
                forward = selection.anchorNode === nativeRange.startContainer;
            }
            selectionDescription = {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset,
                direction: forward ? _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD : _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].BACKWARD,
            };
        }
        // If an event is given, then the range must be at least partially
        // contained in the target of the event, otherwise it means it took no
        // part in it. In this case, consider the caret position instead.
        // This can happen when target is an input or a contenteditable=false.
        if (target instanceof Node) {
            if (!target.contains(selectionDescription.anchorNode) &&
                !target.contains(selectionDescription.focusNode)) {
                const caretPosition = this._getEventCaretPosition(ev);
                selectionDescription = {
                    anchorNode: caretPosition.offsetNode,
                    anchorOffset: caretPosition.offset,
                    focusNode: caretPosition.offsetNode,
                    focusOffset: caretPosition.offset,
                    direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD,
                };
            }
        }
        return selectionDescription;
    }
    /**
     * Check if the given range is selecting the whole editable.
     *
     * @param selection
     */
    _isSelectAll(selection) {
        // The selection from the context menu or a shortcut never have
        // direction forward.
        if (selection.direction === _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].BACKWARD) {
            return false;
        }
        let startContainer = selection.anchorNode;
        let startOffset = selection.anchorOffset;
        let endContainer = selection.focusNode;
        let endOffset = selection.focusOffset;
        // The selection might still be on a node which has since been removed.
        let invalidStart = true;
        let domNode = startContainer;
        while (domNode && invalidStart) {
            if (domNode instanceof ShadowRoot) {
                domNode = domNode.host;
            }
            else if (document.body.contains(domNode)) {
                invalidStart = false;
            }
            else {
                domNode = domNode.parentNode;
            }
        }
        let invalidEnd = true;
        domNode = endContainer;
        while (domNode && invalidEnd) {
            if (domNode instanceof ShadowRoot) {
                domNode = domNode.host;
            }
            else if (document.body.contains(domNode)) {
                invalidEnd = false;
            }
            else {
                domNode = domNode.parentNode;
            }
        }
        const invalidSelection = invalidStart || invalidEnd;
        // The selection might be collapsed in which case there is no selection.
        const onlyOneNodeSelected = startContainer === endContainer;
        const noCharacterSelected = startOffset === endOffset;
        const isCollapsed = onlyOneNodeSelected && noCharacterSelected;
        // If the selection is invalid or the selection is collapsed, it
        // definitely does not correspond to a select all action.
        if (invalidSelection || isCollapsed) {
            return false;
        }
        [startContainer, startOffset] = Object(_utils_src_Dom__WEBPACK_IMPORTED_MODULE_3__["targetDeepest"])(startContainer, startOffset);
        [endContainer, endOffset] = Object(_utils_src_Dom__WEBPACK_IMPORTED_MODULE_3__["targetDeepest"])(endContainer, endOffset);
        if (startOffset !== 0 ||
            (endContainer.nodeType === Node.TEXT_NODE &&
                endOffset !== endContainer.textContent.length)) {
            return false;
        }
        // Look for visible nodes in editable that would be outside the selection.
        const startInside = this._isInEditable(startContainer);
        const endInside = this._isInEditable(endContainer);
        const startEdge = startInside && this._isAtVisibleEdge(startContainer, 'start');
        const endEdge = endInside && this._isAtVisibleEdge(endContainer, 'end');
        return (startEdge && endEdge) || (startEdge && !endInside) || (!startInside && endEdge);
    }
    /**
     * Return true if the given element is at the edge of the editable node in
     * the given direction. An element is considered at the edge of the editable
     * node if there is no other visible element in editable that is located
     * beyond it in the given direction.
     *
     * @param node to check whether it is at the visible edge
     * @param side from which to look for textual nodes ('start' or 'end')
     */
    _isAtVisibleEdge(node, side) {
        const element = node instanceof Element ? node : node.parentElement;
        const editable = element.closest('[contentEditable=true]');
        // Start from the top and do a depth-first search trying to find a
        // visible node that would be in editable and beyond the given element.
        let currentNode = editable;
        const child = side === 'start' ? 'firstChild' : 'lastChild';
        const sibling = side === 'start' ? 'nextSibling' : 'previousSibling';
        let crossVisible = false;
        while (currentNode) {
            if (currentNode === node) {
                // The element was reached without finding another visible node.
                return !crossVisible;
            }
            if (this._isTextualNode(currentNode) && this._isVisible(currentNode, editable)) {
                // There is a textual node in editable beyond the given element.
                crossVisible = true;
            }
            // Continue the depth-first search.
            if (currentNode[child]) {
                currentNode = currentNode[child];
            }
            else if (currentNode[sibling]) {
                currentNode = currentNode[sibling];
            }
            else if (currentNode.parentNode === editable) {
                // Depth-first search has checked all elements in editable.
                return true;
            }
            else {
                currentNode = currentNode.parentNode[sibling];
            }
        }
        return false;
    }
    /**
     * Determine if a node is considered visible.
     */
    _isVisible(el, editable) {
        if (el === document) {
            return false;
        }
        if (el === editable) {
            // The editable node was reached without encountering a hidden
            // container. The editable node is supposed to be visible.
            return true;
        }
        // A <br> element with no next sibling is never visible.
        if (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["nodeName"])(el) === 'BR' && !el.nextSibling) {
            return false;
        }
        const element = el.nodeType === Node.TEXT_NODE ? el.parentElement : el;
        const style = window.getComputedStyle(element);
        if (style.display === 'none' || style.visibility === 'hidden') {
            return false;
        }
        return this._isVisible(el.parentNode, editable);
    }
    /**
     * Return the node and offset targeted by a event, including if the target
     * is inside a shadow element
     *
     * @param ev
     */
    _getEventCaretPosition(ev) {
        const x = ev instanceof MouseEvent ? ev.clientX : ev.touches[0].clientX;
        const y = ev instanceof MouseEvent ? ev.clientY : ev.touches[0].clientY;
        let caretPosition = Object(_utils_src_polyfill__WEBPACK_IMPORTED_MODULE_2__["caretPositionFromPoint"])(x, y);
        if (!caretPosition || !this._isInEditable(caretPosition.offsetNode)) {
            caretPosition = { offsetNode: ev.target, offset: 0 };
        }
        return caretPosition;
    }
    /**
     * Use the position to get the target from the event (including the target
     * in shadow element)
     *
     * @param ev
     */
    _getEventTarget(ev) {
        const x = ev instanceof MouseEvent ? ev.clientX : ev.touches[0].clientX;
        const y = ev instanceof MouseEvent ? ev.clientY : ev.touches[0].clientY;
        return Object(_utils_src_polyfill__WEBPACK_IMPORTED_MODULE_2__["elementFromPoint"])(x, y) || ev.target;
    }
    //--------------------------------------------------------------------------
    // Handlers
    //--------------------------------------------------------------------------
    /**
     * Catch setSelection and selectAll actions
     *
     * @param {MouseEvent} ev
     */
    _onContextMenu(ev) {
        var _a;
        if ((_a = this._pointerSelectionTimeout) === null || _a === void 0 ? void 0 : _a.pending) {
            this._pointerSelectionTimeout.fire();
        }
        this._pointerSelectionTimeout = new Timeout(() => {
            if (!this._selectionHasChanged || this._currentlySelectingAll) {
                return { actions: [] };
            }
            this._initialCaretPosition = this._getEventCaretPosition(ev);
            const setSelectionAction = {
                type: 'setSelection',
                domSelection: this._getSelection(ev),
            };
            this._selectionHasChanged = false;
            return {
                actions: [setSelectionAction],
                mutatedElements: new Set([]),
            };
        });
        this._triggerEventBatch(this._pointerSelectionTimeout.promise);
        // The _clickedInEditable property is used to assess whether the user is
        // currently changing the selection by using the mouse. If the context
        // menu ends up opening, the user is definitely not selecting.
        this._mousedownInEditable = false;
    }
    /**
     * Catch Enter, Backspace, Delete and insert actions
     *
     * @param {KeyboardEvent} ev
     */
    _onKeyDownOrKeyPress(ev) {
        this._updateModifiersKeys(ev);
        this._registerEvent(ev);
        const selection = this._getSelection();
        const [offsetNode, offset] = Object(_utils_src_Dom__WEBPACK_IMPORTED_MODULE_3__["targetDeepest"])(selection.anchorNode, selection.anchorOffset);
        this._initialCaretPosition = { offsetNode, offset };
    }
    /**
     * Set internal properties of the pointer down event to retrieve them later
     * on when the user stops dragging its selection and the selection has
     * changed.
     *
     * @param {MouseEvent} ev
     */
    _onPointerDown(ev) {
        // Don't trigger events on the editable if the click was done outside of
        // the editable itself or on something else than an element.
        const target = this._getEventTarget(ev);
        if (target && this._isInEditable(target)) {
            this._mousedownInEditable = true;
            this._initialCaretPosition = this._getEventCaretPosition(ev);
            this._selectionHasChanged = false;
            this._followsPointerAction = true;
        }
        else {
            this._mousedownInEditable = false;
            this._initialCaretPosition = undefined;
        }
    }
    /**
     * Catch setSelection actions coming from clicks.
     *
     * @param ev
     */
    _onPointerUp(ev) {
        try {
            // Don't trigger events on the editable if the click was done outside of
            // the editable itself or on something else than an element.
            if (this._mousedownInEditable && ev.target instanceof Element) {
                // When the users clicks in the DOM, the range is set in the next
                // tick. The observation of the resulting range must thus be delayed
                // to the next tick as well. Store the data we have now before it
                // gets invalidated by the redrawing of the DOM.
                this._initialCaretPosition = this._getEventCaretPosition(ev);
                this._pointerSelectionTimeout = new Timeout(() => {
                    return this._analyzeSelectionChange(ev);
                });
                this._triggerEventBatch(this._pointerSelectionTimeout.promise);
            }
        }
        catch (e) {
            this._mousedownInEditable = false;
            this._initialCaretPosition = undefined;
        }
    }
    /**
     * Analyze a change of selection to trigger a pointer event for it.
     *
     * @param ev
     */
    _analyzeSelectionChange(ev) {
        const eventBatch = {
            actions: [],
            mutatedElements: new Set([]),
        };
        if (this._selectionHasChanged) {
            const setSelectionAction = {
                type: 'setSelection',
                domSelection: this._getSelection(ev),
            };
            eventBatch.actions.push(setSelectionAction);
        }
        return eventBatch;
    }
    /**
     * If the drag start event is observed by the normalizer, it means the
     * dragging started in the editable itself. It means the user is dragging
     * content around in the editable zone.
     *
     */
    _onDragStart() {
        this._draggingFromEditable = true;
    }
    /**
     * Convert the drop event into a custom pre-processed format in order to
     * store additional information that are specific to this point in time,
     * such as the current range and the initial caret position.
     *
     * In some browser we need to infer the drop from other events.
     *
     * Example of droppable object are file, text, url.
     *
     * Drop event can originate from another software, outside the editor zone
     * or inside the editor zone.
     *
     * @param ev
     */
    _onDrop(ev) {
        // Prevent default behavior (e.g. prevent file from being opened in the
        // current tab).
        ev.preventDefault();
        const transfer = ev.dataTransfer;
        const files = [];
        for (const item of transfer.items) {
            if (item.kind === 'file') {
                files.push(item.getAsFile());
            }
        }
        const caretPosition = this._getEventCaretPosition(ev);
        const dropEvent = {
            type: 'drop',
            'text/plain': transfer.getData('text/plain'),
            'text/html': transfer.getData('text/html'),
            'text/uri-list': transfer.getData('text/uri-list'),
            files: files,
            originalEvent: ev,
            selection: {
                anchorNode: caretPosition.offsetNode,
                anchorOffset: caretPosition.offset,
                focusNode: caretPosition.offsetNode,
                focusOffset: caretPosition.offset,
                direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_0__["Direction"].FORWARD,
            },
            caretPosition: caretPosition,
            draggingFromEditable: this._draggingFromEditable,
        };
        this._registerEvent(dropEvent);
        // Dragging is over, reset this property.
        this._draggingFromEditable = false;
    }
    /**
     * Convert the clipboard event into a custom pre-processed format in order
     * to store additional information that are specific to this point in time,
     * such as the current range and the initial caret position.
     *
     * @param ev
     */
    _onClipboard(ev) {
        if (ev.type === 'paste') {
            // Prevent the default browser wild pasting behavior.
            ev.preventDefault();
        }
        const clipboard = ev.clipboardData;
        const pasteEvent = {
            type: ev.type,
            'text/plain': clipboard.getData('text/plain'),
            'text/html': clipboard.getData('text/html'),
            'text/uri-list': clipboard.getData('text/uri-list'),
            files: [],
            originalEvent: ev,
            selection: this._getSelection(),
            caretPosition: this._initialCaretPosition,
            draggingFromEditable: false,
        };
        this._registerEvent(pasteEvent);
    }
    /**
     * Update the modifiers keys to know which modifiers keys are pushed.
     *
     * @param e
     */
    _updateModifiersKeys(e) {
        this._modifierKeys = {
            ctrlKey: e.ctrlKey,
            altKey: e.altKey,
            metaKey: e.metaKey,
            shiftKey: e.shiftKey,
        };
    }
    /**
     * On each change of selection, check if it might be a "selectAll" action.
     *
     * A "selectAll" action can be triggered by:
     * - The shortcut 'CTRL+A'
     * - A user mapping of the OS or browser
     * - From the context menu
     * - Programmatically
     */
    _onSelectionChange() {
        if (!this._initialCaretPosition) {
            // Filter the events because we can have some Shadow root and each
            // normaliser bind event on document.
            return;
        }
        const keydownEvent = this.currentStackObservation._eventsMap.keydown;
        const isNavEvent = keydownEvent instanceof KeyboardEvent &&
            keydownEvent.type === 'keydown' &&
            navigationKey.has(keydownEvent.key);
        if (isNavEvent) {
            const setSelectionAction = {
                type: 'setSelection',
                domSelection: this._getSelection(),
            };
            this.initNextObservation();
            this._triggerEventBatch(new Promise((resolve) => {
                setTimeout(() => {
                    resolve({ actions: [setSelectionAction] });
                });
            }));
        }
        else {
            this._selectionHasChanged = true;
            // This heuristic protects against a costly `_isSelectAll` call.
            const modifiedKeyEvent = this._modifierKeys.ctrlKey || this._modifierKeys.metaKey;
            const heuristic = modifiedKeyEvent || this._followsPointerAction;
            const isSelectAll = heuristic && this._isSelectAll(this._getSelection());
            if (isSelectAll && !this._currentlySelectingAll) {
                if (modifiedKeyEvent) {
                    // This select all was triggered from the keyboard. Add a
                    // fake selectAll event to the queue as a marker for
                    // `_processEvents` to register that a select all was
                    // triggered in this stack.
                    this._registerEvent(new CustomEvent('keyboardSelectAll'));
                }
                else {
                    // The target of the select all specifies where the user caret
                    // was when the select all was triggered.
                    const selectAllAction = {
                        type: 'selectAll',
                    };
                    // We did not find any case where a select all triggered
                    // from the mouse actually resulted in a mutation, so the
                    // mutation normalizer is not listnening in this case. If it
                    // happens to be insufficient later on, the mutated elements
                    // will need to be retrieved from the mutation normalizer.
                    this._triggerEventBatch(Promise.resolve({
                        actions: [selectAllAction],
                        mutatedElements: new Set(),
                    }));
                }
            }
            // Safari on MacOS triggers a selection change when pressing Ctrl
            // even though the selection did not actually change. This property
            // is used to store whether the current state is considered to be a
            // select all. The point is to avoid triggering a new event for a
            // selection change if everything was already selected beforehand.
            this._currentlySelectingAll = isSelectAll;
        }
    }
}


/***/ }),

/***/ "./packages/plugin-dom-editable/src/MutationNormalizer.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-dom-editable/src/MutationNormalizer.ts ***!
  \****************************************************************/
/*! exports provided: MutationNormalizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MutationNormalizer", function() { return MutationNormalizer; });
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");

class MutationNormalizer {
    constructor(el = document.body) {
        this._observer = new MutationObserver(this._onMutation.bind(this));
        this._observer.observe(el, {
            characterDataOldValue: true,
            characterData: true,
            childList: true,
            subtree: true,
        });
    }
    start() {
        this._listen = true;
        this._mutations = [];
    }
    /**
     * Extract a mapping of the separate characters, their corresponding text
     * nodes and their offsets in said nodes from the given node's subtree.
     *
     * @private
     * @param charMutations
     * @returns { previous, current }
     */
    getCharactersMapping() {
        const before = new Set();
        const add = new Set();
        const current = new Set();
        const textMutations = [];
        // Gather all modified nodes to notify the listener.
        function getSelfAndAllChildren(target) {
            const texts = [target];
            target.childNodes.forEach(target => {
                texts.push(...getSelfAndAllChildren(target));
            });
            return texts;
        }
        function isTextNode(target) {
            return target.nodeType === Node.TEXT_NODE || Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_0__["nodeName"])(target) === 'BR';
        }
        this._mutations.forEach(record => {
            const targetMutation = record.target;
            const targetIsAdded = add.has(targetMutation);
            if (!targetIsAdded) {
                before.add(targetMutation);
            }
            if (record.type === 'characterData') {
                current.add(targetMutation);
                textMutations.push({
                    target: targetMutation,
                    old: record.oldValue.replace(/\u00A0/g, ' '),
                    current: targetMutation.textContent.replace(/\u00A0/g, ' '),
                });
            }
            else {
                record.addedNodes.forEach(node => {
                    getSelfAndAllChildren(node).forEach(child => {
                        if (!before.has(child)) {
                            add.add(child);
                        }
                        current.add(child);
                        if (!isTextNode(child)) {
                            return;
                        }
                        textMutations.push({
                            target: child,
                            old: '',
                            current: child.nodeType === Node.TEXT_NODE
                                ? child.textContent.replace(/\u00A0/g, ' ')
                                : '\n',
                        });
                    });
                });
                record.removedNodes.forEach(node => {
                    getSelfAndAllChildren(node).forEach(child => {
                        if (current.has(child)) {
                            current.delete(child);
                        }
                        if (targetIsAdded) {
                            add.add(child);
                        }
                        if (!add.has(child)) {
                            before.add(child);
                        }
                        if (!isTextNode(child)) {
                            return;
                        }
                        textMutations.push({
                            target: child,
                            old: child.nodeType === Node.TEXT_NODE
                                ? child.textContent.replace(/\u00A0/g, ' ')
                                : '\n',
                            current: '',
                        });
                    });
                });
            }
        });
        const already = new Map();
        const charMutations = [];
        textMutations.forEach(textMutation => {
            const target = textMutation.target;
            let mutation = already.get(target);
            if (mutation) {
                if (current.has(target) && !mutation.current.length) {
                    mutation.current = textMutation.current;
                }
                return;
            }
            if (current.has(target)) {
                mutation = {
                    target: target,
                    old: before.has(target) ? textMutation.old : '',
                    current: textMutation.current,
                };
                charMutations.push(mutation);
            }
            else if (before.has(target)) {
                mutation = {
                    target: target,
                    old: textMutation.old,
                    current: '',
                };
                charMutations.push(mutation);
            }
            already.set(target, mutation);
        });
        const currentLinked = this._getCharLinked(charMutations, 'current');
        const previousLinked = this._getCharLinked(charMutations, 'old');
        const oldText = previousLinked.chars;
        const currentText = currentLinked.chars;
        if (oldText === currentText) {
            return {
                index: -1,
                insert: '',
                remove: '',
                previous: previousLinked,
                current: currentLinked,
            };
        }
        const changePosition = this._changedOffset(oldText, currentText);
        const minLength = Math.min(oldText.length, currentText.length);
        let insertByChange;
        const unknownPosition = changePosition.left > minLength - changePosition.right;
        if (unknownPosition) {
            const maxLength = Math.max(oldText.length, currentText.length);
            const len = maxLength - minLength;
            insertByChange = currentText.slice(currentText.length - changePosition.right);
            for (let k = 0; k + len < minLength; k++) {
                if (insertByChange[k - 1] === ' ') {
                    insertByChange = insertByChange.slice(k);
                    break;
                }
            }
            insertByChange = insertByChange.slice(0, len);
            return {
                index: -1,
                insert: insertByChange,
                remove: '',
                previous: previousLinked,
                current: currentLinked,
            };
        }
        else {
            insertByChange = currentText.slice(changePosition.left, currentText.length - changePosition.right);
        }
        let fineChangePosition;
        let insertedWordAnalysed;
        if (textMutations.length > 1) {
            let alreadyFound = false;
            for (let k = textMutations.length - 1; k >= 0; k--) {
                const charMutation = textMutations[k];
                if (charMutation.old.length >= charMutation.current.length) {
                    continue;
                }
                let currentChange;
                if (charMutation.old !== '') {
                    if (alreadyFound) {
                        continue;
                    }
                    const oldTextMutation = charMutation.old;
                    const currentTextMutation = charMutation.current;
                    const resMutation = this._changedOffset(oldTextMutation, currentTextMutation);
                    currentChange = currentTextMutation.slice(resMutation.left, currentTextMutation.length - resMutation.right);
                }
                else if (charMutation.current === currentText) {
                    continue;
                }
                else {
                    currentChange = charMutation.current;
                }
                const changeIndex = currentChange.indexOf(insertByChange);
                if (changeIndex === -1) {
                    continue;
                }
                const indexStart = currentText.indexOf(currentChange);
                const indexEnd = indexStart + currentChange.length;
                const rangeChangeStart = changePosition.left - changeIndex;
                const rangeChangeEnd = currentText.length - changePosition.right;
                if ((rangeChangeStart >= indexStart && rangeChangeStart < indexEnd) ||
                    (rangeChangeEnd > indexStart && rangeChangeEnd <= indexEnd) ||
                    (rangeChangeEnd >= indexEnd && rangeChangeStart <= indexStart)) {
                    fineChangePosition = {
                        left: indexStart,
                        right: currentText.length - indexEnd,
                    };
                    insertedWordAnalysed = currentChange;
                    alreadyFound = true;
                    if (charMutation.old === '') {
                        break;
                    }
                }
            }
        }
        if (typeof insertedWordAnalysed === 'undefined') {
            insertedWordAnalysed = insertByChange;
            let beforeIndex = insertedWordAnalysed.indexOf(insertByChange);
            if (insertByChange === '') {
                beforeIndex = insertedWordAnalysed.length;
            }
            else {
                beforeIndex = 0;
            }
            fineChangePosition = {
                left: changePosition.left - beforeIndex,
                right: changePosition.right,
            };
        }
        const removedWordAnalysed = oldText.slice(fineChangePosition.left, oldText.length - fineChangePosition.right);
        return {
            index: fineChangePosition.left,
            insert: insertedWordAnalysed,
            remove: removedWordAnalysed,
            previous: previousLinked,
            current: currentLinked,
        };
    }
    getMutatedElements() {
        const elements = new Set();
        this._mutations.forEach(MutationRecord => {
            if (MutationRecord.type === 'characterData') {
                elements.add(MutationRecord.target);
            }
            else {
                MutationRecord.addedNodes.forEach(target => elements.add(target));
                MutationRecord.removedNodes.forEach(target => elements.add(target));
            }
        });
        return elements;
    }
    stop() {
        this._listen = false;
    }
    /**
     * Called when destroy the mutation normalizer.
     * Remove all added handlers.
     *
     */
    destroy() {
        this._observer.disconnect();
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    _getCharLinked(charMutations, type) {
        const mapNodeValue = new WeakMap();
        const obj = {
            chars: '',
            nodes: [],
            offsets: [],
        };
        charMutations.forEach(charMutation => {
            mapNodeValue.set(charMutation.target, charMutation[type]);
            const len = charMutation[type].length;
            if (obj.nodes.length) {
                const charParented = new Set();
                let node = charMutation.target;
                while (node &&
                    (!(node instanceof Element) || !node.getAttribute('contentEditable'))) {
                    charParented.add(node);
                    node = node.parentNode;
                }
                let first = obj.nodes[0];
                while (first &&
                    (!(first instanceof Element) || !first.getAttribute('contentEditable'))) {
                    if (charParented.has(first.previousSibling)) {
                        obj.chars = charMutation[type] + obj.chars;
                        obj.nodes.unshift(...new Array(len).fill(charMutation.target));
                        obj.offsets.unshift(...Array(len).keys());
                        return;
                    }
                    first = first.parentNode;
                }
            }
            obj.chars += charMutation[type];
            obj.nodes.push(...new Array(len).fill(charMutation.target));
            obj.offsets.push(...Array(len).keys());
        });
        obj.chars = obj.chars.replace(/\u00A0/g, ' ');
        return obj;
    }
    _changedOffset(old, current) {
        // In the optimal case where both the range is correctly placed and the
        // data property of the composition event is correctly set, the above
        // analysis is capable of finding the precise text that was inserted.
        // However, if any of these two conditions are not met, the results
        // might be spectacularly wrong. For example, spell checking suggestions
        // on MacOS are displayed while hovering the mispelled word, regardless
        // of the current position of the range, and the correction does not
        // trigger an update of the range position either after correcting.
        // Example (`|` represents the text cursor):
        //   Previous content: 'My friend Christofe was here.|'
        //   Current content:  'My friend Christophe Matthieu was here.|'
        //   Actual text inserted by the keyboard: 'Christophe Matthieu'
        //   Result if data is set to 'Christophe' (length: 10): 'e was here'
        //   Result if data is not set (regardless of the range): ''
        //
        // Because the first analysis might not be enough in some cases, a
        // second analysis must be performed. This analysis aims at precisely
        // identifying the offset of the actual change in the text by comparing
        // the previous content with the current one from left to right to find
        // the start of the change and from right to left to find its end.
        // Example (`|` represents the text cursor):
        //   Previous content: 'My friend Christofe| was here.'
        //   Current content:  'My friend Christophe Matthieu| was here.'
        //   Observed change:  'My friend Christo[fe => phe Matthieu] was here.'
        //   Change offsets in the current content: {left: 17, right: 29}
        const oldText = old;
        const currentText = current;
        const maxLength = Math.max(oldText.length, currentText.length);
        let left = 0;
        for (; left < maxLength; left++) {
            if (oldText[left] !== currentText[left]) {
                break;
            }
        }
        let right = 0;
        for (; right < maxLength; right++) {
            if (oldText[oldText.length - 1 - right] !== currentText[currentText.length - 1 - right]) {
                break;
            }
        }
        return { left, right };
    }
    //--------------------------------------------------------------------------
    // Handlers
    //--------------------------------------------------------------------------
    _onMutation(mutationsList) {
        if (this._listen) {
            // we push the mutation because some browser (e.g. safari) separate mutations with
            // microtask.
            this._mutations.push(...mutationsList);
        }
    }
}


/***/ }),

/***/ "./packages/plugin-dom-layout/src/DomLayout.ts":
/*!*****************************************************!*\
  !*** ./packages/plugin-dom-layout/src/DomLayout.ts ***!
  \*****************************************************/
/*! exports provided: DomLayout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomLayout", function() { return DomLayout; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");
/* harmony import */ var _ui_DomLayoutEngine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/DomLayoutEngine */ "./packages/plugin-dom-layout/src/ui/DomLayoutEngine.ts");
/* harmony import */ var _plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../plugin-html/src/Html */ "./packages/plugin-html/src/Html.ts");
/* harmony import */ var _ui_ZoneHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/ZoneHtmlDomRenderer */ "./packages/plugin-dom-layout/src/ui/ZoneHtmlDomRenderer.ts");
/* harmony import */ var _ui_ZoneXmlDomParser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/ZoneXmlDomParser */ "./packages/plugin-dom-layout/src/ui/ZoneXmlDomParser.ts");
/* harmony import */ var _ui_LayoutContainerHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui/LayoutContainerHtmlDomRenderer */ "./packages/plugin-dom-layout/src/ui/LayoutContainerHtmlDomRenderer.ts");
/* harmony import */ var _plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../plugin-keymap/src/Keymap */ "./packages/plugin-keymap/src/Keymap.ts");










class DomLayout extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor(editor, configuration) {
        super(editor, configuration);
        this.loadables = {
            renderers: [_ui_ZoneHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_6__["ZoneHtmlDomRenderer"], _ui_LayoutContainerHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_8__["LayoutContainerHtmlDomRenderer"]],
            parsers: [_ui_ZoneXmlDomParser__WEBPACK_IMPORTED_MODULE_7__["ZoneXmlDomParser"]],
            layoutEngines: [],
            components: [],
        };
        this.loaders = {
            domLocations: this._loadComponentLocations,
        };
        this.commandHooks = {
            '*': this._redraw,
        };
        this.loadables.layoutEngines.push(_ui_DomLayoutEngine__WEBPACK_IMPORTED_MODULE_4__["DomLayoutEngine"]);
        this.processKeydown = this.processKeydown.bind(this);
    }
    async start() {
        var _a, _b;
        const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__["Layout"]);
        const domLayoutEngine = layout.engines.dom;
        for (const component of this.configuration.components || []) {
            domLayoutEngine.loadComponent(component);
        }
        const zones = {};
        for (const [id, zone] of this.configuration.componentZones || []) {
            zones[id] = zone;
        }
        domLayoutEngine.loadComponentZones(zones);
        this._loadComponentLocations(this.configuration.locations || []);
        domLayoutEngine.location = this.configuration.location;
        await domLayoutEngine.start();
        await ((_b = (_a = this.configuration).afterRender) === null || _b === void 0 ? void 0 : _b.call(_a));
        window.addEventListener('keydown', this.processKeydown, true);
    }
    async stop() {
        window.removeEventListener('keydown', this.processKeydown, true);
        const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__["Layout"]);
        const domLayoutEngine = layout.engines.dom;
        await domLayoutEngine.stop();
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * KeyboardEvent listener to be added to the DOM that calls `execCommand` if
     * the keys pressed match one of the shortcut registered in the keymap.
     *
     * @param event
     */
    async processKeydown(event) {
        const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__["Layout"]);
        const domLayoutEngine = layout.engines.dom;
        if (event.target && !domLayoutEngine.getNodes(event.target).length) {
            // Don't process keydown if the user is outside the current editor
            return;
        }
        const keymap = this.dependencies.get(_plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_9__["Keymap"]);
        const commands = keymap.match(event);
        const [command, context] = this.editor.contextManager.match(commands);
        if (command && command.commandId) {
            const params = { context, ...command.commandArgs };
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            this.editor.nextEventMutex(() => {
                return this.editor.execCommand(command.commandId, params);
            });
            return command.commandId;
        }
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    async _redraw() {
        var _a, _b;
        // console.log('domlayout redraws');
        // TODO update this method to use JSON renderer feature (update also show, hide, add, remove)
        const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__["Layout"]);
        const domLayoutEngine = layout.engines.dom;
        const editables = domLayoutEngine.components.get('editable');
        if (editables === null || editables === void 0 ? void 0 : editables.length) {
            await domLayoutEngine.redraw(editables[0]);
            await ((_b = (_a = this.configuration).afterRender) === null || _b === void 0 ? void 0 : _b.call(_a));
        }
        // console.log('this.configuration.afterRender:', this.configuration.afterRender);
    }
    _loadComponentLocations(locations) {
        const layout = this.dependencies.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__["Layout"]);
        const domLayoutEngine = layout.engines.dom;
        for (const [id, location] of locations) {
            domLayoutEngine.locations[id] = location;
        }
    }
}
DomLayout.dependencies = [_plugin_html_src_Html__WEBPACK_IMPORTED_MODULE_5__["Html"], _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"], _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_2__["Renderer"], _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__["Layout"], _plugin_keymap_src_Keymap__WEBPACK_IMPORTED_MODULE_9__["Keymap"]];


/***/ }),

/***/ "./packages/plugin-dom-layout/src/ui/DomLayoutEngine.ts":
/*!**************************************************************!*\
  !*** ./packages/plugin-dom-layout/src/ui/DomLayoutEngine.ts ***!
  \**************************************************************/
/*! exports provided: DomLayoutEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomLayoutEngine", function() { return DomLayoutEngine; });
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _plugin_layout_src_LayoutEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-layout/src/LayoutEngine */ "./packages/plugin-layout/src/LayoutEngine.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../plugin-layout/src/ZoneNode */ "./packages/plugin-layout/src/ZoneNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _core_src_VSelection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/src/VSelection */ "./packages/core/src/VSelection.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _LayoutContainerNode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./LayoutContainerNode */ "./packages/plugin-dom-layout/src/ui/LayoutContainerNode.ts");
/* harmony import */ var _DomMap__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DomMap */ "./packages/plugin-dom-layout/src/ui/DomMap.ts");










class DomLayoutEngine extends _plugin_layout_src_LayoutEngine__WEBPACK_IMPORTED_MODULE_1__["LayoutEngine"] {
    constructor() {
        super(...arguments);
        this.id = 'dom';
        this._domMap = new _DomMap__WEBPACK_IMPORTED_MODULE_9__["DomMap"]();
        // used only to develop and avoid wrong promise from commands
        this._currentlyRedrawing = false;
        this.renderingMap = {};
        this.locations = {};
        this.defaultRootComponent = {
            id: 'editor',
            render(editor) {
                const layout = '<jw-editor><t t-zone="main"/><t t-zone="default"/></jw-editor>';
                return editor.plugins.get(_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_2__["Parser"]).parse('text/html', layout);
            },
        };
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    async start() {
        for (const componentId in this.locations) {
            this.renderingMap[componentId] = [];
            this.componentZones[componentId] = 'root';
            if (!this.componentDefinitions[componentId]) {
                throw new Error('Layout component "' + componentId + '" not found.');
            }
        }
        if (!Object.values(this.componentZones).includes('root')) {
            this.componentDefinitions.editor = this.defaultRootComponent;
            this.componentZones.editor = 'root';
        }
        for (const componentId in this.componentDefinitions) {
            this._prepareLayoutContainerAndLocation(this.componentDefinitions[componentId]);
        }
        await super.start();
        await this.redraw();
    }
    async stop() {
        for (const componentId in this.componentDefinitions) {
            const location = this.locations[componentId];
            if (location) {
                const nodes = this.components.get(componentId);
                for (const node of nodes) {
                    const domNodes = this.getDomNodes(node);
                    if (location[1] === 'replace') {
                        // Undo the replace that was done by the layout engine.
                        let first = domNodes && domNodes[0];
                        if (!first) {
                            first = this.renderingMap[componentId][0];
                        }
                        if (first && first.parentNode) {
                            first.parentNode.insertBefore(location[0], first);
                        }
                    }
                    for (const domNode of domNodes) {
                        if (domNode.parentNode) {
                            domNode.parentNode.removeChild(domNode);
                        }
                    }
                }
            }
        }
        this._domMap.clear();
        this.renderingMap = {};
        this.location = null;
        this.locations = {};
        return super.stop();
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return the VNode(s) corresponding to the given DOM Node.
     *
     * @param Node
     */
    getNodes(domNode) {
        const nodes = this._domMap.fromDom(domNode) || [];
        return nodes.filter(node => !(node instanceof _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_4__["ZoneNode"]));
    }
    getDomNodes(node) {
        if (node instanceof _LayoutContainerNode__WEBPACK_IMPORTED_MODULE_8__["LayoutContainer"]) {
            return node.childVNodes.map(node => this.getDomNodes(node)).flat();
        }
        else {
            return this._domMap.toDom(node);
        }
    }
    /**
     * Redraw the layout component after insertion.
     * If the target zone is the root, prepare its location before redrawing.
     *
     * @override
     */
    async add(componentId, zoneId) {
        const nodes = await super.add(componentId, zoneId);
        // Filter out children of nodes that we are already going to redraw.
        const nodeToRedraw = nodes.filter(node => !node.ancestor(n => nodes.includes(n)));
        for (const node of nodeToRedraw) {
            // only used if the zone want to return a Node but hide the component (eg: a panel)
            await this.redraw(node);
        }
        return nodes;
    }
    /**
     * Redraw the layout component after removal.
     *
     * @override
     */
    async remove(componentId) {
        const zones = await super.remove(componentId);
        for (const zone of zones) {
            await this.redraw(zone);
        }
        return zones;
    }
    /**
     * Redraw the layout component after showing the component.
     *
     * @override
     */
    async show(componentId) {
        const nodes = await super.show(componentId);
        for (const node of nodes) {
            await this.redraw(node.ancestor(_plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_4__["ZoneNode"]));
        }
        return nodes;
    }
    /**
     * Redraw the layout component after hidding the component.
     *
     * @override
     */
    async hide(componentId) {
        const nodes = await super.hide(componentId);
        for (const node of nodes) {
            await this.redraw(node.ancestor(_plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_4__["ZoneNode"]));
        }
        return nodes;
    }
    async redraw(node) {
        // if (this._currentlyRedrawing) {
        //     throw new Error('Double redraw detected');
        // }
        if (this.editor.preventRenders.size)
            return;
        this._currentlyRedrawing = true;
        // Find the closest node that has already been rendered preciously.
        const nodeToRedraw = node === null || node === void 0 ? void 0 : node.closest(n => {
            const domNode = this._domMap.toDom(n).pop();
            return domNode === null || domNode === void 0 ? void 0 : domNode.ownerDocument.body.contains(domNode);
        });
        if (nodeToRedraw) {
            // redraw item
            const domNodeToRedraw = this._domMap.toDom(nodeToRedraw).pop();
            let componentIdentifier;
            for (const [componentId, nodes] of this.components) {
                if (nodes.includes(nodeToRedraw)) {
                    componentIdentifier = componentId;
                    break;
                }
            }
            if (this.locations[componentIdentifier]) {
                await this._renderNode(nodeToRedraw);
                await this._appendComponentInDom(componentIdentifier);
            }
            else {
                const parentNode = domNodeToRedraw.parentNode;
                const domNodes = await this._renderNode(nodeToRedraw);
                for (const domNode of domNodes) {
                    if (domNode !== domNodeToRedraw) {
                        if (!parentNode)
                            debugger;
                        parentNode.insertBefore(domNode, domNodeToRedraw);
                    }
                }
                const last = (domNodes === null || domNodes === void 0 ? void 0 : domNodes.length) && domNodes[domNodes.length - 1];
                if (last !== domNodeToRedraw) {
                    parentNode.removeChild(domNodeToRedraw);
                }
            }
        }
        else {
            // redraw all
            for (const componentId in this.locations) {
                const nodes = this.components.get(componentId);
                for (const node of nodes) {
                    await this._renderNode(node);
                }
                await this._appendComponentInDom(componentId);
            }
        }
        this._renderSelection();
        // this._currentlyRedrawing = false;
    }
    async parseElement(element) {
        const parser = this.editor.plugins.get(_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_2__["Parser"]);
        const domParserEngine = parser.engines['dom/html'];
        const parsedVNodes = await domParserEngine.parse(element);
        // Construct DOM map from the parsing in order to parse the selection.
        for (const node of parsedVNodes) {
            this._domMap.set(node, element);
        }
        for (const [domNode, nodes] of domParserEngine.parsingMap) {
            for (const node of nodes) {
                this._domMap.set(node, domNode);
            }
        }
        const domSelection = element.ownerDocument.getSelection();
        const anchorNode = domSelection.anchorNode;
        if (element === anchorNode || element.contains(anchorNode)) {
            const selection = this.parseSelection(domSelection);
            this.editor.selection.set(selection);
        }
        return parsedVNodes;
    }
    /**
     * Parse the dom selection into the description of a VSelection.
     *
     * @param selection
     * @param [direction]
     */
    parseSelection(selection) {
        const start = this._locate(selection.anchorNode, selection.anchorOffset);
        const end = this._locate(selection.focusNode, selection.focusOffset);
        const [startVNode, startPosition] = start;
        const [endVNode, endPosition] = end;
        let direction;
        if (selection instanceof Selection) {
            const domRange = selection.rangeCount && selection.getRangeAt(0);
            if (domRange.startContainer === selection.anchorNode &&
                domRange.startOffset === selection.anchorOffset) {
                direction = _core_src_VSelection__WEBPACK_IMPORTED_MODULE_6__["Direction"].FORWARD;
            }
            else {
                direction = _core_src_VSelection__WEBPACK_IMPORTED_MODULE_6__["Direction"].BACKWARD;
            }
        }
        else {
            direction = selection.direction;
        }
        return {
            anchorNode: startVNode,
            anchorPosition: startPosition,
            focusNode: endVNode,
            focusPosition: endPosition,
            direction: direction,
        };
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Render the given VSelection as a DOM selection in the given target.
     *
     * @param selection
     * @param target
     */
    _renderSelection() {
        const selection = this.editor.selection;
        const domNode = this._domMap.toDom(selection.anchor.parent)[0];
        if (!domNode) {
            return;
        }
        const document = domNode.ownerDocument;
        const anchor = this._getDomLocation(selection.anchor);
        const focus = this._getDomLocation(selection.focus);
        const domSelection = document.getSelection();
        if (domSelection.anchorNode === anchor[0] &&
            domSelection.anchorOffset === anchor[1] &&
            domSelection.focusNode === focus[0] &&
            domSelection.focusOffset === focus[1]) {
            return;
        }
        const domRange = domNode.ownerDocument.createRange();
        if (selection.direction === _core_src_VSelection__WEBPACK_IMPORTED_MODULE_6__["Direction"].FORWARD) {
            domRange.setStart(anchor[0], anchor[1]);
            domRange.collapse(true);
        }
        else {
            domRange.setEnd(anchor[0], anchor[1]);
            domRange.collapse(false);
        }
        domSelection.removeAllRanges();
        domSelection.addRange(domRange);
        domSelection.extend(focus[0], focus[1]);
    }
    async _appendComponentInDom(id) {
        var _a;
        let [target, position] = this.locations[id];
        const nodes = this.renderingMap[id];
        const first = nodes.find(node => node.parentNode && node.ownerDocument.body.contains(node));
        if (first === null || first === void 0 ? void 0 : first.previousSibling) {
            target = first.previousSibling;
            position = 'after';
        }
        else if ((_a = first === null || first === void 0 ? void 0 : first.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode) {
            target = first.parentNode;
            position = 'prepend';
        }
        else {
            let previous = id;
            while ((previous = this._getPreviousComponentId(previous))) {
                const last = this.renderingMap[previous][this.renderingMap[previous].length - 1];
                if (last && last.ownerDocument.body.contains(last)) {
                    target = last;
                    position = 'after';
                }
            }
        }
        if (position === 'after' && !target.parentNode) {
            throw new Error('Impossible to render a component after an element with no parent.');
        }
        if (position === 'replace' && !target.parentNode) {
            throw new Error('Impossible to replace an element without any parent.');
        }
        const domNodes = [];
        for (const node of this.components.get(id)) {
            domNodes.push(...this.getDomNodes(node));
        }
        if (!domNodes.length && this.locations[id][1] === 'replace') {
            throw new Error('Impossible to replace a element with an empty template.');
        }
        if (position === 'after') {
            if (target.nextSibling) {
                for (const domNode of domNodes) {
                    target.parentNode.insertBefore(domNode, target.nextSibling);
                }
            }
            else {
                for (const domNode of domNodes) {
                    target.parentNode.appendChild(domNode);
                }
            }
        }
        else if (position === 'prepend') {
            const firstChild = target.firstChild;
            for (const domNode of domNodes) {
                target.insertBefore(domNode, firstChild);
            }
        }
        else if (position === 'replace') {
            for (const domNode of domNodes) {
                target.parentNode.insertBefore(domNode, target);
            }
            target.parentNode.removeChild(target);
        }
        else {
            for (const domNode of domNodes) {
                target.appendChild(domNode);
            }
        }
        for (const node of this.renderingMap[id]) {
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
        this.renderingMap[id] = domNodes;
    }
    _getPreviousComponentId(id) {
        const [target, position] = this.locations[id];
        const locations = Object.values(this.locations);
        const componentIds = Object.keys(this.locations);
        const index = componentIds.indexOf(id);
        if (position === 'after') {
            for (let u = index - 1; u >= 0; u--) {
                const [otherTarget, otherPosition] = locations[u];
                if (target === otherTarget &&
                    (otherPosition === 'after' || otherPosition === 'replace')) {
                    return componentIds[u];
                }
            }
            for (let u = locations.length - 1; u > index; u--) {
                const [otherTarget, otherPosition] = locations[u];
                if (target === otherTarget && otherPosition === 'replace') {
                    return componentIds[u];
                }
            }
        }
        else if (position === 'replace') {
            for (let u = index - 1; u >= 0; u--) {
                const [otherTarget, otherPosition] = locations[u];
                if (target === otherTarget && otherPosition === 'replace') {
                    return componentIds[u];
                }
            }
        }
    }
    /**
     * Return a position in the VNodes as a tuple containing a reference
     * node and a relative position with respect to this node ('BEFORE' or
     * 'AFTER'). The position is always given on the leaf.
     *
     * @param container
     * @param offset
     */
    _locate(domNode, domOffset) {
        let forceAfter = false;
        let forcePrepend = false;
        let container = domNode.childNodes[domOffset] || domNode;
        let offset = container === domNode ? domOffset : 0;
        if (container === domNode && container.childNodes.length) {
            container = container.childNodes[container.childNodes.length - 1];
            offset = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["nodeLength"])(container);
            forceAfter = true;
        }
        while (!this.getNodes(container).length) {
            forceAfter = false;
            forcePrepend = false;
            if (container.previousSibling) {
                forceAfter = true;
                container = container.previousSibling;
                offset = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["nodeLength"])(container);
            }
            else {
                forcePrepend = true;
                offset = [].indexOf.call(container.parentNode.childNodes, container);
                container = container.parentNode;
            }
        }
        // When targetting the end of a node, the DOM gives an offset that is
        // equal to the length of the container. In order to retrieve the last
        // descendent, we need to make sure we target an existing node, ie. an
        // existing index.
        const isAfterEnd = offset >= Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["nodeLength"])(container);
        let index = isAfterEnd ? Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["nodeLength"])(container) - 1 : offset;
        // Move to deepest child of container.
        while (container.hasChildNodes()) {
            const child = container.childNodes[index];
            if (!this.getNodes(child).length) {
                break;
            }
            container = child;
            index = isAfterEnd ? Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["nodeLength"])(container) - 1 : 0;
            // Adapt the offset to be its equivalent within the new container.
            offset = isAfterEnd ? Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["nodeLength"])(container) : index;
        }
        const nodes = this.getNodes(container);
        // Get the VNodes matching the container.
        let reference;
        if (container.nodeType === Node.TEXT_NODE) {
            // The reference is the index-th match (eg.: text split into chars).
            reference = forceAfter ? nodes[nodes.length - 1] : nodes[index];
        }
        else {
            reference = nodes[0];
        }
        if (forceAfter) {
            return [reference, _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER];
        }
        if (forcePrepend && reference.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_7__["ContainerNode"])) {
            return [reference, _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].INSIDE];
        }
        return reference.locate(container, offset);
    }
    /**
     * Return the location in the DOM corresponding to the location in the
     * VDocument of the given VNode. The location in the DOM is expressed as a
     * tuple containing a reference Node and a relative position with respect to
     * the reference Node.
     *
     * @param node
     */
    _getDomLocation(node) {
        let reference = node.previousSibling();
        let position = _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER;
        if (reference) {
            reference = reference.lastLeaf();
        }
        else {
            reference = node.nextSibling();
            position = _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE;
            if (reference) {
                reference = reference.firstLeaf();
            }
        }
        if (!reference) {
            reference = node.parent;
            position = _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].INSIDE;
        }
        // If the given position is "before", the reference DOM Node is the first
        // DOM node matching the given VNode.
        // If the given position is "after", the reference DOM Node is the last DOM
        // node matching the given VNode.
        const locations = this._domMap.toDomPoint(reference);
        const locationIndex = position === _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].BEFORE ? 0 : locations.length - 1;
        let [domNode, offset] = locations[locationIndex];
        if (domNode.nodeType === Node.TEXT_NODE && offset === -1) {
            // This -1 is a hack to accomodate the VDocumentMap to the new
            // rendering process without altering it for the parser.
            offset = this._domMap.fromDom(domNode).indexOf(reference);
        }
        else if (position === _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].INSIDE && offset === -1) {
            offset = 0;
        }
        else {
            // Char nodes have their offset in the corresponding text nodes
            // registered in the map via `set` but void nodes don't. Their
            // location need to be computed with respect to their parents.
            const container = domNode.parentNode;
            offset = Array.prototype.indexOf.call(container.childNodes, domNode);
            domNode = container;
        }
        if (position === _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER) {
            // Increment the offset to be positioned after the reference node.
            offset += 1;
        }
        return [domNode, offset];
    }
    async _renderNode(node) {
        const renderer = this.editor.plugins.get(_plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_3__["Renderer"]);
        const domRendererEngine = renderer.engines['dom/html'];
        // Clear the rendering cache and update the rendering.
        domRendererEngine.renderings.clear();
        const domNodes = await domRendererEngine.render(node);
        // Put the rendered nodes into the map.
        let child = node.lastLeaf();
        while (child) {
            const renderings = domRendererEngine.renderings.get(child);
            if (renderings) {
                const rendering = renderings[renderings.length - 1];
                const renderedNodes = await rendering[1];
                // Remove from cache to update with the newest nodes.
                this._domMap.clear(child);
                // Add in cache.
                for (const domNode of renderedNodes) {
                    this._domMap.set(child, domNode, -1, 'unshift');
                }
            }
            child = child.previous();
        }
        return domNodes || [];
    }
    _prepareLayoutContainerAndLocation(componentDefinition) {
        const zone = this.componentZones[componentDefinition.id];
        if (zone === 'root') {
            // automatically wrap the child into a layoutContainer to keep location of all nodes
            // when update the template and redraw
            this.componentDefinitions[componentDefinition.id] = {
                id: componentDefinition.id,
                async render(editor) {
                    const nodes = await componentDefinition.render(editor);
                    const layoutContainer = new _LayoutContainerNode__WEBPACK_IMPORTED_MODULE_8__["LayoutContainer"]();
                    layoutContainer.append(...nodes);
                    return [layoutContainer];
                },
            };
            if (this.location) {
                if (!this.locations[componentDefinition.id]) {
                    this.locations[componentDefinition.id] = this.location;
                    this.renderingMap[componentDefinition.id] = [];
                }
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-dom-layout/src/ui/DomMap.ts":
/*!*****************************************************!*\
  !*** ./packages/plugin-dom-layout/src/ui/DomMap.ts ***!
  \*****************************************************/
/*! exports provided: DomMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomMap", function() { return DomMap; });
/* harmony import */ var _LayoutContainerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LayoutContainerNode */ "./packages/plugin-dom-layout/src/ui/LayoutContainerNode.ts");

class DomMap {
    constructor() {
        this._fromDom = new Map();
        this._toDom = new Map();
    }
    /**
     * Map the given VNode to its corresponding DOM Node and its offset in it.
     *
     * @param node
     * @param domNode
     * @param offset
     * @param method
     */
    set(node, domNode, offset = 0, method = 'push') {
        if (node instanceof _LayoutContainerNode__WEBPACK_IMPORTED_MODULE_0__["LayoutContainer"]) {
            return;
        }
        if (this._fromDom.has(domNode)) {
            const matches = this._fromDom.get(domNode);
            if (!matches.some((match) => match.id === node.id)) {
                matches[method](node);
            }
        }
        else {
            this._fromDom.set(domNode, [node]);
        }
        const locations = this._toDom.get(node) || [];
        locations.push([domNode, offset]);
        this._toDom.set(node, locations);
        // Set children.
        for (const renderedChild of domNode.childNodes) {
            const mapping = this.toDomPoint(node);
            if (!mapping) {
                this.set(node, renderedChild, -1, 'unshift');
            }
        }
    }
    /**
     * Return the VNode(s) corresponding to the given DOM Node.
     *
     * @param domNode
     */
    fromDom(domNode) {
        return this._fromDom.get(domNode);
    }
    /**
     * Return the array of tuple (node, number) corresponding to the given VNode.
     *
     * @param node
     */
    toDomPoint(node) {
        return this._toDom.get(node) || [];
    }
    /**
     * Return the DOM Node corresponding to the given VNode.
     *
     * @param node
     */
    toDom(node) {
        const domNodes = [];
        for (const point of this._toDom.get(node) || []) {
            domNodes.push(point[0]);
        }
        return domNodes;
    }
    /**
     * Clear the map of all correspondances.
     *
     * @param [node]
     */
    clear(node) {
        if (node) {
            for (const point of this._toDom.get(node) || []) {
                const nodes = this._fromDom.get(point[0]);
                const index = nodes.indexOf(node);
                if (index !== -1) {
                    nodes.splice(index, 0);
                }
                if (nodes.length === 0) {
                    this._fromDom.delete(point[0]);
                }
            }
            this._toDom.delete(node);
        }
        else {
            this._fromDom.clear();
            this._toDom.clear();
        }
    }
}


/***/ }),

/***/ "./packages/plugin-dom-layout/src/ui/LayoutContainerHtmlDomRenderer.ts":
/*!*****************************************************************************!*\
  !*** ./packages/plugin-dom-layout/src/ui/LayoutContainerHtmlDomRenderer.ts ***!
  \*****************************************************************************/
/*! exports provided: LayoutContainerHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutContainerHtmlDomRenderer", function() { return LayoutContainerHtmlDomRenderer; });
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _LayoutContainerNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LayoutContainerNode */ "./packages/plugin-dom-layout/src/ui/LayoutContainerNode.ts");



class LayoutContainerHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _LayoutContainerNode__WEBPACK_IMPORTED_MODULE_2__["LayoutContainer"];
    }
    async render(node) {
        if (node.hasChildren()) {
            const renderedChildren = await this.renderChildren(node);
            return renderedChildren.flat();
        }
        return [];
    }
}
LayoutContainerHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-dom-layout/src/ui/LayoutContainerNode.ts":
/*!******************************************************************!*\
  !*** ./packages/plugin-dom-layout/src/ui/LayoutContainerNode.ts ***!
  \******************************************************************/
/*! exports provided: LayoutContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutContainer", function() { return LayoutContainer; });
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");

class LayoutContainer extends _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__["ContainerNode"] {
    constructor() {
        super(...arguments);
        this.editable = false;
        this.breakable = false;
    }
}


/***/ }),

/***/ "./packages/plugin-dom-layout/src/ui/ZoneHtmlDomRenderer.ts":
/*!******************************************************************!*\
  !*** ./packages/plugin-dom-layout/src/ui/ZoneHtmlDomRenderer.ts ***!
  \******************************************************************/
/*! exports provided: ZoneHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZoneHtmlDomRenderer", function() { return ZoneHtmlDomRenderer; });
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../plugin-layout/src/ZoneNode */ "./packages/plugin-layout/src/ZoneNode.ts");



class ZoneHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_2__["ZoneNode"];
    }
    async render(node) {
        const renderedChildren = [];
        if (node.hasChildren()) {
            for (const child of node.childVNodes) {
                if (!node.hidden.get(child)) {
                    renderedChildren.push(...(await this.engine.render(child)));
                }
            }
        }
        return renderedChildren;
    }
}
ZoneHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-dom-layout/src/ui/ZoneXmlDomParser.ts":
/*!***************************************************************!*\
  !*** ./packages/plugin-dom-layout/src/ui/ZoneXmlDomParser.ts ***!
  \***************************************************************/
/*! exports provided: ZoneXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZoneXmlDomParser", function() { return ZoneXmlDomParser; });
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../plugin-layout/src/ZoneNode */ "./packages/plugin-layout/src/ZoneNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/src/utils */ "./packages/utils/src/utils.ts");




class ZoneXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'T' && !!item.getAttribute('t-zone');
        };
    }
    async parse(item) {
        return [new _plugin_layout_src_ZoneNode__WEBPACK_IMPORTED_MODULE_2__["ZoneNode"]([item.getAttribute('t-zone')])];
    }
}
ZoneXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-heading/src/Heading.ts":
/*!************************************************!*\
  !*** ./packages/plugin-heading/src/Heading.ts ***!
  \************************************************/
/*! exports provided: Heading */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heading", function() { return Heading; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _HeadingXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HeadingXmlDomParser */ "./packages/plugin-heading/src/HeadingXmlDomParser.ts");
/* harmony import */ var _HeadingNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeadingNode */ "./packages/plugin-heading/src/HeadingNode.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");




class Heading extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            applyHeadingStyle: {
                handler: this.applyHeadingStyle,
            },
            insertParagraphBreak: {
                selector: [_HeadingNode__WEBPACK_IMPORTED_MODULE_2__["HeadingNode"]],
                check: (context) => {
                    const range = context.range;
                    return range.isCollapsed() && !range.start.nextSibling();
                },
                handler: this.insertParagraphBreak,
            },
        };
        this.loadables = {
            parsers: [_HeadingXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["HeadingXmlDomParser"]],
            shortcuts: [0, 1, 2, 3, 4, 5, 6].map(level => {
                return {
                    pattern: 'CTRL+SHIFT+<Digit' + level + '>',
                    commandId: 'applyHeadingStyle',
                    commandArgs: { level: level },
                };
            }),
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Change the formatting of the nodes in given range to Heading.
     *
     * @param params
     */
    applyHeadingStyle(params) {
        for (const node of params.context.range.targetedNodes(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_3__["ContainerNode"])) {
            const heading = this._createHeadingContainer(params.level);
            heading.modifiers = node.modifiers.clone();
            node.replaceWith(heading);
        }
    }
    /**
     * Inserting a paragraph break at the end of a heading exits the heading.
     *
     * @param params
     */
    insertParagraphBreak(params) {
        const range = params.context.range;
        const heading = range.targetedNodes(_HeadingNode__WEBPACK_IMPORTED_MODULE_2__["HeadingNode"])[0];
        const duplicate = heading.splitAt(range.start);
        const newContainer = new this.editor.configuration.defaults.Container();
        duplicate.replaceWith(newContainer);
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return a heading node or a base container based on the given level.
     *
     * @param level
     */
    _createHeadingContainer(level) {
        if (level === 0) {
            return new this.editor.configuration.defaults.Container();
        }
        else {
            return new _HeadingNode__WEBPACK_IMPORTED_MODULE_2__["HeadingNode"]({ level: level });
        }
    }
}


/***/ }),

/***/ "./packages/plugin-heading/src/HeadingButtons.ts":
/*!*******************************************************!*\
  !*** ./packages/plugin-heading/src/HeadingButtons.ts ***!
  \*******************************************************/
/*! exports provided: ParagraphButton, Heading1Button, Heading2Button, Heading3Button, Heading4Button, Heading5Button, Heading6Button */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParagraphButton", function() { return ParagraphButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heading1Button", function() { return Heading1Button; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heading2Button", function() { return Heading2Button; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heading3Button", function() { return Heading3Button; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heading4Button", function() { return Heading4Button; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heading5Button", function() { return Heading5Button; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heading6Button", function() { return Heading6Button; });
/* harmony import */ var _HeadingNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HeadingNode */ "./packages/plugin-heading/src/HeadingNode.ts");

function headingButton(level) {
    return {
        title: 'Heading' + level,
        class: 'h' + level,
        commandId: 'applyHeadingStyle',
        commandArgs: { level: level },
        selected: (editor) => {
            return editor.selection.range.targetedNodes().every(node => {
                return node.closest(ancestor => {
                    return ancestor.is(_HeadingNode__WEBPACK_IMPORTED_MODULE_0__["HeadingNode"]) && ancestor.level === level;
                });
            });
        },
    };
}
const ParagraphButton = {
    title: 'Paragraph',
    commandId: 'applyHeadingStyle',
    commandArgs: { level: 0 },
    selected: (editor) => {
        return editor.selection.range.targetedNodes().every(node => {
            return node.closest(ancestor => {
                return ancestor.is(editor.configuration.defaults.Container);
            });
        });
    },
};
const Heading1Button = headingButton(1);
const Heading2Button = headingButton(2);
const Heading3Button = headingButton(3);
const Heading4Button = headingButton(4);
const Heading5Button = headingButton(5);
const Heading6Button = headingButton(6);


/***/ }),

/***/ "./packages/plugin-heading/src/HeadingNode.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-heading/src/HeadingNode.ts ***!
  \****************************************************/
/*! exports provided: HeadingNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeadingNode", function() { return HeadingNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");

class HeadingNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor(params) {
        super({ htmlTag: 'H' + params.level });
        this.level = params.level;
    }
    get name() {
        return super.name + ': ' + this.level;
    }
    clone(deepClone, params) {
        const defaults = {
            level: this.level,
        };
        return super.clone(deepClone, { ...defaults, ...params });
    }
}


/***/ }),

/***/ "./packages/plugin-heading/src/HeadingXmlDomParser.ts":
/*!************************************************************!*\
  !*** ./packages/plugin-heading/src/HeadingXmlDomParser.ts ***!
  \************************************************************/
/*! exports provided: HeadingXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeadingXmlDomParser", function() { return HeadingXmlDomParser; });
/* harmony import */ var _HeadingNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HeadingNode */ "./packages/plugin-heading/src/HeadingNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




const HeadingTags = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
class HeadingXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && HeadingTags.includes(Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item));
        };
    }
    async parse(item) {
        const heading = new _HeadingNode__WEBPACK_IMPORTED_MODULE_0__["HeadingNode"]({ level: parseInt(Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item)[1], 10) });
        heading.modifiers.append(this.engine.parseAttributes(item));
        const nodes = await this.engine.parse(...item.childNodes);
        heading.append(...nodes);
        return [heading];
    }
}
HeadingXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-html/src/DefaultHtmlDomRenderer.ts":
/*!************************************************************!*\
  !*** ./packages/plugin-html/src/DefaultHtmlDomRenderer.ts ***!
  \************************************************************/
/*! exports provided: DefaultHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultHtmlDomRenderer", function() { return DefaultHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _core_src_VNodes_FragmentNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/VNodes/FragmentNode */ "./packages/core/src/VNodes/FragmentNode.ts");
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class DefaultHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    async render(node) {
        let domNode;
        if (node.tangible) {
            if (node.test(_core_src_VNodes_FragmentNode__WEBPACK_IMPORTED_MODULE_1__["FragmentNode"])) {
                domNode = document.createDocumentFragment();
            }
            else {
                let nodeName;
                if (node.is(_core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_2__["VElement"])) {
                    nodeName = node.htmlTag;
                }
                else {
                    nodeName = node.constructor.name.toUpperCase() + '-' + node.id;
                }
                const element = document.createElement(nodeName);
                this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, element);
                domNode = element;
            }
            const renderedChildren = await this.renderChildren(node);
            for (const renderedChild of renderedChildren) {
                for (const domChild of renderedChild) {
                    domNode.appendChild(domChild);
                }
            }
            return [domNode];
        }
        else {
            return [];
        }
    }
}
DefaultHtmlDomRenderer.id = 'dom/html';


/***/ }),

/***/ "./packages/plugin-html/src/DefaultHtmlTextParser.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-html/src/DefaultHtmlTextParser.ts ***!
  \***********************************************************/
/*! exports provided: DefaultHtmlTextParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultHtmlTextParser", function() { return DefaultHtmlTextParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");


const autoCloseRegExp = /(<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)[^/]*)>/gi;
class DefaultHtmlTextParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    async parse(item) {
        const domParser = new DOMParser();
        const template = item.replace(autoCloseRegExp, '$1/>');
        const xmlDoc = domParser.parseFromString('<t>' + template + '</t>', 'text/xml');
        const parser = this.engine.editor.plugins.get(_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"]);
        return parser.parse('dom/xml', ...xmlDoc.firstChild.childNodes);
    }
}
DefaultHtmlTextParser.id = 'text/html';


/***/ }),

/***/ "./packages/plugin-html/src/Html.ts":
/*!******************************************!*\
  !*** ./packages/plugin-html/src/Html.ts ***!
  \******************************************/
/*! exports provided: Html */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Html", function() { return Html; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _HtmlTextParsingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HtmlTextParsingEngine */ "./packages/plugin-html/src/HtmlTextParsingEngine.ts");
/* harmony import */ var _HtmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./HtmlDomParsingEngine */ "./packages/plugin-html/src/HtmlDomParsingEngine.ts");
/* harmony import */ var _HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Xml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plugin-xml/src/Xml */ "./packages/plugin-xml/src/Xml.ts");
/* harmony import */ var _HtmlNodeDomRenderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./HtmlNodeDomRenderer */ "./packages/plugin-html/src/HtmlNodeDomRenderer.ts");








class Html extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsingEngines: [_HtmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_4__["HtmlDomParsingEngine"], _HtmlTextParsingEngine__WEBPACK_IMPORTED_MODULE_3__["HtmlTextParsingEngine"]],
            renderingEngines: [_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_5__["HtmlDomRenderingEngine"]],
            renderers: [_HtmlNodeDomRenderer__WEBPACK_IMPORTED_MODULE_7__["HtmlHtmlDomRenderer"]],
        };
    }
}
Html.dependencies = [_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"], _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_2__["Renderer"], _plugin_xml_src_Xml__WEBPACK_IMPORTED_MODULE_6__["Xml"]];


/***/ }),

/***/ "./packages/plugin-html/src/HtmlDomParsingEngine.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-html/src/HtmlDomParsingEngine.ts ***!
  \**********************************************************/
/*! exports provided: HtmlDomParsingEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlDomParsingEngine", function() { return HtmlDomParsingEngine; });
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");

class HtmlDomParsingEngine extends _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__["XmlDomParsingEngine"] {
}
HtmlDomParsingEngine.id = 'dom/html';
HtmlDomParsingEngine.extends = ['dom/xml'];


/***/ }),

/***/ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts":
/*!************************************************************!*\
  !*** ./packages/plugin-html/src/HtmlDomRenderingEngine.ts ***!
  \************************************************************/
/*! exports provided: HtmlDomRenderingEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlDomRenderingEngine", function() { return HtmlDomRenderingEngine; });
/* harmony import */ var _plugin_renderer_src_RenderingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/RenderingEngine */ "./packages/plugin-renderer/src/RenderingEngine.ts");
/* harmony import */ var _DefaultHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DefaultHtmlDomRenderer */ "./packages/plugin-html/src/DefaultHtmlDomRenderer.ts");
/* harmony import */ var _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/src/VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");



class HtmlDomRenderingEngine extends _plugin_renderer_src_RenderingEngine__WEBPACK_IMPORTED_MODULE_0__["RenderingEngine"] {
    /**
     * Render the attributes (of the given Class extending Attributes) of the
     * given VNode onto the given DOM Element.
     *
     * @param Class
     * @param node
     * @param element
     */
    renderAttributes(Class, node, element) {
        const attributes = node.modifiers.find(Class);
        if (attributes) {
            for (const name of attributes.keys()) {
                const value = attributes.get(name);
                element.setAttribute(name, value);
            }
            if (attributes.style.length) {
                for (const name of attributes.style.keys()) {
                    element.style.setProperty(name, attributes.style.get(name));
                }
            }
            if (attributes.classList.length) {
                for (const className of attributes.classList.items()) {
                    element.classList.add(className);
                }
            }
        }
    }
    /**
     * If a node is empty but could accomodate children, fill it to make it
     * visible.
     *
     * @param node
     */
    async renderEmpty(node) {
        return node.is(_core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_2__["AtomicNode"]) ? [] : [document.createElement('br')];
    }
}
HtmlDomRenderingEngine.id = 'dom/html';
HtmlDomRenderingEngine.defaultRenderer = _DefaultHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_1__["DefaultHtmlDomRenderer"];


/***/ }),

/***/ "./packages/plugin-html/src/HtmlNode.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-html/src/HtmlNode.ts ***!
  \**********************************************/
/*! exports provided: HtmlNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlNode", function() { return HtmlNode; });
/* harmony import */ var _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");

class HtmlNode extends _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__["AtomicNode"] {
    constructor(params) {
        super();
        this.domNode = params.domNode;
    }
}


/***/ }),

/***/ "./packages/plugin-html/src/HtmlNodeDomRenderer.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-html/src/HtmlNodeDomRenderer.ts ***!
  \*********************************************************/
/*! exports provided: HtmlHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlHtmlDomRenderer", function() { return HtmlHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _HtmlNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HtmlNode */ "./packages/plugin-html/src/HtmlNode.ts");



class HtmlHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor(engine, superRenderer) {
        super(engine, superRenderer);
        this.predicate = _HtmlNode__WEBPACK_IMPORTED_MODULE_2__["HtmlNode"];
    }
    async render(node) {
        return [node.domNode];
    }
}
HtmlHtmlDomRenderer.id = _HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-html/src/HtmlTextParsingEngine.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-html/src/HtmlTextParsingEngine.ts ***!
  \***********************************************************/
/*! exports provided: HtmlTextParsingEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlTextParsingEngine", function() { return HtmlTextParsingEngine; });
/* harmony import */ var _plugin_parser_src_ParsingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/ParsingEngine */ "./packages/plugin-parser/src/ParsingEngine.ts");
/* harmony import */ var _DefaultHtmlTextParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DefaultHtmlTextParser */ "./packages/plugin-html/src/DefaultHtmlTextParser.ts");


class HtmlTextParsingEngine extends _plugin_parser_src_ParsingEngine__WEBPACK_IMPORTED_MODULE_0__["ParsingEngine"] {
}
HtmlTextParsingEngine.id = 'text/html';
HtmlTextParsingEngine.defaultParser = _DefaultHtmlTextParser__WEBPACK_IMPORTED_MODULE_1__["DefaultHtmlTextParser"];


/***/ }),

/***/ "./packages/plugin-image/src/Image.ts":
/*!********************************************!*\
  !*** ./packages/plugin-image/src/Image.ts ***!
  \********************************************/
/*! exports provided: Image */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Image", function() { return Image; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _ImageXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageXmlDomParser */ "./packages/plugin-image/src/ImageXmlDomParser.ts");
/* harmony import */ var _ImageHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ImageHtmlDomRenderer */ "./packages/plugin-image/src/ImageHtmlDomRenderer.ts");



class Image extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_ImageXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["ImageXmlDomParser"]],
            renderers: [_ImageHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["ImageHtmlDomRenderer"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-image/src/ImageHtmlDomRenderer.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-image/src/ImageHtmlDomRenderer.ts ***!
  \***********************************************************/
/*! exports provided: ImageHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageHtmlDomRenderer", function() { return ImageHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _ImageNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageNode */ "./packages/plugin-image/src/ImageNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");
/* harmony import */ var _plugin_youtube_src_Youtube__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-youtube/src/Youtube */ "./packages/plugin-youtube/src/Youtube.ts");





class ImageHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = (node) => !![_ImageNode__WEBPACK_IMPORTED_MODULE_1__["ImageNode"], _plugin_youtube_src_Youtube__WEBPACK_IMPORTED_MODULE_4__["Youtube"]].find(NodeClass => node instanceof NodeClass);
    }
    async render(node) {
        const image = document.createElement('img');
        const isSelected = this.engine.editor.selection.range.selectedNodes(selectedNode => selectedNode === node);
        if (isSelected.length === 1) {
            image.classList.add('jw_selected_image');
        }
        image.addEventListener('click', e => {
            this.engine.editor.nextEventMutex(() => {
                this.engine.editor.execCustomCommand(async () => {
                    this.engine.editor.selection.select(node, node);
                });
            });
        });
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, image);
        return [image];
    }
}
ImageHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-image/src/ImageNode.ts":
/*!************************************************!*\
  !*** ./packages/plugin-image/src/ImageNode.ts ***!
  \************************************************/
/*! exports provided: ImageNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageNode", function() { return ImageNode; });
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");

class ImageNode extends _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_0__["InlineNode"] {
}
ImageNode.atomic = true;


/***/ }),

/***/ "./packages/plugin-image/src/ImageXmlDomParser.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-image/src/ImageXmlDomParser.ts ***!
  \********************************************************/
/*! exports provided: ImageXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageXmlDomParser", function() { return ImageXmlDomParser; });
/* harmony import */ var _ImageNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ImageNode */ "./packages/plugin-image/src/ImageNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class ImageXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'IMG';
        };
    }
    async parse(item) {
        const image = new _ImageNode__WEBPACK_IMPORTED_MODULE_0__["ImageNode"]();
        image.modifiers.append(this.engine.parseAttributes(item));
        return [image];
    }
}
ImageXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-indent/src/Indent.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-indent/src/Indent.ts ***!
  \**********************************************/
/*! exports provided: Indent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Indent", function() { return Indent; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _plugin_char_src_Char__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-char/src/Char */ "./packages/plugin-char/src/Char.ts");
/* harmony import */ var _plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-char/src/CharNode */ "./packages/plugin-char/src/CharNode.ts");
/* harmony import */ var _plugin_linebreak_src_LineBreak__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-linebreak/src/LineBreak */ "./packages/plugin-linebreak/src/LineBreak.ts");
/* harmony import */ var _plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../plugin-linebreak/src/LineBreakNode */ "./packages/plugin-linebreak/src/LineBreakNode.ts");
/* harmony import */ var _core_src_VRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/src/VRange */ "./packages/core/src/VRange.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/src/VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");









class Indent extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            indent: {
                title: 'Indent chars',
                handler: this.indent,
            },
            outdent: {
                title: 'Outdent chars',
                handler: this.outdent,
            },
        };
        this.loadables = {
            shortcuts: [
                {
                    pattern: 'TAB',
                    commandId: 'indent',
                },
                {
                    pattern: 'SHIFT+TAB',
                    commandId: 'outdent',
                },
            ],
        };
        this.tab = '    ';
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Indent text or lines.
     *
     * - If there is more than one line selected in range, indent each lines.
     * - Otherwise, insert 4 spaces.
     */
    async indent(params) {
        const range = params.context.range;
        const segmentBreaks = range.traversedNodes(this._isSegmentBreak);
        // Only indent when there is at leat two lines selected, that is when
        // at least one segment break could be identified in the selection.
        if (range.isCollapsed() || !segmentBreaks.length) {
            await this.editor.execCommand('insertText', {
                text: this.tab,
                context: {
                    range: range,
                },
            });
        }
        else {
            // The first line of the selection is neither fully selected nor
            // traversed so its segment break was not in `range.traversedNodes`.
            const nextSegmentBreak = range.start.previous(this._isSegmentBreak);
            if (nextSegmentBreak) {
                segmentBreaks.unshift(nextSegmentBreak);
            }
            for (const segmentBreak of segmentBreaks) {
                // Insert 4 spaces at the start of next segment.
                const [node, position] = this._nextSegmentStart(segmentBreak);
                await Object(_core_src_VRange__WEBPACK_IMPORTED_MODULE_6__["withRange"])(_core_src_VRange__WEBPACK_IMPORTED_MODULE_6__["VRange"].at(node, position), async (range) => {
                    await this.editor.execCommand('insertText', {
                        text: this.tab,
                        context: {
                            range: range,
                        },
                    });
                });
            }
        }
    }
    /**
     * Outdent lines.
     *
     * If there is more than one line selected, for each of the lines, remove up
     * to 4 spaces in the beggining of the line.
     */
    outdent(params) {
        const range = params.context.range;
        const segmentBreaks = range.traversedNodes(this._isSegmentBreak);
        // The first line of the selection is neither fully selected nor
        // traversed so its segment break was not in `range.traversedNodes`.
        const previousSegmentBreak = range.start.previous(this._isSegmentBreak);
        if (previousSegmentBreak) {
            segmentBreaks.unshift(previousSegmentBreak);
        }
        // Only outdent when there is at leat two lines selected, that is when
        // at least one segment break could be identified in the selection.
        if (segmentBreaks.length) {
            segmentBreaks.forEach(segmentBreak => {
                for (let i = 0; i < this.tab.length; i++) {
                    const space = this._nextIndentationSpace(segmentBreak);
                    if (space) {
                        space.remove();
                    }
                }
            });
        }
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return true if the given VNode can be considered to be a segment break.
     *
     * @param params
     */
    _isSegmentBreak(node) {
        return node.is(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_7__["ContainerNode"]) || node.is(_plugin_linebreak_src_LineBreakNode__WEBPACK_IMPORTED_MODULE_5__["LineBreakNode"]);
    }
    /**
     * Return the next segment start point after the given segment break.
     *
     * @param segmentBreak
     */
    _nextSegmentStart(segmentBreak) {
        let reference = segmentBreak;
        let position = _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE;
        if (segmentBreak.is(_core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_8__["AtomicNode"])) {
            reference = segmentBreak.nextSibling();
        }
        else if (segmentBreak.hasChildren()) {
            reference = segmentBreak.firstChild();
        }
        else {
            position = _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].INSIDE;
        }
        return [reference, position];
    }
    /**
     * Return true if the given VNode is a CharNode containing a space.
     *
     * @param node
     */
    _isSpace(node) {
        return node.is(_plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_3__["CharNode"]) && /^\s$/g.test(node.char);
    }
    /**
     * Return true if the given VNode can be considered to be a segment break.
     *
     * @param segmentBreak
     */
    _nextIndentationSpace(segmentBreak) {
        let space;
        if (segmentBreak.is(_core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_8__["AtomicNode"])) {
            space = segmentBreak.nextSibling();
        }
        else {
            space = segmentBreak.firstChild();
        }
        return space && space.test(this._isSpace) && space;
    }
}
Indent.dependencies = [_plugin_char_src_Char__WEBPACK_IMPORTED_MODULE_2__["Char"], _plugin_linebreak_src_LineBreak__WEBPACK_IMPORTED_MODULE_4__["LineBreak"]];


/***/ }),

/***/ "./packages/plugin-indent/src/IndentButtons.ts":
/*!*****************************************************!*\
  !*** ./packages/plugin-indent/src/IndentButtons.ts ***!
  \*****************************************************/
/*! exports provided: IndentButton, OutdentButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndentButton", function() { return IndentButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutdentButton", function() { return OutdentButton; });
const IndentButton = {
    title: 'Indent',
    class: 'fa-indent',
    commandId: 'indent',
};
const OutdentButton = {
    title: 'Outdent',
    class: 'fa-outdent',
    commandId: 'outdent',
};


/***/ }),

/***/ "./packages/plugin-inline/src/Format.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-inline/src/Format.ts ***!
  \**********************************************/
/*! exports provided: Format */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Format", function() { return Format; });
/* harmony import */ var _core_src_Modifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/Modifier */ "./packages/core/src/Modifier.ts");
/* harmony import */ var _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/Modifiers */ "./packages/core/src/Modifiers.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");



class Format extends _core_src_Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"] {
    constructor(htmlTag) {
        super();
        this.modifiers = new _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_1__["Modifiers"]();
        this.htmlTag = htmlTag;
    }
    get name() {
        return this.htmlTag.toLowerCase();
    }
    toString() {
        const nonEmptyAttributes = this.modifiers.filter(modifier => !(modifier instanceof _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_2__["Attributes"]) || !!modifier.length);
        if (nonEmptyAttributes.length) {
            const modifiersRepr = [];
            for (const modifier of nonEmptyAttributes) {
                modifiersRepr.push(modifier.toString());
            }
            return `${this.name}[${modifiersRepr.join(', ')}]`;
        }
        else {
            return this.name;
        }
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    render() {
        const domNode = document.createElement(this.htmlTag);
        const attributes = this.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_2__["Attributes"]);
        if (attributes) {
            for (const name of attributes.keys()) {
                domNode.setAttribute(name, attributes.get(name));
            }
            if (attributes.style.length) {
                for (const name of attributes.style.keys().sort()) {
                    domNode.style.setProperty(name, attributes.style.get(name));
                }
            }
            if (attributes.classList.length) {
                for (const className of attributes.classList.items()) {
                    domNode.classList.add(className);
                }
            }
        }
        return domNode;
    }
    clone() {
        const clone = new this.constructor();
        clone.htmlTag = this.htmlTag;
        clone.modifiers = this.modifiers.clone();
        return clone;
    }
    isSameAs(otherFormat) {
        const aModifiers = this.modifiers;
        const bModifiers = otherFormat === null || otherFormat === void 0 ? void 0 : otherFormat.modifiers;
        return otherFormat instanceof this.constructor && aModifiers.areSameAs(bModifiers);
    }
}


/***/ }),

/***/ "./packages/plugin-inline/src/FormatDomRenderer.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-inline/src/FormatDomRenderer.ts ***!
  \*********************************************************/
/*! exports provided: FormatDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormatDomRenderer", function() { return FormatDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _InlineNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");
/* harmony import */ var _Format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Format */ "./packages/plugin-inline/src/Format.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");




class FormatDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _InlineNode__WEBPACK_IMPORTED_MODULE_1__["InlineNode"];
    }
    async render(node) {
        const inline = await this.super.render(node);
        return this.renderFormats(node.modifiers.filter(_Format__WEBPACK_IMPORTED_MODULE_2__["Format"]), inline);
    }
    /**
     * Render an inline node's formats and return them in a fragment.
     *
     * @param rendering
     */
    async renderFormats(formats, rendering) {
        const fragment = document.createDocumentFragment();
        let parent = fragment;
        for (const value of Object.values(formats)) {
            const formatNode = value.render();
            parent.appendChild(formatNode);
            // Update the parent so the text is inside the format node.
            parent = formatNode;
        }
        for (const domChild of rendering) {
            parent.appendChild(domChild);
        }
        return Array.from(fragment.childNodes);
    }
}
FormatDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-inline/src/FormatParser.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-inline/src/FormatParser.ts ***!
  \****************************************************/
/*! exports provided: FormatParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormatParser", function() { return FormatParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _InlineNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");


class FormatParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    /**
     * Parse a span node.
     *
     * @param nodes
     */
    applyFormat(format, nodes) {
        for (const node of nodes) {
            if (node.is(_InlineNode__WEBPACK_IMPORTED_MODULE_1__["InlineNode"])) {
                format.clone().applyTo(node);
            }
            else {
                const inlineNodes = node.descendants(_InlineNode__WEBPACK_IMPORTED_MODULE_1__["InlineNode"]);
                for (const inline of inlineNodes) {
                    format.clone().applyTo(inline);
                }
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-inline/src/Inline.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-inline/src/Inline.ts ***!
  \**********************************************/
/*! exports provided: Inline */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inline", function() { return Inline; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");
/* harmony import */ var _InlineNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");
/* harmony import */ var _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/src/Modifiers */ "./packages/core/src/Modifiers.ts");
/* harmony import */ var _plugin_xml_src_CssStyle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-xml/src/CssStyle */ "./packages/plugin-xml/src/CssStyle.ts");





class Inline extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            toggleFormat: {
                handler: this.toggleFormat,
            },
        };
        this.commandHooks = {
            setSelection: this.resetCache,
        };
        /**
         * When applying a modifier on a collapsed range, cache the calculation of
         * the modifier in the following property. This value is reset each time the
         * range changes in a document.
         */
        this.cache = {
            modifiers: null,
            style: null,
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Apply the `format` to the range.
     *
     * @param params
     */
    toggleFormat(params) {
        const range = params.context.range;
        const FormatClass = params.FormatClass;
        if (range.isCollapsed()) {
            if (!this.cache.modifiers) {
                this.cache.modifiers = this.getCurrentModifiers(range);
            }
            const format = this.cache.modifiers.find(FormatClass);
            if (format) {
                this.cache.modifiers.remove(format);
            }
            else {
                this.cache.modifiers.append(new FormatClass());
            }
        }
        else {
            const selectedInlines = range.selectedNodes(_InlineNode__WEBPACK_IMPORTED_MODULE_2__["InlineNode"]);
            // If every char in the range has the format `FormatClass`, remove
            // the format for all of them.
            const allHaveFormat = selectedInlines.every(inline => {
                return !!inline.modifiers.find(FormatClass);
            });
            if (allHaveFormat) {
                for (const inline of selectedInlines) {
                    const format = inline.modifiers.find(FormatClass);
                    // Apply the attributes of the format we're about to remove
                    // to the inline itself.
                    const attributes = inline.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_1__["Attributes"]);
                    const matchingFormatAttributes = format.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_1__["Attributes"]);
                    if (matchingFormatAttributes) {
                        for (const key of matchingFormatAttributes.keys()) {
                            attributes.set(key, matchingFormatAttributes.get(key));
                        }
                    }
                    // Remove the format.
                    inline.modifiers.remove(format);
                }
            }
            else {
                // If there is at least one char in the range without the format
                // `FormatClass`, set the format for all nodes.
                for (const inline of selectedInlines) {
                    if (!inline.modifiers.find(FormatClass)) {
                        new FormatClass().applyTo(inline);
                    }
                }
            }
        }
    }
    isAllFormat(FormatClass, range = this.editor.selection.range) {
        if (range.isCollapsed()) {
            if (!this.cache.modifiers) {
                this.cache.modifiers = this.getCurrentModifiers(range);
            }
            return !!this.cache.modifiers.find(FormatClass);
        }
        else {
            const selectedInlines = range.selectedNodes(_InlineNode__WEBPACK_IMPORTED_MODULE_2__["InlineNode"]);
            return (selectedInlines.length &&
                selectedInlines.every(char => !!char.modifiers.find(FormatClass)));
        }
    }
    /**
     * Get the modifiers for the next insertion.
     */
    getCurrentModifiers(range = this.editor.selection.range) {
        if (this.cache.modifiers) {
            return this.cache.modifiers;
        }
        let inlineToCopyModifiers;
        if (range.isCollapsed()) {
            inlineToCopyModifiers = range.start.previousSibling() || range.start.nextSibling();
        }
        else {
            inlineToCopyModifiers = range.start.nextSibling();
        }
        if (inlineToCopyModifiers && inlineToCopyModifiers.is(_InlineNode__WEBPACK_IMPORTED_MODULE_2__["InlineNode"])) {
            return inlineToCopyModifiers.modifiers.clone();
        }
        return new _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_3__["Modifiers"]();
    }
    /**
     * Get the styles for the next insertion.
     */
    getCurrentStyle(range = this.editor.selection.range) {
        var _a;
        if (this.cache.style) {
            return this.cache.style;
        }
        let inlineToCopyStyle;
        if (range.isCollapsed()) {
            inlineToCopyStyle = range.start.previousSibling() || range.start.nextSibling();
        }
        else {
            inlineToCopyStyle = range.start.nextSibling();
        }
        if (inlineToCopyStyle && inlineToCopyStyle.is(_InlineNode__WEBPACK_IMPORTED_MODULE_2__["InlineNode"])) {
            return ((_a = inlineToCopyStyle.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_1__["Attributes"])) === null || _a === void 0 ? void 0 : _a.style.clone()) || new _plugin_xml_src_CssStyle__WEBPACK_IMPORTED_MODULE_4__["CssStyle"]();
        }
        return new _plugin_xml_src_CssStyle__WEBPACK_IMPORTED_MODULE_4__["CssStyle"]();
    }
    /**
     * Each time the selection changes, we reset its format and style.
     */
    resetCache() {
        this.cache = {
            modifiers: null,
            style: null,
        };
    }
}


/***/ }),

/***/ "./packages/plugin-inline/src/InlineNode.ts":
/*!**************************************************!*\
  !*** ./packages/plugin-inline/src/InlineNode.ts ***!
  \**************************************************/
/*! exports provided: InlineNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InlineNode", function() { return InlineNode; });
/* harmony import */ var _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");

class InlineNode extends _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__["AtomicNode"] {
}


/***/ }),

/***/ "./packages/plugin-input/src/Input.ts":
/*!********************************************!*\
  !*** ./packages/plugin-input/src/Input.ts ***!
  \********************************************/
/*! exports provided: Input */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return Input; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _InputXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InputXmlDomParser */ "./packages/plugin-input/src/InputXmlDomParser.ts");
/* harmony import */ var _InputHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InputHtmlDomRenderer */ "./packages/plugin-input/src/InputHtmlDomRenderer.ts");



class Input extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_InputXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["InputXmlDomParser"]],
            renderers: [_InputHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["InputHtmlDomRenderer"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-input/src/InputHtmlDomRenderer.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-input/src/InputHtmlDomRenderer.ts ***!
  \***********************************************************/
/*! exports provided: InputHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputHtmlDomRenderer", function() { return InputHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _InputNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InputNode */ "./packages/plugin-input/src/InputNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class InputHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _InputNode__WEBPACK_IMPORTED_MODULE_1__["InputNode"];
    }
    /**
     * Render the VNode to the given format.
     */
    async render(node) {
        const input = document.createElement('input');
        const attributes = node.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"]);
        if (attributes) {
            this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, input);
        }
        if (node.inputType) {
            input.setAttribute('type', node.inputType);
        }
        if (node.inputName) {
            input.setAttribute('name', node.inputName);
        }
        input.value = node.value;
        return [input];
    }
}
InputHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-input/src/InputNode.ts":
/*!************************************************!*\
  !*** ./packages/plugin-input/src/InputNode.ts ***!
  \************************************************/
/*! exports provided: InputNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputNode", function() { return InputNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");

class InputNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor(params = {}) {
        super({ htmlTag: 'INPUT' });
        this.inputName = params.name;
        this.inputType = params.type;
        this.value = params.value;
    }
}


/***/ }),

/***/ "./packages/plugin-input/src/InputXmlDomParser.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-input/src/InputXmlDomParser.ts ***!
  \********************************************************/
/*! exports provided: InputXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputXmlDomParser", function() { return InputXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _InputNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InputNode */ "./packages/plugin-input/src/InputNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");





class InputXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'INPUT';
        };
    }
    async parse(item) {
        const input = new _InputNode__WEBPACK_IMPORTED_MODULE_2__["InputNode"]({
            type: item.getAttribute('type'),
            name: item.getAttribute('name'),
            value: item.value,
        });
        input.modifiers.append(this.engine.parseAttributes(item));
        const attributes = input.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"]);
        if (attributes) {
            attributes.remove('type'); // type is on input.inputType
            attributes.remove('name'); // type is on input.inputName
        }
        const nodes = await this.engine.parse(...item.childNodes);
        input.append(...nodes);
        return [input];
    }
}
InputXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-italic/src/Italic.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-italic/src/Italic.ts ***!
  \**********************************************/
/*! exports provided: Italic */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Italic", function() { return Italic; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _ItalicFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ItalicFormat */ "./packages/plugin-italic/src/ItalicFormat.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _ItalicXmlDomParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ItalicXmlDomParser */ "./packages/plugin-italic/src/ItalicXmlDomParser.ts");




class Italic extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_ItalicXmlDomParser__WEBPACK_IMPORTED_MODULE_3__["ItalicXmlDomParser"]],
            shortcuts: [
                {
                    pattern: 'CTRL+I',
                    commandId: 'toggleFormat',
                    commandArgs: { FormatClass: _ItalicFormat__WEBPACK_IMPORTED_MODULE_1__["ItalicFormat"] },
                },
            ],
        };
    }
}
Italic.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]];


/***/ }),

/***/ "./packages/plugin-italic/src/ItalicButtons.ts":
/*!*****************************************************!*\
  !*** ./packages/plugin-italic/src/ItalicButtons.ts ***!
  \*****************************************************/
/*! exports provided: ItalicButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItalicButton", function() { return ItalicButton; });
/* harmony import */ var _ItalicFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ItalicFormat */ "./packages/plugin-italic/src/ItalicFormat.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");


const ItalicButton = {
    title: 'Toggle italic',
    class: 'fa-italic',
    commandId: 'toggleFormat',
    commandArgs: { FormatClass: _ItalicFormat__WEBPACK_IMPORTED_MODULE_0__["ItalicFormat"] },
    selected: (editor) => editor.plugins.get(_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__["Inline"]).isAllFormat(_ItalicFormat__WEBPACK_IMPORTED_MODULE_0__["ItalicFormat"]),
};


/***/ }),

/***/ "./packages/plugin-italic/src/ItalicFormat.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-italic/src/ItalicFormat.ts ***!
  \****************************************************/
/*! exports provided: ItalicFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItalicFormat", function() { return ItalicFormat; });
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");

class ItalicFormat extends _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__["Format"] {
    constructor(htmlTag = 'I') {
        super(htmlTag);
    }
}


/***/ }),

/***/ "./packages/plugin-italic/src/ItalicXmlDomParser.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-italic/src/ItalicXmlDomParser.ts ***!
  \**********************************************************/
/*! exports provided: ItalicXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItalicXmlDomParser", function() { return ItalicXmlDomParser; });
/* harmony import */ var _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatParser */ "./packages/plugin-inline/src/FormatParser.ts");
/* harmony import */ var _ItalicFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ItalicFormat */ "./packages/plugin-italic/src/ItalicFormat.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class ItalicXmlDomParser extends _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__["FormatParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'I' || Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'EM');
        };
    }
    /**
     * Parse an italic node.
     *
     * @param item
     */
    async parse(item) {
        const italic = new _ItalicFormat__WEBPACK_IMPORTED_MODULE_1__["ItalicFormat"](Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item));
        italic.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        this.applyFormat(italic, children);
        return children;
    }
}
ItalicXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-keymap/src/Keymap.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-keymap/src/Keymap.ts ***!
  \**********************************************/
/*! exports provided: Platform, LEVEL, Keymap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Platform", function() { return Platform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEVEL", function() { return LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Keymap", function() { return Keymap; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");

var Platform;
(function (Platform) {
    Platform["MAC"] = "mac";
    Platform["PC"] = "pc";
})(Platform || (Platform = {}));
var LEVEL;
(function (LEVEL) {
    LEVEL[LEVEL["DEFAULT"] = 0] = "DEFAULT";
    LEVEL[LEVEL["USER"] = 1] = "USER";
})(LEVEL || (LEVEL = {}));
/**
 * Keymap allow to add and remove shortucts and provide a function to match a
 * keyboard event with the registered shortcuts patterns.
 *
 * ## Adding shortcuts
 * The expression to describe a shortuct is zero or more `modifiers` and one
 * `hotkey` joined with the symbol `+`.
 *
 * ### Modifiers
 * - SHIFT
 * - ALT
 * - CTRL
 * - META
 * - CMD (alias of META)
 *
 * Example:
 * ```typescript
 * // using a modifier and one key
 * keymap.bind('CTRL+A', 'commandIdentifier')
 * // using multiples modifiers and one key
 * keymap.bind('CTRL+ALT+A', 'commandIdentifier')
 * ```
 *
 * ### Hotkeys
 * A hotkey can be wether a `key` or `code`.
 *
 * #### Key
 * The syntax to describe a `key` is to write the `key` as it is. The convention
 * is to write it in uppercase.
 *
 * Example:
 * ```typescript
 * keymap.bind('CTRL+A', 'commandIdentifier')
 * ```
 * The list of possible `key` values are defined in the following link:
 * https://www.w3.org/TR/uievents/#dom-keyboardevent-key
 *
 * #### Code
 * The syntax to describe a `code` is to write `<code>` (surrounded by "<" and
 * ">").
 *
 * Example:
 * ```typescript
 * keymap.bind('CTRL+<KeyA>', 'commandIdentifier')
 * ```
 *
 * The list of possible `code` values are defined in the following link:
 * https://www.w3.org/TR/uievents/#dom-keyboardevent-key
 *
 * ## Removing shortucts
 * To remove a shortuct, call `bind` without specifying a commandIdentifier.
 *
 * Example:
 * ```typescript
 * keymap.bind('CTRL+<KeyA>')
 * ```
 */
class Keymap extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor(editor, config) {
        super(editor, config);
        this.editor = editor;
        this.config = config;
        this.loaders = {
            shortcuts: this._loadShortcuts,
        };
        this.mappings = [...new Array(LEVEL.USER + 1)].map(() => []);
        this.defaultMappings = [];
        this.userMappings = [];
        if (!config.platform) {
            const isMac = navigator.platform.match(/Mac/);
            config.platform = isMac ? Platform.MAC : Platform.PC;
        }
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Bind a shortuct.
     *
     * If there is no `command.commandId`, it means that we want nothing to
     * execute, thus replacing the command originally bound on this shortcut.
     *
     * @param pattern
     * @param command
     */
    bind(pattern, command, level = LEVEL.DEFAULT) {
        this.mappings[level].push({
            pattern: this.parsePattern(pattern),
            configuredCommand: command,
        });
    }
    /**
     * Return all configured commands which shortcut match the given `keyEvent`.
     *
     * @param keyEvent
     */
    match(keyEvent) {
        var _a;
        const matchingCommands = [];
        for (let level = LEVEL.USER; level >= 0; level--) {
            for (const shortcut of this.mappings[level]) {
                const modifiers = shortcut.pattern.modifiers;
                let match;
                if ('code' in shortcut.pattern) {
                    match = shortcut.pattern.code === keyEvent.code;
                }
                else {
                    // In rare case the KeyboardEvent `key` is undefined.
                    match = shortcut.pattern.key === ((_a = keyEvent.key) === null || _a === void 0 ? void 0 : _a.toUpperCase());
                }
                match =
                    match &&
                        modifiers.has('CTRL') === keyEvent.ctrlKey &&
                        modifiers.has('SHIFT') === keyEvent.shiftKey &&
                        modifiers.has('META') === keyEvent.metaKey &&
                        modifiers.has('ALT') === keyEvent.altKey;
                if (match) {
                    if (!shortcut.configuredCommand.commandId) {
                        // An `undefined` command unbounds the other commands
                        // previously registered on this shortcut.
                        matchingCommands.length = 0;
                    }
                    matchingCommands.push(shortcut.configuredCommand);
                }
            }
            if (matchingCommands.length) {
                // Matches were found at this level so do not look lower.
                break;
            }
        }
        return matchingCommands;
    }
    /**
     * Parse a string that represents a pattern and return a `ShortuctPattern`.
     * Supported pattern is: [modifier+]*[<code>|key]
     *
     * @param pattern
     */
    parsePattern(pattern) {
        const tokens = pattern
            .replace(/cmd/gi, 'META')
            .split(/[+]/)
            .map(token => token.trim());
        const keyCode = tokens.pop();
        const modifiers = new Set(tokens.map(token => token.toUpperCase()));
        if (!keyCode) {
            throw new Error('You must have at least one key or code.');
        }
        // There are two ways to specify a shortcut hotkey : key or code
        // - "CTRL+1" is the modifier CTRL with the event.key "1".
        // - "CTRL+<Key1>" is the modifier CTRL with the event.code "Key1"
        const codeMatch = keyCode.match(/^<(\w+)>$/);
        if (codeMatch && codeMatch.length > 1) {
            return { code: codeMatch[1], modifiers };
        }
        else {
            return { key: keyCode.toUpperCase(), modifiers };
        }
    }
    /**
     * Take a `ShortuctPattern` and return a string that represents a pattern,
     * in the form [modifier+]*[<code>|key].
     *
     * @param pattern
     */
    stringifyPattern(pattern) {
        const parts = Array.from(pattern.modifiers);
        if ('code' in pattern) {
            parts.push(pattern.code);
        }
        else if ('key' in pattern) {
            parts.push(pattern.key);
        }
        return parts.join('+');
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Load a shortcut in the keymap depending on the platform.
     *
     * - If the shortuct has no platform property; load the shortuct in both
     *   platform ('mac' and 'pc').
     * - If the shortuct has no platform property and the current platform is
     *   mac, modify the ctrl key to meta key.
     * - If the shortuct has a platform property, only load the shortcut for
     *   that platform.
     * - If no `mapping.commandId` is declared, it means removing the shortcut.
     *
     * @param shortcuts The shortuct definitions.
     * @param source The source of the shortcuts.
     */
    _loadShortcuts(shortcuts, source) {
        for (const shortcut of [...shortcuts]) {
            // A shortcut is a configured command on which the properties
            // `pattern`, and optionally `platform`, were set.
            const platform = shortcut.platform;
            if (!platform || platform === this.config.platform) {
                let pattern = shortcut.pattern;
                const command = shortcut;
                // Patterns using the CTRL modifier target CMD instead for Mac.
                if (!platform && this.config.platform === Platform.MAC) {
                    pattern = shortcut.pattern.replace(/ctrl/gi, 'CMD');
                }
                if (source instanceof _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"]) {
                    this.bind(pattern, command, LEVEL.DEFAULT);
                }
                else {
                    this.bind(pattern, command, LEVEL.USER);
                }
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-layout/src/Layout.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-layout/src/Layout.ts ***!
  \**********************************************/
/*! exports provided: Layout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layout", function() { return Layout; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");

class Layout extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.engines = {};
        this.loaders = {
            layoutEngines: this.loadEngines,
            components: this.loadComponents,
            componentZones: this.loadComponentsZones,
        };
        this.commands = {
            show: {
                title: 'Show a layout component',
                handler: this.show.bind(this),
            },
            hide: {
                title: 'Hide a layout component',
                handler: this.hide.bind(this),
            },
        };
    }
    async start() {
        this.loadComponents(this.configuration.components || []);
        this.loadComponentsZones(this.configuration.componentZones || []);
    }
    /**
     * Add a Component in a zone.
     *
     * @param componentId
     * @param zoneId
     */
    async add(componentId, zoneId = 'default') {
        const engines = Object.values(this.engines);
        await Promise.all(engines.map(engine => engine.add(componentId, zoneId)));
    }
    /**
     * Remove a component (instance or clonse) from the zone.
     *
     * @param componentID
     */
    async remove(componentID) {
        const promises = [];
        for (const layoutEngine of Object.values(this.engines)) {
            promises.push(layoutEngine.remove(componentID));
        }
        await Promise.all(promises);
    }
    /**
     * Show component (instance or clonse) inside the zone.
     *
     * @param params
     */
    async show(params) {
        const promises = [];
        for (const layoutEngine of Object.values(this.engines)) {
            promises.push(layoutEngine.show(params.componentID));
        }
        await Promise.all(promises);
    }
    /**
     * Hide component (instance or clonse) inside the zone.
     *
     * @param params
     */
    async hide(params) {
        const promises = [];
        for (const layoutEngine of Object.values(this.engines)) {
            promises.push(layoutEngine.hide(params.componentID));
        }
        await Promise.all(promises);
    }
    /**
     * Load layout engines.
     *
     * @param layoutEngines
     */
    loadEngines(layoutEngines) {
        for (const EngineClass of layoutEngines) {
            const engine = new EngineClass(this.editor);
            if (this.engines[engine.id]) {
                throw new Error(`Rendering engine ${EngineClass.name} already registered.`);
            }
            this.engines[engine.id] = engine;
        }
    }
    /**
     * Load components into all layout engines.
     *
     * @param Components
     */
    loadComponents(Components) {
        for (const Component of Components) {
            for (const layoutEngine of Object.values(this.engines)) {
                layoutEngine.loadComponent(Component);
            }
        }
    }
    /**
     * Load component zones into all layout engines.
     *
     * @param componentsZones
     */
    loadComponentsZones(componentsZones) {
        const zones = {};
        for (const [id, zone] of componentsZones) {
            zones[id] = zone;
        }
        for (const layoutEngine of Object.values(this.engines)) {
            layoutEngine.loadComponentZones(zones);
        }
    }
}


/***/ }),

/***/ "./packages/plugin-layout/src/LayoutEngine.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-layout/src/LayoutEngine.ts ***!
  \****************************************************/
/*! exports provided: LayoutEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutEngine", function() { return LayoutEngine; });
/* harmony import */ var _ZoneNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ZoneNode */ "./packages/plugin-layout/src/ZoneNode.ts");

class LayoutEngine {
    constructor(editor) {
        this.editor = editor;
        this.componentDefinitions = {};
        this.componentZones = {};
        this.root = new _ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"](['root']);
        this.components = new Map();
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Automatically intanciate the components in available zones.
     */
    async start() {
        let allZones = [this.root, ...this.root.descendants(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"])];
        await this._fillZones(allZones);
        allZones = [this.root, ...this.root.descendants(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"])];
        if (!allZones.find(zone => zone.managedZones.includes('default'))) {
            // Add into the default zone if no valid zone could be found.
            throw new Error('Please define a "default" zone in your template.');
        }
    }
    /**
     * Hide all components.
     */
    async stop() {
        for (const component of this.components.values()) {
            for (const node of component) {
                const zone = node.ancestor(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"]);
                if (zone) {
                    zone.hide(node);
                }
            }
        }
        this.componentDefinitions = {};
        this.componentZones = {};
        this.components.clear();
        this.root.empty();
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Load the given Component in this layout engine.
     *
     * @param componentDefinition
     */
    loadComponent(componentDefinition) {
        this.componentDefinitions[componentDefinition.id] = componentDefinition;
    }
    /**
     * Load component zones in this layout engine.
     *
     * @param componentZones
     */
    loadComponentZones(componentZones) {
        Object.assign(this.componentZones, componentZones);
    }
    /**
     * Add the given node in the given zone if it exists. Otherwise, add it in
     * the default zone.
     * Return every created instance
     *
     * @param componentDefinition
     * @param zoneId
     */
    async add(componentId, zoneId) {
        const allZones = [this.root, ...this.root.descendants(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"])];
        let matchingZones = allZones.filter(node => node.managedZones.includes(zoneId));
        if (!matchingZones.length) {
            matchingZones = allZones.filter(zone => zone.managedZones.includes('default'));
        }
        const componentDefinition = this.componentDefinitions[componentId];
        const newComponents = await this._instantiateComponent(componentDefinition, matchingZones);
        return this._fillZones(newComponents);
    }
    /**
     *
     * Remove the component identified by the given reference from all zones.
     *
     * @param componentId
     */
    async remove(componentId) {
        const components = this.components.get(componentId) || [];
        const zones = [];
        let component;
        while ((component = components.pop())) {
            // Remove all instances in the zone children.
            for (const zone of component.descendants(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"])) {
                for (const child of zone.children()) {
                    zone.removeChild(child);
                    for (const component of this.components) {
                        const nodes = component[1];
                        if (nodes.includes(child)) {
                            nodes.splice(nodes.indexOf(child), 1);
                            break;
                        }
                    }
                }
            }
            // Remove the instance.
            const zone = component.ancestor(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"]);
            if (zone && !zones.includes(zone)) {
                zones.push(zone);
            }
            component.remove();
        }
        return zones;
    }
    /**
     *
     * Show the components corresponding to given ref. Return the updated zones.
     *
     * @param componentId
     */
    async show(componentId) {
        const components = this.components.get(componentId);
        if (!(components === null || components === void 0 ? void 0 : components.length)) {
            console.warn('No component to show. Add it in a zone first.');
        }
        for (const component of components) {
            const zone = component.ancestor(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"]);
            zone.show(component);
        }
        return components;
    }
    /**
     *
     * Hide the components corresponding to given ref. Return the updated zones.
     *
     * @param componentId
     */
    async hide(componentId) {
        const components = this.components.get(componentId) || [];
        for (const component of components) {
            const zone = component.ancestor(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"]);
            zone.hide(component);
        }
        return components;
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    async _fillZones(nodes) {
        const newComponents = [];
        const stack = [...nodes];
        while (stack.length) {
            const node = stack.pop();
            const zones = node.descendants(_ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"]);
            if (node instanceof _ZoneNode__WEBPACK_IMPORTED_MODULE_0__["ZoneNode"]) {
                zones.push(node);
            }
            for (const componentId in this.componentDefinitions) {
                const zoneId = this.componentZones[componentId];
                if (zoneId) {
                    const layoutComponent = this.componentDefinitions[componentId];
                    // Filter the zones corresponding to the given identifier.
                    let matchingZones = zones.filter(zone => zone.managedZones.includes(zoneId));
                    const components = this.components.get(componentId);
                    if (components) {
                        // Excluding the ones that are contained within the given node.
                        // avoid loop with child in itself.
                        matchingZones = matchingZones.filter(zone => !zone.closest(ancestor => components.includes(ancestor)));
                    }
                    stack.push(...(await this._instantiateComponent(layoutComponent, matchingZones)));
                }
            }
            newComponents.push(node);
        }
        return newComponents;
    }
    async _instantiateComponent(componentDefinition, zones) {
        const components = this.components.get(componentDefinition.id) || [];
        // Add into the container.
        const newComponents = [];
        for (const zone of zones) {
            const nodes = await componentDefinition.render(this.editor);
            components.push(...nodes);
            newComponents.push(...nodes);
            zone.append(...nodes);
        }
        // Set the local reference.
        this.components.set(componentDefinition.id, components);
        // Return the components that were newly created.
        return newComponents;
    }
}


/***/ }),

/***/ "./packages/plugin-layout/src/ZoneNode.ts":
/*!************************************************!*\
  !*** ./packages/plugin-layout/src/ZoneNode.ts ***!
  \************************************************/
/*! exports provided: ZoneNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZoneNode", function() { return ZoneNode; });
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");

class ZoneNode extends _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__["ContainerNode"] {
    constructor(managedZones) {
        super();
        this.managedZones = managedZones;
        this.hidden = new Map();
        this.breakable = false;
    }
    get name() {
        return super.name + ': ' + this.managedZones.join();
    }
    hide(child) {
        this.hidden.set(child, true);
        return;
    }
    show(child) {
        this.hidden.set(child, false);
        const parentZone = this.ancestor(ZoneNode);
        if (parentZone) {
            parentZone.show(this);
        }
    }
    _removeAtIndex(index) {
        const child = this.childVNodes[index];
        super._removeAtIndex(index);
        this.hidden.delete(child);
    }
}


/***/ }),

/***/ "./packages/plugin-linebreak/src/LineBreak.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-linebreak/src/LineBreak.ts ***!
  \****************************************************/
/*! exports provided: LineBreak */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineBreak", function() { return LineBreak; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _LineBreakNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LineBreakNode */ "./packages/plugin-linebreak/src/LineBreakNode.ts");
/* harmony import */ var _LineBreakXmlDomParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LineBreakXmlDomParser */ "./packages/plugin-linebreak/src/LineBreakXmlDomParser.ts");
/* harmony import */ var _LineBreakHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LineBreakHtmlDomRenderer */ "./packages/plugin-linebreak/src/LineBreakHtmlDomRenderer.ts");




class LineBreak extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_LineBreakXmlDomParser__WEBPACK_IMPORTED_MODULE_2__["LineBreakXmlDomParser"]],
            renderers: [_LineBreakHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_3__["LineBreakHtmlDomRenderer"]],
        };
        this.commands = {
            insertLineBreak: {
                handler: this.insertLineBreak,
            },
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Insert a line break node at range.
     */
    insertLineBreak() {
        return this.editor.execCommand('insert', {
            node: new _LineBreakNode__WEBPACK_IMPORTED_MODULE_1__["LineBreakNode"](),
        });
    }
}


/***/ }),

/***/ "./packages/plugin-linebreak/src/LineBreakHtmlDomRenderer.ts":
/*!*******************************************************************!*\
  !*** ./packages/plugin-linebreak/src/LineBreakHtmlDomRenderer.ts ***!
  \*******************************************************************/
/*! exports provided: LineBreakHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineBreakHtmlDomRenderer", function() { return LineBreakHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _LineBreakNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LineBreakNode */ "./packages/plugin-linebreak/src/LineBreakNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class LineBreakHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _LineBreakNode__WEBPACK_IMPORTED_MODULE_1__["LineBreakNode"];
    }
    /**
     * Render the VNode to the given format.
     */
    async render(node) {
        const br = document.createElement('br');
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, br);
        const rendering = [br];
        if (!node.nextSibling()) {
            // If a LineBreakNode has no next sibling, it must be rendered
            // as two BRs in order for it to be visible.
            rendering.push(document.createElement('br'));
        }
        return rendering;
    }
}
LineBreakHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-linebreak/src/LineBreakNode.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-linebreak/src/LineBreakNode.ts ***!
  \********************************************************/
/*! exports provided: LineBreakNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineBreakNode", function() { return LineBreakNode; });
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _core_src_VNodes_SeparatorNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/VNodes/SeparatorNode */ "./packages/core/src/VNodes/SeparatorNode.ts");


class LineBreakNode extends _core_src_VNodes_SeparatorNode__WEBPACK_IMPORTED_MODULE_1__["SeparatorNode"] {
    get name() {
        return '↲';
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Transform the given DOM location into its VDocument counterpart.
     *
     * @override
     * @param domNode DOM node corresponding to this VNode
     * @param offset The offset of the location in the given domNode
     */
    locate(domNode, offset) {
        const location = super.locate(domNode, offset);
        // When clicking on a trailing line break, we need to target after the
        // line break. The DOM represents these as 2 <br> so this is a special
        // case.
        if (!this.nextSibling() && !domNode.nextSibling) {
            location[1] = _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_0__["RelativePosition"].AFTER;
        }
        return location;
    }
}


/***/ }),

/***/ "./packages/plugin-linebreak/src/LineBreakXmlDomParser.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-linebreak/src/LineBreakXmlDomParser.ts ***!
  \****************************************************************/
/*! exports provided: LineBreakXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineBreakXmlDomParser", function() { return LineBreakXmlDomParser; });
/* harmony import */ var _LineBreakNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LineBreakNode */ "./packages/plugin-linebreak/src/LineBreakNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_isBlock__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/isBlock */ "./packages/utils/src/isBlock.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");





class LineBreakXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["nodeName"])(item) === 'BR';
        };
    }
    async parse(item) {
        if (this._isInvisibleBR(item)) {
            return [];
        }
        const lineBreak = new _LineBreakNode__WEBPACK_IMPORTED_MODULE_0__["LineBreakNode"]();
        lineBreak.modifiers.append(this.engine.parseAttributes(item));
        return [lineBreak];
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return true if the given <br/> node is invisible. A <br/> at the end edge
     * of a block or before another block is there only to make its parent
     * visible. Consume it since it was just parsed as its parent element node.
     * TODO: account for formatting space.
     *
     * @param node
     */
    _isInvisibleBR(node) {
        // Search for another non-block cousin in the same block parent.
        while (node && !node.nextSibling && node.parentNode && !Object(_utils_src_isBlock__WEBPACK_IMPORTED_MODULE_3__["isBlock"])(node.parentNode)) {
            node = node.parentNode;
        }
        return !node || !node.nextSibling || Object(_utils_src_isBlock__WEBPACK_IMPORTED_MODULE_3__["isBlock"])(node.nextSibling);
    }
}
LineBreakXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-link/assets/LinkForm.xml":
/*!**************************************************!*\
  !*** ./packages/plugin-link/assets/LinkForm.xml ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<templates>\n    <div t-name=\"link\">\n        <h2>Insert a link</h2>\n        <table class=\"form-table\">\n            <tr>\n                <td><label for=\"linkUrl\">URL </label></td>\n                <td><input type=\"text\" id=\"linkUrl\" name=\"url\" t-model=\"state.url\"/></td>\n            </tr>\n            <tr>\n                <td><label for=\"linkLabel\">Label </label></td>\n                <td><input type=\"text\" id=\"linkLabel\" name=\"label\" t-model=\"state.label\"/></td>\n            </tr>\n        </table>\n        <br/>\n        <button name=\"save\" t-on-click=\"saveLink()\">Save</button> <button name=\"save\" t-on-click=\"cancel()\">Cancel</button>\n    </div>\n</templates>\n"

/***/ }),

/***/ "./packages/plugin-link/src/Link.ts":
/*!******************************************!*\
  !*** ./packages/plugin-link/src/Link.ts ***!
  \******************************************/
/*! exports provided: Link */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Link", function() { return Link; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _LinkXmlDomParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LinkXmlDomParser */ "./packages/plugin-link/src/LinkXmlDomParser.ts");
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");
/* harmony import */ var _LinkFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LinkFormat */ "./packages/plugin-link/src/LinkFormat.ts");
/* harmony import */ var _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/src/Modifiers */ "./packages/core/src/Modifiers.ts");
/* harmony import */ var _core_src_VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/src/VNodes/AbstractNode */ "./packages/core/src/VNodes/AbstractNode.ts");
/* harmony import */ var _assets_LinkForm_xml__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../assets/LinkForm.xml */ "./packages/plugin-link/assets/LinkForm.xml");
/* harmony import */ var _assets_LinkForm_xml__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_assets_LinkForm_xml__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");









class Link extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            link: {
                handler: this.link,
            },
            unlink: {
                handler: this.unlink,
            },
        };
        this.loadables = {
            parsers: [_LinkXmlDomParser__WEBPACK_IMPORTED_MODULE_2__["LinkXmlDomParser"]],
            shortcuts: [
                {
                    pattern: 'CTRL+K',
                    selector: [(node) => !Link.isLink(node)],
                    commandId: 'link',
                },
                {
                    pattern: 'CTRL+K',
                    selector: [Link.isLink],
                    commandId: 'unlink',
                },
            ],
            // componentZones: [['link', 'float']],
            owlTemplates: [_assets_LinkForm_xml__WEBPACK_IMPORTED_MODULE_7___default.a],
        };
    }
    static isLink(link, node) {
        if (link instanceof _core_src_VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_6__["AbstractNode"]) {
            node = link;
        }
        const format = node.is(_plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_3__["InlineNode"]) && node.modifiers.find(_LinkFormat__WEBPACK_IMPORTED_MODULE_4__["LinkFormat"]);
        return link instanceof _core_src_VNodes_AbstractNode__WEBPACK_IMPORTED_MODULE_6__["AbstractNode"] ? !!format : format === link;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    async link(params) {
        // // If the url is undefined, ask the user to provide one.
        // if (!params.url) {
        //     const layout = this.editor.plugins.get(Layout);
        //     await layout.remove('link');
        //     await layout.add('link');
        //     return this.editor.execCommand('show', { componentID: 'link' });
        // }
        const link = new _LinkFormat__WEBPACK_IMPORTED_MODULE_4__["LinkFormat"](params.url);
        if (params.target) {
            link.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_8__["Attributes"]).set('target', params.target);
        }
        // // TODO: modal re-using url
        // if (!link) return;
        // if (range.isCollapsed()) {
        console.log('params:', params);
        console.log('link:', link);
        this.editor.execCommand('insertText', {
            text: params.label || link.url,
            formats: new _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_5__["Modifiers"](link),
            select: true,
            context: params.context,
        });
        // } else {
        //     for (const inline of selectedInlines) {
        //         inline.formats.replace(LinkFormat, link);
        //     }
        // }
    }
    unlink(params) {
        const range = params.context.range;
        const node = range.start.previousSibling() || range.start.nextSibling();
        if (!node.is(_plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_3__["InlineNode"]))
            return;
        const link = node.modifiers.find(_LinkFormat__WEBPACK_IMPORTED_MODULE_4__["LinkFormat"]);
        if (!link)
            return;
        const sameLink = Link.isLink.bind(Link, link);
        for (const inline of [node, ...node.adjacents(sameLink)]) {
            inline.modifiers.remove(link);
        }
    }
}
Link.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__["Inline"]];


/***/ }),

/***/ "./packages/plugin-link/src/LinkFormat.ts":
/*!************************************************!*\
  !*** ./packages/plugin-link/src/LinkFormat.ts ***!
  \************************************************/
/*! exports provided: LinkFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkFormat", function() { return LinkFormat; });
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");

class LinkFormat extends _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__["Format"] {
    constructor(url = '#', target = '') {
        super('A');
        this.url = url;
        this.target = target;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * @override
     */
    render() {
        const element = super.render();
        element.setAttribute('href', this.url);
        return element;
    }
    /**
     * @override
     */
    clone() {
        const clone = super.clone();
        clone.url = this.url;
        return clone;
    }
}


/***/ }),

/***/ "./packages/plugin-link/src/LinkXmlDomParser.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-link/src/LinkXmlDomParser.ts ***!
  \******************************************************/
/*! exports provided: LinkXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkXmlDomParser", function() { return LinkXmlDomParser; });
/* harmony import */ var _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatParser */ "./packages/plugin-inline/src/FormatParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _LinkFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LinkFormat */ "./packages/plugin-link/src/LinkFormat.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");





class LinkXmlDomParser extends _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__["FormatParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'A';
        };
    }
    async parse(item) {
        var _a;
        const link = new _LinkFormat__WEBPACK_IMPORTED_MODULE_2__["LinkFormat"](item.getAttribute('href'));
        link.modifiers.append(this.engine.parseAttributes(item));
        (_a = link.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"])) === null || _a === void 0 ? void 0 : _a.remove('href'); // href is on link.url
        const children = await this.engine.parse(...item.childNodes);
        this.applyFormat(link, children);
        return children;
    }
}
LinkXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-list/src/List.ts":
/*!******************************************!*\
  !*** ./packages/plugin-list/src/List.ts ***!
  \******************************************/
/*! exports provided: List */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "List", function() { return List; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _ListNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListNode */ "./packages/plugin-list/src/ListNode.ts");
/* harmony import */ var _ListHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ListHtmlDomRenderer */ "./packages/plugin-list/src/ListHtmlDomRenderer.ts");
/* harmony import */ var _ListItemHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListItemHtmlDomRenderer */ "./packages/plugin-list/src/ListItemHtmlDomRenderer.ts");
/* harmony import */ var _ListXmlDomParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListXmlDomParser */ "./packages/plugin-list/src/ListXmlDomParser.ts");
/* harmony import */ var _ListItemXmlDomParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListItemXmlDomParser */ "./packages/plugin-list/src/ListItemXmlDomParser.ts");
/* harmony import */ var _core_src_VRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/src/VRange */ "./packages/core/src/VRange.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");








class List extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            toggleList: {
                title: 'Toggle list',
                handler: this.toggleList,
            },
            indent: {
                title: 'Indent list items',
                selector: [_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]],
                handler: this.indent,
            },
            outdent: {
                title: 'Outdent list items',
                selector: [_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]],
                handler: this.outdent,
            },
            insertParagraphBreak: {
                selector: [_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"], List.isListItem],
                check: (context) => {
                    const [list, listItem] = context.selector;
                    return !listItem.hasChildren() && listItem === list.lastChild();
                },
                handler: this.insertParagraphBreak,
            },
        };
        this.commandHooks = {
            // TODO: replace this with `onSiblingsChange` when we introduce events.
            deleteBackward: this.rejoin.bind(this),
            deleteForward: this.rejoin.bind(this),
        };
        this.loadables = {
            parsers: [_ListXmlDomParser__WEBPACK_IMPORTED_MODULE_4__["ListXmlDomParser"], _ListItemXmlDomParser__WEBPACK_IMPORTED_MODULE_5__["ListItemXmlDomParser"]],
            renderers: [_ListItemHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_3__["ListItemHtmlDomRenderer"], _ListHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["ListHtmlDomRenderer"]],
            shortcuts: [
                {
                    pattern: 'CTRL+SHIFT+<Digit7>',
                    commandId: 'toggleList',
                    commandArgs: { type: _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListType"].ORDERED },
                },
                {
                    pattern: 'CTRL+SHIFT+<Digit8>',
                    commandId: 'toggleList',
                    commandArgs: { type: _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListType"].UNORDERED },
                },
                {
                    pattern: 'Backspace',
                    selector: [List.isListItem],
                    check: (context) => {
                        return !context.range.start.previousSibling();
                    },
                    commandId: 'outdent',
                },
            ],
        };
    }
    static isListItem(node) {
        return node.parent && node.parent.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]);
    }
    static isInList(type, node) {
        var _a;
        return ((_a = node === null || node === void 0 ? void 0 : node.ancestor(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"])) === null || _a === void 0 ? void 0 : _a.listType) === type;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Insert/remove a list at range.
     *
     * @param params
     */
    toggleList(params) {
        const type = params.type;
        const range = params.context.range;
        Object(_core_src_VRange__WEBPACK_IMPORTED_MODULE_6__["withRange"])(_core_src_VRange__WEBPACK_IMPORTED_MODULE_6__["VRange"].clone(range), range => {
            // Extend the range to cover the entirety of its containers.
            if (range.startContainer.hasChildren()) {
                range.setStart(range.startContainer.firstChild());
            }
            if (range.endContainer.hasChildren()) {
                range.setEnd(range.endContainer.lastChild());
            }
            // If all targeted nodes are within a list of given type then unlist
            // them. Otherwise, convert them to the given list type.
            const targetedNodes = range.targetedNodes();
            const ancestors = targetedNodes.map(node => node.closest(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]));
            const targetedLists = ancestors.filter(list => !!list);
            if (targetedLists.length === targetedNodes.length &&
                targetedLists.every(list => list.listType === type)) {
                // Unlist the targeted nodes from all its list ancestors.
                while (range.start.ancestor(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"])) {
                    const nodesToUnlist = range.split(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]);
                    for (const list of nodesToUnlist) {
                        for (const nestedList of list.descendants(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"])) {
                            // TODO: automatically invalidate `ListItemAttributes`.
                            for (const child of nestedList.childVNodes) {
                                child.modifiers.remove(_ListItemXmlDomParser__WEBPACK_IMPORTED_MODULE_5__["ListItemAttributes"]);
                            }
                            nestedList.unwrap();
                        }
                        list.unwrap();
                    }
                }
            }
            else if (targetedLists.length === targetedNodes.length) {
                // If all nodes are in lists, convert the targeted list
                // nodes to the given list type.
                const lists = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_7__["distinct"])(targetedLists);
                const listsToConvert = lists.filter(l => l.listType !== type);
                for (const list of listsToConvert) {
                    let newList = new _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]({ listType: type });
                    list.replaceWith(newList);
                    // If the new list is after or before a list of the same
                    // type, merge them. Example:
                    // <ol><li>a</li></ol><ol><li>b</li></ol>
                    // => <ol><li>a</li><li>b</li></ol>).
                    const previousSibling = newList.previousSibling();
                    if (previousSibling && previousSibling.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"][type])) {
                        newList.mergeWith(previousSibling);
                        newList = previousSibling;
                    }
                    const nextSibling = newList.nextSibling();
                    if (nextSibling && nextSibling.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"][type])) {
                        nextSibling.mergeWith(newList);
                    }
                }
            }
            else {
                // If only some nodes are in lists and other aren't then only
                // wrap the ones that were not already in a list into a list of
                // the given type.
                let newList = new _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]({ listType: type });
                const nodesToConvert = range.split(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]);
                for (const node of nodesToConvert) {
                    node.wrap(newList);
                    // Merge top-level lists instead of nesting them.
                    if (node.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"])) {
                        node.mergeWith(newList);
                    }
                }
                // If the new list is after or before a list of the same type,
                // merge them. Example:
                // <ol><li>a</li></ol><ol><li>b</li></ol>
                // => <ol><li>a</li><li>b</li></ol>).
                const previousSibling = newList.previousSibling();
                if (previousSibling && previousSibling.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"][type])) {
                    newList.mergeWith(previousSibling);
                    newList = previousSibling;
                }
                const nextSibling = newList.nextSibling();
                if (nextSibling && nextSibling.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"][type])) {
                    nextSibling.mergeWith(newList);
                }
            }
        });
    }
    /**
     * Indent one or more list items.
     *
     * @param params
     */
    indent(params) {
        const range = params.context.range;
        const items = range.targetedNodes(node => { var _a; return (_a = node.parent) === null || _a === void 0 ? void 0 : _a.test(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]); });
        // Do not indent items of a targeted nested list, since they
        // will automatically be indented with their list ancestor.
        const itemsToIndent = items.filter(item => {
            return !items.includes(item.ancestor(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]));
        });
        if (!itemsToIndent.length)
            return;
        for (const item of itemsToIndent) {
            const prev = item.previousSibling();
            const next = item.nextSibling();
            // Indent the item by putting it into a pre-existing list sibling.
            if (prev && prev.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"])) {
                prev.append(item);
                // The two list siblings might be rejoinable now that the lower
                // level item breaking them into two different lists is no more.
                const listType = prev.listType;
                if (_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"][listType](next) && !itemsToIndent.includes(next)) {
                    next.mergeWith(prev);
                }
            }
            else if ((next === null || next === void 0 ? void 0 : next.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"])) && !itemsToIndent.includes(next)) {
                next.prepend(item);
            }
            else {
                // If no other candidate exists then wrap it in a new ListNode.
                const listType = item.ancestor(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]).listType;
                item.wrap(new _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]({ listType: listType }));
            }
        }
    }
    /**
     * Outdent one or more list items.
     *
     * @param params
     */
    outdent(params) {
        const range = params.context.range;
        const items = range.targetedNodes(node => { var _a; return (_a = node.parent) === null || _a === void 0 ? void 0 : _a.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]); });
        // Do not outdent items of a targeted nested list, since they
        // will automatically be outdented with their list ancestor.
        const itemsToOutdent = items.filter(item => {
            return !items.includes(item.ancestor(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]));
        });
        if (!itemsToOutdent.length)
            return;
        for (const item of itemsToOutdent) {
            const list = item.ancestor(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]);
            const previousSibling = item.previousSibling();
            const nextSibling = item.nextSibling();
            if (previousSibling && nextSibling) {
                const splitList = item.parent.splitAt(item);
                splitList.before(item);
            }
            else if (previousSibling) {
                list.after(item);
            }
            else if (nextSibling) {
                list.before(item);
            }
            else {
                list.unwrap();
            }
        }
    }
    /**
     * Insert a paragraph break in the last empty item of a list by unwrapping
     * the list item from the list, thus becoming the new paragraph.
     *
     * @param params
     */
    insertParagraphBreak(params) {
        const range = params.context.range;
        const listItem = range.startContainer;
        const listNode = listItem.ancestor(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]);
        if (listNode.children().length === 1) {
            listNode.unwrap();
        }
        else {
            listNode.after(listItem);
        }
    }
    /**
     * Rejoin same type lists that are now direct siblings after the remove.
     *
     * @param params
     */
    rejoin(params) {
        const range = params.context.range;
        const listAncestors = range.start.ancestors(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]);
        if (listAncestors.length) {
            let list = listAncestors[listAncestors.length - 1];
            let nextSibling = list && list.nextSibling();
            while (list &&
                nextSibling &&
                list.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"]) &&
                nextSibling.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"][list.listType])) {
                const nextList = list.lastChild();
                const nextListSibling = nextSibling.firstChild();
                nextSibling.mergeWith(list);
                list = nextList;
                nextSibling = nextListSibling;
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-list/src/ListButtons.ts":
/*!*************************************************!*\
  !*** ./packages/plugin-list/src/ListButtons.ts ***!
  \*************************************************/
/*! exports provided: OrderedListButton, UnorderedListButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderedListButton", function() { return OrderedListButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnorderedListButton", function() { return UnorderedListButton; });
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./List */ "./packages/plugin-list/src/List.ts");
/* harmony import */ var _ListNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListNode */ "./packages/plugin-list/src/ListNode.ts");


const OrderedListButton = {
    title: 'Toggle ordered list',
    class: 'fa-list-ol',
    commandId: 'toggleList',
    commandArgs: { type: _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListType"].ORDERED },
    selected: (editor) => {
        const targetedNodes = editor.selection.range.targetedNodes();
        return targetedNodes.every(_List__WEBPACK_IMPORTED_MODULE_0__["List"].isInList.bind(_List__WEBPACK_IMPORTED_MODULE_0__["List"], _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListType"].ORDERED));
    },
};
const UnorderedListButton = {
    title: 'Toggle unordered list',
    class: 'fa-list-ul',
    commandId: 'toggleList',
    commandArgs: { type: _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListType"].UNORDERED },
    selected: (editor) => {
        const targetedNodes = editor.selection.range.targetedNodes();
        return targetedNodes.every(_List__WEBPACK_IMPORTED_MODULE_0__["List"].isInList.bind(_List__WEBPACK_IMPORTED_MODULE_0__["List"], _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListType"].UNORDERED));
    },
};


/***/ }),

/***/ "./packages/plugin-list/src/ListHtmlDomRenderer.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-list/src/ListHtmlDomRenderer.ts ***!
  \*********************************************************/
/*! exports provided: ListHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListHtmlDomRenderer", function() { return ListHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _ListNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListNode */ "./packages/plugin-list/src/ListNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class ListHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"];
    }
    async render(node) {
        const tag = node.listType === _ListNode__WEBPACK_IMPORTED_MODULE_1__["ListType"].ORDERED ? 'OL' : 'UL';
        const domListNode = document.createElement(tag);
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, domListNode);
        const renderedChildren = await this.renderChildren(node);
        domListNode.append(...renderedChildren.flat());
        return [domListNode];
    }
}
ListHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-list/src/ListItemHtmlDomRenderer.ts":
/*!*************************************************************!*\
  !*** ./packages/plugin-list/src/ListItemHtmlDomRenderer.ts ***!
  \*************************************************************/
/*! exports provided: ListItemHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListItemHtmlDomRenderer", function() { return ListItemHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _ListNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListNode */ "./packages/plugin-list/src/ListNode.ts");
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./List */ "./packages/plugin-list/src/List.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _ListItemXmlDomParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListItemXmlDomParser */ "./packages/plugin-list/src/ListItemXmlDomParser.ts");






class ListItemHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _List__WEBPACK_IMPORTED_MODULE_3__["List"].isListItem;
    }
    async render(node) {
        const domListItem = document.createElement('li');
        if (node.is(_ListNode__WEBPACK_IMPORTED_MODULE_1__["ListNode"])) {
            if (!domListItem.style.listStyle) {
                domListItem.style.listStyle = 'none';
            }
        }
        // Direct ListNode's VElement children "P" are rendered as "LI"
        // while other nodes will be rendered inside the "LI".
        if (node.is(_core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_2__["VElement"]) && node.htmlTag === 'P') {
            const renderedChildren = await this.renderChildren(node);
            domListItem.append(...renderedChildren.flat());
        }
        else {
            // The node was wrapped in a "LI" but needs to be rendered as well.
            const renderedNode = await this.super.render(node);
            domListItem.append(...renderedNode);
        }
        // Render the node's attributes that were stored on the technical key
        // that specifies those attributes belong on the list item.
        this.engine.renderAttributes(_ListItemXmlDomParser__WEBPACK_IMPORTED_MODULE_5__["ListItemAttributes"], node, domListItem);
        return [domListItem];
    }
}
ListItemHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_4__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-list/src/ListItemXmlDomParser.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-list/src/ListItemXmlDomParser.ts ***!
  \**********************************************************/
/*! exports provided: ListItemAttributes, ListItemXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListItemAttributes", function() { return ListItemAttributes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListItemXmlDomParser", function() { return ListItemXmlDomParser; });
/* harmony import */ var _utils_src_isBlock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/src/isBlock */ "./packages/utils/src/isBlock.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");
/* harmony import */ var _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/src/Modifiers */ "./packages/core/src/Modifiers.ts");






class ListItemAttributes extends _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"] {
}
class ListItemXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_2__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["nodeName"])(item) === 'LI';
        };
    }
    /**
     * Parse a list element (LI).
     *
     * @param context
     */
    async parse(item) {
        const children = Array.from(item.childNodes);
        // A list item with no children should be skipped.
        if (!children.length) {
            return [];
        }
        const nodes = [];
        let inlinesContainer;
        // Parse the list item's attributes into the node's ListItemAttributes,
        // which will be read only by ListItemDomRenderer.
        const itemModifiers = new _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_5__["Modifiers"](this.engine.parseAttributes(item));
        const Container = this.engine.editor.configuration.defaults.Container;
        for (let childIndex = 0; childIndex < children.length; childIndex++) {
            const domChild = children[childIndex];
            const parsedChild = await this.engine.parse(domChild);
            if (parsedChild.length) {
                if (this._isInlineListItem(domChild)) {
                    // Contiguous inline elements in a list item should be
                    // wrapped together in a base container.
                    if (!inlinesContainer) {
                        inlinesContainer = new Container();
                        inlinesContainer.modifiers.append(new ListItemAttributes(itemModifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"])));
                        nodes.push(inlinesContainer);
                    }
                    inlinesContainer.append(...parsedChild);
                }
                else {
                    inlinesContainer = null; // Close the inlinesContainer.
                    for (const child of parsedChild) {
                        child.modifiers.replace(ListItemAttributes, new ListItemAttributes(itemModifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"])));
                    }
                    nodes.push(...parsedChild);
                }
            }
        }
        // A list item with children but whose parsing returned nothing should
        // be parsed as an empty base container. Eg: <li><br/></li>: li has a
        // child so it will not return [] above (and therefore be ignored), but
        // br will parse to nothing because it's a placeholder br, not a real
        // line break. We cannot ignore that li because it does in fact exist so
        // we parse it as an empty base container.
        return nodes.length ? nodes : [new Container()];
    }
    /**
     * Return true if the given node is an inline list item.
     *
     * @param item
     */
    _isInlineListItem(item) {
        return item && (!Object(_utils_src_isBlock__WEBPACK_IMPORTED_MODULE_0__["isBlock"])(item) || Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_1__["nodeName"])(item) === 'BR');
    }
}
ListItemXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_3__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-list/src/ListNode.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-list/src/ListNode.ts ***!
  \**********************************************/
/*! exports provided: ListType, ListNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListType", function() { return ListType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListNode", function() { return ListNode; });
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");

var ListType;
(function (ListType) {
    ListType["ORDERED"] = "ORDERED";
    ListType["UNORDERED"] = "UNORDERED";
})(ListType || (ListType = {}));
class ListNode extends _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__["ContainerNode"] {
    constructor(params) {
        super();
        this.listType = params.listType;
    }
    // Typescript currently doesn't support using enum as keys in interfaces.
    // Source: https://github.com/microsoft/TypeScript/issues/13042
    static ORDERED(node) {
        return node && node.is(ListNode) && node.listType === ListType.ORDERED;
    }
    static UNORDERED(node) {
        return node && node.is(ListNode) && node.listType == ListType.UNORDERED;
    }
    get name() {
        return super.name + ': ' + this.listType;
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a new VNode with the same type and attributes as this VNode.
     *
     *  @override
     */
    clone(deepClone, params) {
        const defaults = {
            listType: this.listType,
        };
        return super.clone(deepClone, { ...defaults, ...params });
    }
}


/***/ }),

/***/ "./packages/plugin-list/src/ListXmlDomParser.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-list/src/ListXmlDomParser.ts ***!
  \******************************************************/
/*! exports provided: ListXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListXmlDomParser", function() { return ListXmlDomParser; });
/* harmony import */ var _ListNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListNode */ "./packages/plugin-list/src/ListNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




const listTags = ['UL', 'OL'];
class ListXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && listTags.includes(Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item));
        };
    }
    /**
     * Parse a list (UL, OL) and his children list elements (LI).
     *
     * @param context
     */
    async parse(item) {
        if (!listTags.includes(Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item)))
            return;
        const listType = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'UL' ? _ListNode__WEBPACK_IMPORTED_MODULE_0__["ListType"].UNORDERED : _ListNode__WEBPACK_IMPORTED_MODULE_0__["ListType"].ORDERED;
        const listNode = new _ListNode__WEBPACK_IMPORTED_MODULE_0__["ListNode"]({ listType });
        listNode.modifiers.append(this.engine.parseAttributes(item));
        const nodes = await this.engine.parse(...item.childNodes);
        listNode.append(...nodes);
        return [listNode];
    }
}
ListXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-metadata/src/MetaDataHtmlDomRenderer.ts":
/*!*****************************************************************!*\
  !*** ./packages/plugin-metadata/src/MetaDataHtmlDomRenderer.ts ***!
  \*****************************************************************/
/*! exports provided: MetadataHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetadataHtmlDomRenderer", function() { return MetadataHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _MetadataNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MetadataNode */ "./packages/plugin-metadata/src/MetadataNode.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class MetadataHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _MetadataNode__WEBPACK_IMPORTED_MODULE_2__["MetadataNode"];
    }
    async render(node) {
        const domNode = document.createElement(node.htmlTag);
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, domNode);
        domNode.innerHTML = node.contents;
        return [domNode];
    }
}
MetadataHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-metadata/src/Metadata.ts":
/*!**************************************************!*\
  !*** ./packages/plugin-metadata/src/Metadata.ts ***!
  \**************************************************/
/*! exports provided: Metadata */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Metadata", function() { return Metadata; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _MetadataXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MetadataXmlDomParser */ "./packages/plugin-metadata/src/MetadataXmlDomParser.ts");
/* harmony import */ var _MetaDataHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MetaDataHtmlDomRenderer */ "./packages/plugin-metadata/src/MetaDataHtmlDomRenderer.ts");



class Metadata extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_MetadataXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["MetadataXmlDomParser"]],
            renderers: [_MetaDataHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["MetadataHtmlDomRenderer"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-metadata/src/MetadataNode.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-metadata/src/MetadataNode.ts ***!
  \******************************************************/
/*! exports provided: MetadataNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetadataNode", function() { return MetadataNode; });
/* harmony import */ var _core_src_VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/MarkerNode */ "./packages/core/src/VNodes/MarkerNode.ts");

class MetadataNode extends _core_src_VNodes_MarkerNode__WEBPACK_IMPORTED_MODULE_0__["MarkerNode"] {
    constructor(htmlTag) {
        super();
        this.contents = '';
        this.htmlTag = htmlTag;
    }
    get name() {
        return this.constructor.name + ': ' + this.htmlTag;
    }
}
MetadataNode.atomic = true;


/***/ }),

/***/ "./packages/plugin-metadata/src/MetadataXmlDomParser.ts":
/*!**************************************************************!*\
  !*** ./packages/plugin-metadata/src/MetadataXmlDomParser.ts ***!
  \**************************************************************/
/*! exports provided: MetadataXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetadataXmlDomParser", function() { return MetadataXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _MetadataNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MetadataNode */ "./packages/plugin-metadata/src/MetadataNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




// See https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Metadata_content
const METADATA_NODENAMES = [
    'BASE',
    'COMMAND',
    'LINK',
    'META',
    'NOSCRIPT',
    'SCRIPT',
    'STYLE',
    'TITLE',
];
class MetadataXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && METADATA_NODENAMES.includes(Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item));
        };
    }
    async parse(item) {
        const technical = new _MetadataNode__WEBPACK_IMPORTED_MODULE_2__["MetadataNode"](Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item));
        technical.modifiers.append(this.engine.parseAttributes(item));
        technical.contents = item.innerHTML;
        return [technical];
    }
}
MetadataXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/LinkButton.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/LinkButton.ts ***!
  \*********************************************************/
/*! exports provided: LinkButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkButton", function() { return LinkButton; });
const LinkButton = {
    title: 'Link',
    commandId: 'openLinkDialog',
    class: 'fa-link',
};


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/MediaButton.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/MediaButton.ts ***!
  \**********************************************************/
/*! exports provided: MediaButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaButton", function() { return MediaButton; });
const MediaButton = {
    title: 'Media',
    commandId: 'openMedia',
    class: 'fa-file-image-o',
};


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/OdooBindings.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/OdooBindings.ts ***!
  \***********************************************************/
/*! exports provided: createExecCommandHelpersForOdoo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createExecCommandHelpersForOdoo", function() { return createExecCommandHelpersForOdoo; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");




function createExecCommandHelpersForOdoo(editor) {
    const layout = editor.plugins.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_3__["Layout"]);
    const domEngine = layout.engines.dom;
    function _getVElements(node) {
        const vnodes = domEngine.getNodes(node);
        for (const vnode of vnodes) {
            if (!(vnode instanceof _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"])) {
                throw new Error('VNode is not a VElement');
            }
        }
        return vnodes;
    }
    const odooCommands = {
        hasVNode(node) {
            const vnodes = domEngine.getNodes(node);
            return !!(vnodes && vnodes.length);
        },
        async addClasses(node, classes) {
            const params = {
                elements: _getVElements(node),
                classes,
            };
            await editor.execCommand('addClasses', params);
        },
        async removeClasses(node, classes) {
            const params = {
                elements: _getVElements(node),
                classes,
            };
            await editor.execCommand('removeClasses', params);
        },
        async toggleClass(node, klass, set) {
            const nodes = domEngine.getNodes(node);
            if (!nodes) {
                throw new Error('nodes are empty');
            }
            const params = {
                nodes: nodes,
                class: klass,
                set,
            };
            await editor.execCommand('toggleClass', params);
        },
        async setAttribute(node, attributeName, attributeValue) {
            const params = {
                elements: _getVElements(node),
                attributeName,
                attributeValue,
            };
            await editor.execCommand('setAttribute', params);
        },
        async setStyle(node, property, value, important = false) {
            const params = {
                nodes: domEngine.getNodes(node),
                property,
                value,
                important,
            };
            await editor.execCommand('setStyle', params);
        },
        // todo: sometimes i need to append. Because the implementation of the insertHTML append
        // it when the RelativePosition is 'inside', it work. But this is unclear that it will
        // append.
        // Change the API to have a clearer distinction and allowing to append/prepend;
        async insertHtml(rangePoint, html) {
            const vnode = domEngine.getNodes(rangePoint[0])[0];
            const params = {
                rangePoint: [vnode, rangePoint[1]],
                html,
            };
            return await editor.execCommand('insertHtml', params);
        },
        async moveBefore(fromNode, toNode) {
            const fromVNode = domEngine.getNodes(fromNode)[0];
            const toVNode = domEngine.getNodes(toNode)[0];
            const params = {
                from: fromVNode,
                to: [toVNode, _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].BEFORE],
            };
            return await editor.execCommand('move', params);
        },
        async moveAfter(fromNode, toNode) {
            const fromVNode = domEngine.getNodes(fromNode)[0];
            const toVNode = domEngine.getNodes(toNode)[0];
            const params = {
                from: fromVNode,
                to: [toVNode, _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_1__["RelativePosition"].AFTER],
            };
            return await editor.execCommand('move', params);
        },
        async remove(node) {
            const params = {
                vnodes: domEngine.getNodes(node),
            };
            return await editor.execCommand('remove', params);
        },
        exists(node) {
            return !!domEngine.getNodes(node);
        },
        async empty(node) {
            const params = {
                vnodes: domEngine.getNodes(node),
            };
            return await editor.execCommand('empty', params);
        },
        async wrap(node, html) {
            const container = domEngine.getNodes(node)[0];
            if (!(container instanceof _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_2__["ContainerNode"])) {
                throw new Error('The provided node must be a ContainerNode in the jabberwock structure');
            }
            const params = {
                container,
                html,
            };
            return await editor.execCommand('empty', params);
        },
        async replace(node, html) {
            const params = {
                nodes: domEngine.getNodes(node),
                html,
            };
            return await editor.execCommand('replace', params);
        },
    };
    return odooCommands;
}


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/OdooImageHtmlDomRenderer.ts":
/*!***********************************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/OdooImageHtmlDomRenderer.ts ***!
  \***********************************************************************/
/*! exports provided: OdooImageHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooImageHtmlDomRenderer", function() { return OdooImageHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_image_src_ImageNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-image/src/ImageNode */ "./packages/plugin-image/src/ImageNode.ts");



function isElement(node) {
    return node.nodeType === node.ELEMENT_NODE;
}
// export interface OpenImageParams {
//     image: ImageNode;
// }
class OdooImageHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _plugin_image_src_ImageNode__WEBPACK_IMPORTED_MODULE_2__["ImageNode"];
    }
    async render(node) {
        const nodes = await this.super.render(node);
        const image = nodes.length &&
            nodes.find(node => isElement(node) && node.nodeName.toUpperCase() === 'IMG');
        if (image) {
            image.addEventListener('dblclick', e => {
                const params = { image: node };
                this.engine.editor.execCommand('openMedia', params);
                // e.preventDefault();
                // e.stopPropagation();
                // e.stopImmediatePropagation();
                // alert('dblclick');
                // this.engine.editor.nextEventMutex(() => {
                //     this.engine.editor.execCustomCommand(async () => {
                //         console.log('selecting');
                //         this.engine.editor.selection.select(node, node);
                //     });
                // });
                // console.log('clicked');
            });
        }
        return nodes;
    }
}
OdooImageHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/OdooSnippet.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/OdooSnippet.ts ***!
  \**********************************************************/
/*! exports provided: OdooSnippet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooSnippet", function() { return OdooSnippet; });
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plugin-layout/src/Layout */ "./packages/plugin-layout/src/Layout.ts");
/* harmony import */ var _OdooStructureNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./OdooStructureNode */ "./packages/plugin-odoo-snippets/src/OdooStructureNode.ts");
/* harmony import */ var _OdooStrucutreXmlDomParser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./OdooStrucutreXmlDomParser */ "./packages/plugin-odoo-snippets/src/OdooStrucutreXmlDomParser.ts");
/* harmony import */ var _OdooImageHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./OdooImageHtmlDomRenderer */ "./packages/plugin-odoo-snippets/src/OdooImageHtmlDomRenderer.ts");
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_link_src_LinkFormat__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../plugin-link/src/LinkFormat */ "./packages/plugin-link/src/LinkFormat.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../plugin-char/src/CharNode */ "./packages/plugin-char/src/CharNode.ts");















class OdooSnippet extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_1__["JWPlugin"] {
    constructor(editor, configuration) {
        super(editor, configuration);
        this.editor = editor;
        this.configuration = configuration;
        this.loadables = {
            parsers: [_OdooStrucutreXmlDomParser__WEBPACK_IMPORTED_MODULE_8__["OdooStrucutreXmlDomParser"]],
            renderers: [_OdooImageHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_9__["OdooImageHtmlDomRenderer"]],
            shortcuts: [],
        };
        this.commands = {
            removeClasses: {
                handler: this.removeClasses.bind(this),
            },
            addClasses: {
                handler: this.addClasses.bind(this),
            },
            addClassToLink: {
                handler: this.addClassToLink.bind(this),
            },
            toggleClass: {
                handler: this.toggleClass.bind(this),
            },
            setAttribute: {
                handler: this.setAttribute.bind(this),
            },
            setStyle: {
                handler: this.setStyle.bind(this),
            },
            move: {
                handler: this.move.bind(this),
            },
            remove: {
                handler: this.remove.bind(this),
            },
            empty: {
                handler: this.empty.bind(this),
            },
            wrap: {
                handler: this.wrap.bind(this),
            },
            replace: {
                handler: this.replace.bind(this),
            },
            getStructures: {
                handler: this.getStructures.bind(this),
            },
            getRecordCover: {
                handler: this.getRecordCover.bind(this),
            },
            getLinkInfo: {
                handler: this.getLinkInfo.bind(this),
            },
        };
    }
    removeClasses(params) {
        // todo: use range rather than params.elements
        for (const element of params.elements) {
            for (const className of params.classes) {
                element.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"]).classList.remove(className);
            }
        }
    }
    addClasses(params) {
        var _a;
        // todo: remeve elements and only use a range.
        let nodes;
        if (params.elements) {
            nodes = params.elements;
        }
        else {
            nodes = ((_a = params.context) === null || _a === void 0 ? void 0 : _a.range.selectedNodes()) || [];
        }
        for (const element of nodes) {
            for (const className of params.classes) {
                element.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"]).classList.add(className);
            }
        }
    }
    addClassToLink(params) {
        console.log('addclasstolink');
        console.log('params.context.range:', params.context.range);
        console.log('params.context.range.start:', params.context.range.start);
        console.log('params.context.range.targetedNodes():', params.context.range.targetedNodes());
        console.log('params.context.range.traversedNodes():', params.context.range.traversedNodes());
        const nodes = params.context.range.targetedNodes(_plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_10__["InlineNode"]);
        console.log('nodes:', nodes);
        for (const node of nodes) {
            node.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"]).set('class', params.class);
        }
    }
    toggleClass(params) {
        for (const node of params.nodes) {
            const classList = node.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"]).classList;
            const value = typeof params.set !== 'undefined' ? params.set : !classList.has(params.class);
            if (value) {
                classList.add(params.class);
            }
            else {
                classList.remove(params.class);
            }
        }
    }
    setAttribute(params) {
        for (const element of params.elements) {
            element.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"]).set(params.attributeName, params.attributeValue);
        }
    }
    setStyle(params) {
        for (const node of params.nodes) {
            const value = params.important ? params.value + ' !important' : params.value;
            node.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"]).style.set(params.property, value);
        }
    }
    move(params) {
        switch (params.to[1]) {
            case _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_4__["RelativePosition"].AFTER:
                params.from.after(params.to[0]);
                break;
            case _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_4__["RelativePosition"].BEFORE:
                params.from.before(params.to[0]);
                break;
            case _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_4__["RelativePosition"].INSIDE:
                params.from.append(params.to[0]);
                break;
        }
    }
    remove(params) {
        for (const vnode of params.vnodes) {
            vnode.remove();
        }
    }
    empty(params) {
        for (const vnode of params.vnodes) {
            vnode.empty();
        }
    }
    getStructures() {
        const layout = this.editor.plugins.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_6__["Layout"]);
        const domLayout = layout.engines.dom;
        const editable = domLayout.components.get('editable')[0];
        const structures = editable.descendants(_OdooStructureNode__WEBPACK_IMPORTED_MODULE_7__["OdooStructureNode"]);
        return structures;
    }
    async wrap(params) {
        const parsedNodes = await this._parseHTMLString(params.html);
        const wrapNode = parsedNodes[0];
        const containerVNodes = [...params.container.childVNodes];
        if (!(wrapNode instanceof _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_5__["ContainerNode"])) {
            throw new Error('Impossible to wrap without a ContainerNode. Check "params.html".');
        }
        let vnode;
        while ((vnode = containerVNodes.shift())) {
            wrapNode.append(vnode);
        }
        params.container.append(wrapNode);
    }
    async replace(params) {
        const parsedNodes = await this._parseHTMLString(params.html);
        const firstNode = params.nodes[0];
        parsedNodes.forEach(firstNode.before.bind(firstNode));
        for (const node of params.nodes) {
            node.remove();
        }
    }
    async getRecordCover() {
        const layout = this.editor.plugins.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_6__["Layout"]);
        const domLayout = layout.engines.dom;
        const editableNode = domLayout.components.get('editable')[0];
        const covers = editableNode.descendants(node => {
            const attributes = node.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"]);
            if (attributes.length && typeof attributes.get('class') === 'string') {
                return attributes.classList.has('o_record_cover_container');
            }
        });
        const cover = covers && covers[0];
        if (cover)
            return domLayout.getDomNodes(cover)[0];
    }
    async getSelectedText(params) {
        const selectedNode = params.context.range.selectedNodes().map(node => node.clone());
        const container = new _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_5__["ContainerNode"]();
        container.append(...selectedNode);
        const renderer = this.editor.plugins.get(_plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_3__["Renderer"]);
        const renderedNode = await renderer.render(_plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_11__["HtmlDomRenderingEngine"].id, container);
        // todo: what if there is more rendered nodes?
        return renderedNode ? renderedNode[0].innerText : '';
    }
    async getSelectedLink(params) {
        const selectedNode = params.context.range.selectedNodes().map(node => node.clone());
        const nodeWithFormat = selectedNode.find(node => node instanceof _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_10__["InlineNode"] &&
            node.modifiers.find(modifier => modifier instanceof _plugin_link_src_LinkFormat__WEBPACK_IMPORTED_MODULE_12__["LinkFormat"]));
        const linkFormat = nodeWithFormat &&
            nodeWithFormat.modifiers.find(modifier => modifier instanceof _plugin_link_src_LinkFormat__WEBPACK_IMPORTED_MODULE_12__["LinkFormat"]);
        return linkFormat ? linkFormat.url : '';
    }
    getLinkInfo(params) {
        var _a, _b, _c, _d, _e;
        const targettedNodes = params.context.range.targetedNodes(_plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_14__["CharNode"]);
        const text = targettedNodes.map(x => x.char).join('');
        //
        const inline = this.editor.plugins.get(_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_13__["Inline"]);
        const modifiers = inline.getCurrentModifiers(params.context.range);
        return {
            text: text,
            url: (_a = modifiers.get(_plugin_link_src_LinkFormat__WEBPACK_IMPORTED_MODULE_12__["LinkFormat"])) === null || _a === void 0 ? void 0 : _a.url,
            class: (_b = modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"])) === null || _b === void 0 ? void 0 : _b.get('class'),
            target: (_e = (_d = (_c = modifiers
                .get(_plugin_link_src_LinkFormat__WEBPACK_IMPORTED_MODULE_12__["LinkFormat"])) === null || _c === void 0 ? void 0 : _c.modifiers) === null || _d === void 0 ? void 0 : _d.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_0__["Attributes"])) === null || _e === void 0 ? void 0 : _e.get('target'),
        };
    }
    async _parseHTMLString(content) {
        const parser = this.editor.plugins.get(_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_2__["Parser"]);
        const domParser = parser && parser.engines.dom;
        if (!domParser) {
            // TODO: remove this when the editor can be instantiated on
            // something else than DOM.
            throw new Error(`No DOM parser installed.`);
        }
        const div = document.createElement('div');
        div.innerHTML = content;
        return (await domParser.parse(div))[0].children();
    }
    _getVNode(domNode) {
        const layout = this.editor.plugins.get(_plugin_layout_src_Layout__WEBPACK_IMPORTED_MODULE_6__["Layout"]);
        const domEngine = layout.engines.dom;
        return domEngine.getNodes(domNode)[0];
    }
}


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/OdooStructureNode.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/OdooStructureNode.ts ***!
  \****************************************************************/
/*! exports provided: OdooStructureNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooStructureNode", function() { return OdooStructureNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");

class OdooStructureNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor(params) {
        super(params);
        this.xpath = params.xpath;
        this.viewId = params.viewId;
    }
}


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/OdooStrucutreXmlDomParser.ts":
/*!************************************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/OdooStrucutreXmlDomParser.ts ***!
  \************************************************************************/
/*! exports provided: OdooStrucutreXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooStrucutreXmlDomParser", function() { return OdooStrucutreXmlDomParser; });
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _OdooStructureNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OdooStructureNode */ "./packages/plugin-odoo-snippets/src/OdooStructureNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class OdooStrucutreXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return (item instanceof Element &&
                item.classList.contains('oe_structure') &&
                item.attributes &&
                item.attributes['data-oe-xpath'] &&
                item.attributes['data-oe-id']);
        };
    }
    /**
     * Parse a bold node.
     *
     * @param item
     */
    async parse(item) {
        const element = new _OdooStructureNode__WEBPACK_IMPORTED_MODULE_2__["OdooStructureNode"]({
            htmlTag: Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item),
            xpath: item.attributes['data-oe-xpath'].value,
            viewId: item.attributes['data-oe-id'].value,
        });
        if (item instanceof Element) {
            element.modifiers.append(this.engine.parseAttributes(item));
        }
        const nodes = await this.engine.parse(...item.childNodes);
        element.append(...nodes);
        return [element];
    }
}
OdooStrucutreXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_0__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-odoo-snippets/src/SaveButton.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-odoo-snippets/src/SaveButton.ts ***!
  \*********************************************************/
/*! exports provided: SaveButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveButton", function() { return SaveButton; });
const SaveButton = {
    title: 'Save',
    commandId: 'saveOdoo',
    class: 'fa-save jw-primary-button',
};


/***/ }),

/***/ "./packages/plugin-owl/src/Owl.ts":
/*!****************************************!*\
  !*** ./packages/plugin-owl/src/Owl.ts ***!
  \****************************************/
/*! exports provided: Owl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Owl", function() { return Owl; });
/* harmony import */ var _odoo_owl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @odoo/owl */ "./node_modules/@odoo/owl/dist/owl.js");
/* harmony import */ var _odoo_owl__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_odoo_owl__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _ui_OwlHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/OwlHtmlDomRenderer */ "./packages/plugin-owl/src/ui/OwlHtmlDomRenderer.ts");



// Temporary fix waiting for the `Env` interface of Owl to let the `browser`
// property be optional
const browser = {
    setTimeout: window.setTimeout.bind(window),
    clearTimeout: window.clearTimeout.bind(window),
    setInterval: window.setInterval.bind(window),
    clearInterval: window.clearInterval.bind(window),
    requestAnimationFrame: window.requestAnimationFrame.bind(window),
    random: Math.random,
    Date: window.Date,
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    fetch: (window.fetch || (() => { })).bind(window),
    localStorage: window.localStorage,
};
class Owl extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_1__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            renderers: [_ui_OwlHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["OwlHtmlDomRenderer"]],
        };
        this.loaders = {
            owlTemplates: this._loadTemplates,
        };
        this.env = {
            qweb: new _odoo_owl__WEBPACK_IMPORTED_MODULE_0__["QWeb"](),
            editor: this.editor,
            browser: browser,
        };
        this.components = new Map();
    }
    async stop() {
        for (const [, component] of this.components) {
            component.destroy();
        }
        this.components.clear();
    }
    _loadTemplates(templates) {
        for (const template of templates) {
            this.env.qweb.addTemplates(template);
        }
    }
}


/***/ }),

/***/ "./packages/plugin-owl/src/ui/OwlComponent.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-owl/src/ui/OwlComponent.ts ***!
  \****************************************************/
/*! exports provided: OwlComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OwlComponent", function() { return OwlComponent; });
/* harmony import */ var _odoo_owl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @odoo/owl */ "./node_modules/@odoo/owl/dist/owl.js");
/* harmony import */ var _odoo_owl__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_odoo_owl__WEBPACK_IMPORTED_MODULE_0__);


class OwlComponent extends _odoo_owl__WEBPACK_IMPORTED_MODULE_0__["Component"] {
    constructor() {
        super(...arguments);
        this._storageKeyPrefix = 'OwlUI' + this.constructor.name + ':';
        // State items which names are listed in the localStorage property will be
        // read from the localStorage during the willStart of the component, and
        // wrote back to the localStorage whenever the state changes.
        this.localStorage = [];
    }
    /**
     * Owl hook called exactly once before the initial rendering.
     */
    willStart() {
        if (this.state) {
            this._importStateFromStorage(localStorage, this.localStorage);
            this.state = Object(_odoo_owl__WEBPACK_IMPORTED_MODULE_0__["useState"])(this.state);
        }
        return super.willStart();
    }
    /**
     * Called by the Owl state observer every time the state changes.
     *
     * @param force see Owl Component
     */
    render(force = false) {
        if (this.state) {
            this._exportStateToStorage(localStorage, this.localStorage);
        }
        return super.render(force);
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Read the given storable state items from the given `storage` and write
     * the items as the key of the `state` property.
     *
     * @param storage from which to read the state items
     * @param storableItems names of the state items to read from storage
     */
    _importStateFromStorage(storage, storableItems) {
        storableItems.forEach(itemName => {
            const storageKey = this._storageKeyPrefix + itemName;
            const value = storage.getItem(storageKey);
            // The value of items that were not yet set in storage is null.
            if (value !== null) {
                // Otherwise, the value was stored as a string in the storage.
                // Convert it to the type of the default value for the state.
                try {
                    this.state[itemName] = JSON.parse(value);
                }
                catch (e) {
                    // Stored item is not parseable. Keep the default value.
                    console.warn(`Storage: Ignoring state.${itemName} stored value.\n` +
                        `${e.name}: ${e.message}\n` +
                        `Stored value: ${value}`);
                }
            }
        });
    }
    /**
     * For every key in the property `state`, write it back to `storage`
     * Write the given storable state items to the given storage.
     *
     * @param storage to write the state items to
     * @param storableItems names of the state items to write to storage
     */
    _exportStateToStorage(storage, storableItems) {
        storableItems.forEach(itemName => {
            const storageKey = this._storageKeyPrefix + itemName;
            // Storage require items to be stored as strings.
            try {
                const serializedValue = JSON.stringify(this.state[itemName]);
                storage.setItem(storageKey, serializedValue);
            }
            catch (e) {
                // State item is not serializable. Skip storing it.
                console.warn(`Storage: Unserializable state.${itemName} value.\n` +
                    `${e.name}: ${e.message}`);
            }
        });
    }
}


/***/ }),

/***/ "./packages/plugin-owl/src/ui/OwlHtmlDomRenderer.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-owl/src/ui/OwlHtmlDomRenderer.ts ***!
  \**********************************************************/
/*! exports provided: OwlHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OwlHtmlDomRenderer", function() { return OwlHtmlDomRenderer; });
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _OwlNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OwlNode */ "./packages/plugin-owl/src/ui/OwlNode.ts");
/* harmony import */ var _Owl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Owl */ "./packages/plugin-owl/src/Owl.ts");




class OwlHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__["AbstractRenderer"] {
    constructor(engine, superRenderer) {
        super(engine, superRenderer);
        this.predicate = _OwlNode__WEBPACK_IMPORTED_MODULE_2__["OwlNode"];
        this.env = this.engine.editor.plugins.get(_Owl__WEBPACK_IMPORTED_MODULE_3__["Owl"]).env;
    }
    async render(node) {
        const components = this.engine.editor.plugins.get(_Owl__WEBPACK_IMPORTED_MODULE_3__["Owl"]).components;
        if (components.get(node)) {
            components.get(node).destroy();
        }
        const placeholder = document.createElement('jw-placeholer');
        document.body.appendChild(placeholder);
        node.Component.env = this.env;
        const component = new node.Component(null, node.props);
        components.set(node, component);
        await component.mount(placeholder);
        placeholder.remove();
        return [...placeholder.childNodes];
    }
}
OwlHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_0__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-owl/src/ui/OwlNode.ts":
/*!***********************************************!*\
  !*** ./packages/plugin-owl/src/ui/OwlNode.ts ***!
  \***********************************************/
/*! exports provided: OwlNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OwlNode", function() { return OwlNode; });
/* harmony import */ var _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/src/VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");

class OwlNode extends _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__["AtomicNode"] {
    constructor(Component, props) {
        super();
        this.Component = Component;
        this.props = props;
    }
    get name() {
        return super.name + ': ' + this.Component.name;
    }
}


/***/ }),

/***/ "./packages/plugin-paragraph/src/Paragraph.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-paragraph/src/Paragraph.ts ***!
  \****************************************************/
/*! exports provided: Paragraph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Paragraph", function() { return Paragraph; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _ParagraphXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ParagraphXmlDomParser */ "./packages/plugin-paragraph/src/ParagraphXmlDomParser.ts");


class Paragraph extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_ParagraphXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["ParagraphXmlDomParser"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-paragraph/src/ParagraphNode.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-paragraph/src/ParagraphNode.ts ***!
  \********************************************************/
/*! exports provided: ParagraphNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParagraphNode", function() { return ParagraphNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");

class ParagraphNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor() {
        super({ htmlTag: 'P' });
    }
}


/***/ }),

/***/ "./packages/plugin-paragraph/src/ParagraphXmlDomParser.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-paragraph/src/ParagraphXmlDomParser.ts ***!
  \****************************************************************/
/*! exports provided: ParagraphXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParagraphXmlDomParser", function() { return ParagraphXmlDomParser; });
/* harmony import */ var _ParagraphNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ParagraphNode */ "./packages/plugin-paragraph/src/ParagraphNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class ParagraphXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'P';
        };
    }
    async parse(item) {
        const paragraph = new _ParagraphNode__WEBPACK_IMPORTED_MODULE_0__["ParagraphNode"]();
        paragraph.modifiers.append(this.engine.parseAttributes(item));
        const nodes = await this.engine.parse(...item.childNodes);
        paragraph.append(...nodes);
        return [paragraph];
    }
}
ParagraphXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-parser/src/AbstractParser.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-parser/src/AbstractParser.ts ***!
  \******************************************************/
/*! exports provided: AbstractParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractParser", function() { return AbstractParser; });
class AbstractParser {
    constructor(engine) {
        this.engine = engine;
    }
}


/***/ }),

/***/ "./packages/plugin-parser/src/Parser.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-parser/src/Parser.ts ***!
  \**********************************************/
/*! exports provided: Parser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Parser", function() { return Parser; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");

class Parser extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.engines = {};
        this.loaders = {
            parsingEngines: this.loadParsingEngines,
            parsers: this.loadParsers,
        };
    }
    async parse(engineId, ...items) {
        return this.engines[engineId].parse(...items);
    }
    loadParsingEngines(parsingEngines) {
        for (const EngineClass of parsingEngines) {
            const id = EngineClass.id;
            if (this.engines[id]) {
                throw new Error(`Rendering engine ${id} already registered.`);
            }
            const engine = new EngineClass(this.editor);
            this.engines[id] = engine;
        }
    }
    loadParsers(parsers) {
        parsers = [...parsers].reverse();
        for (const ParserClass of parsers) {
            for (const id in this.engines) {
                const parsingEngine = this.engines[id];
                const supportedTypes = [id, ...parsingEngine.constructor.extends];
                if (supportedTypes.includes(ParserClass.id)) {
                    parsingEngine.register(ParserClass);
                }
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-parser/src/ParsingEngine.ts":
/*!*****************************************************!*\
  !*** ./packages/plugin-parser/src/ParsingEngine.ts ***!
  \*****************************************************/
/*! exports provided: ParsingEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParsingEngine", function() { return ParsingEngine; });
class ParsingEngine {
    constructor(editor) {
        this.parsers = [];
        this.parsingMap = new Map();
        this.editor = editor;
        const defaultParser = new this.constructor.defaultParser(this);
        if (defaultParser.predicate) {
            throw new Error(`Default renderer cannot have a predicate.`);
        }
        else {
            this.parsers.push(defaultParser);
        }
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Register the given parser by instantiating it with this parser engine.
     *
     * @param ParserClass
     */
    register(ParserClass) {
        if (ParserClass.id === this.constructor.id) {
            this.parsers.unshift(new ParserClass(this));
        }
        else {
            const supportedTypes = [this.constructor.id, ...this.constructor.extends];
            const priorParserIds = supportedTypes.slice(0, supportedTypes.indexOf(ParserClass.id));
            const postParserIndex = this.parsers.findIndex(parser => !priorParserIds.includes(parser.constructor.id));
            this.parsers.splice(postParserIndex, 0, new ParserClass(this));
        }
    }
    /**
     * Parse items into the editor's virtual `VNode` representation.
     *
     * @param items the items to parse
     * @returns Promise resolved by the element parsed into the editor virtual
     * VNode representation
     */
    async parse(...items) {
        const nodes = [];
        const childPromises = items.map(node => this._parseItem(node));
        const resList = await Promise.all(childPromises);
        for (const res of resList) {
            nodes.push(...res);
        }
        return nodes;
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Parse an item into the editor's virtual representation.
     *
     */
    async _parseItem(item) {
        let nodes;
        for (const parser of this.parsers) {
            if (!parser.predicate || parser.predicate(item)) {
                nodes = await parser.parse(item);
                break;
            }
        }
        if (nodes.length >= 1) {
            this.parsingMap.set(item, nodes);
        }
        return nodes;
    }
}
ParsingEngine.extends = [];


/***/ }),

/***/ "./packages/plugin-pre/src/Pre.ts":
/*!****************************************!*\
  !*** ./packages/plugin-pre/src/Pre.ts ***!
  \****************************************/
/*! exports provided: Pre */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pre", function() { return Pre; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _PreXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PreXmlDomParser */ "./packages/plugin-pre/src/PreXmlDomParser.ts");
/* harmony import */ var _PreHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PreHtmlDomRenderer */ "./packages/plugin-pre/src/PreHtmlDomRenderer.ts");
/* harmony import */ var _PreNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PreNode */ "./packages/plugin-pre/src/PreNode.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");
/* harmony import */ var _PreCharHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./PreCharHtmlDomRenderer */ "./packages/plugin-pre/src/PreCharHtmlDomRenderer.ts");
/* harmony import */ var _PreSeparatorHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PreSeparatorHtmlDomRenderer */ "./packages/plugin-pre/src/PreSeparatorHtmlDomRenderer.ts");







class Pre extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.commands = {
            applyPreStyle: {
                handler: this.applyPreStyle,
            },
        };
        this.loadables = {
            parsers: [_PreXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["PreXmlDomParser"]],
            renderers: [_PreHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["PreHtmlDomRenderer"], _PreSeparatorHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_6__["PreSeparatorHtmlDomRenderer"], _PreCharHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_5__["PreCharHtmlDomRenderer"]],
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Change the formatting of the nodes in given range to Pre.
     *
     * @param params
     */
    applyPreStyle(params) {
        for (const node of params.context.range.targetedNodes(_core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_4__["ContainerNode"])) {
            const pre = new _PreNode__WEBPACK_IMPORTED_MODULE_3__["PreNode"]();
            pre.modifiers = node.modifiers.clone();
            node.replaceWith(pre);
        }
    }
}


/***/ }),

/***/ "./packages/plugin-pre/src/PreButtons.ts":
/*!***********************************************!*\
  !*** ./packages/plugin-pre/src/PreButtons.ts ***!
  \***********************************************/
/*! exports provided: PreButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreButton", function() { return PreButton; });
/* harmony import */ var _PreNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PreNode */ "./packages/plugin-pre/src/PreNode.ts");

const PreButton = {
    title: 'Pre',
    commandId: 'applyPreStyle',
    selected: (editor) => {
        return editor.selection.range.targetedNodes().every(node => {
            return node.closest(_PreNode__WEBPACK_IMPORTED_MODULE_0__["PreNode"]);
        });
    },
};


/***/ }),

/***/ "./packages/plugin-pre/src/PreCharHtmlDomRenderer.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-pre/src/PreCharHtmlDomRenderer.ts ***!
  \***********************************************************/
/*! exports provided: PreCharHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreCharHtmlDomRenderer", function() { return PreCharHtmlDomRenderer; });
/* harmony import */ var _PreNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PreNode */ "./packages/plugin-pre/src/PreNode.ts");
/* harmony import */ var _plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-char/src/CharNode */ "./packages/plugin-char/src/CharNode.ts");
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");




class PreCharHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_2__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => item.is(_plugin_char_src_CharNode__WEBPACK_IMPORTED_MODULE_1__["CharNode"]) && !!item.ancestor(_PreNode__WEBPACK_IMPORTED_MODULE_0__["PreNode"]);
    }
    /**
     * Render the VNode to the given format.
     */
    async render(node) {
        const rendering = await this.super.render(node);
        rendering[0].textContent = rendering[0].textContent.replace(/\u00A0/g, ' ');
        return rendering;
    }
}
PreCharHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-pre/src/PreHtmlDomRenderer.ts":
/*!*******************************************************!*\
  !*** ./packages/plugin-pre/src/PreHtmlDomRenderer.ts ***!
  \*******************************************************/
/*! exports provided: PreHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreHtmlDomRenderer", function() { return PreHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _PreNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PreNode */ "./packages/plugin-pre/src/PreNode.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class PreHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _PreNode__WEBPACK_IMPORTED_MODULE_2__["PreNode"];
    }
    /**
     * Render the VNode to the given format.
     */
    async render(node) {
        const pre = document.createElement('pre');
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, pre);
        const renderedChildren = await this.renderChildren(node);
        pre.append(...renderedChildren.flat());
        return [pre];
    }
}
PreHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_1__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-pre/src/PreNode.ts":
/*!********************************************!*\
  !*** ./packages/plugin-pre/src/PreNode.ts ***!
  \********************************************/
/*! exports provided: PreNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreNode", function() { return PreNode; });
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");

class PreNode extends _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_0__["ContainerNode"] {
}


/***/ }),

/***/ "./packages/plugin-pre/src/PreSeparatorHtmlDomRenderer.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-pre/src/PreSeparatorHtmlDomRenderer.ts ***!
  \****************************************************************/
/*! exports provided: PreSeparatorHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreSeparatorHtmlDomRenderer", function() { return PreSeparatorHtmlDomRenderer; });
/* harmony import */ var _PreNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PreNode */ "./packages/plugin-pre/src/PreNode.ts");
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");



class PreSeparatorHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_1__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            const DefaultSeparator = this.engine.editor.configuration.defaults.Separator;
            return item.is(DefaultSeparator) && !!item.ancestor(_PreNode__WEBPACK_IMPORTED_MODULE_0__["PreNode"]);
        };
    }
    /**
     * Render the VNode.
     */
    async render(node) {
        const separators = await this.super.render(node);
        const rendering = separators.map(() => document.createTextNode('\n'));
        return this.engine.rendered([node], [this, Promise.resolve(rendering)]);
    }
}
PreSeparatorHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-pre/src/PreXmlDomParser.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-pre/src/PreXmlDomParser.ts ***!
  \****************************************************/
/*! exports provided: PreXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreXmlDomParser", function() { return PreXmlDomParser; });
/* harmony import */ var _PreNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PreNode */ "./packages/plugin-pre/src/PreNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class PreXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'PRE';
        };
    }
    async parse(item) {
        const pre = new _PreNode__WEBPACK_IMPORTED_MODULE_0__["PreNode"]();
        pre.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        pre.append(...children);
        return [pre];
    }
}
PreXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-renderer/src/AbstractRenderer.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-renderer/src/AbstractRenderer.ts ***!
  \**********************************************************/
/*! exports provided: AbstractRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractRenderer", function() { return AbstractRenderer; });
class AbstractRenderer {
    constructor(engine, superRenderer) {
        this._renderChildMutex = new Map();
        this.engine = engine;
        this.super = superRenderer;
    }
    /**
     * Render the given child node. This function ensures that the promise
     * corresponding to the rendering of each child of the same parent will be
     * resolved in the order in which `renderChild` was called.
     *
     * @param child
     */
    async renderChild(child) {
        const parent = child.parent;
        await this._renderChildMutex.get(parent);
        const renderedChild = this.engine.render(child);
        this._renderChildMutex.set(parent, renderedChild);
        return renderedChild;
    }
    /**
     * Render the children of given node. Return a promise resolved with the
     * result of the rendering of each child concatenated into a single array
     * conserving the order of the children.
     *
     * @param node
     */
    async renderChildren(node) {
        const renderedChildren = [];
        if (node.hasChildren()) {
            for (const child of node.childVNodes) {
                renderedChildren.push(this.engine.render(child));
            }
        }
        else if (this.engine.renderEmpty) {
            renderedChildren.push(this.engine.renderEmpty(node));
        }
        return Promise.all(renderedChildren);
    }
}


/***/ }),

/***/ "./packages/plugin-renderer/src/Renderer.ts":
/*!**************************************************!*\
  !*** ./packages/plugin-renderer/src/Renderer.ts ***!
  \**************************************************/
/*! exports provided: Renderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return Renderer; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");

class Renderer extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loaders = {
            renderingEngines: this.loadRenderingEngines,
            renderers: this.loadRenderers,
        };
        this.engines = {};
    }
    async render(renderingId, node) {
        const engine = this.engines[renderingId];
        if (!engine) {
            // The caller might want to fallback on another rendering.
            return;
        }
        engine.renderings.clear();
        return engine.render(node);
    }
    loadRenderingEngines(renderingEngines) {
        for (const EngineClass of renderingEngines) {
            const id = EngineClass.id;
            if (this.engines[id]) {
                throw new Error(`Rendering engine ${id} already registered.`);
            }
            const engine = new EngineClass(this.editor);
            this.engines[id] = engine;
        }
    }
    loadRenderers(renderers) {
        renderers = [...renderers].reverse();
        for (const RendererClass of renderers) {
            const renderingEngine = this.engines[RendererClass.id];
            if (renderingEngine) {
                renderingEngine.register(RendererClass);
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-renderer/src/RenderingEngine.ts":
/*!*********************************************************!*\
  !*** ./packages/plugin-renderer/src/RenderingEngine.ts ***!
  \*********************************************************/
/*! exports provided: RenderingEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderingEngine", function() { return RenderingEngine; });
class RenderingEngine {
    constructor(editor) {
        this.renderers = [];
        this.renderings = new Map();
        this.editor = editor;
        const defaultRenderer = new this.constructor.defaultRenderer(this);
        if (defaultRenderer.predicate) {
            throw `Default renderer cannot have a predicate.`;
        }
        else {
            this.renderers.push(defaultRenderer);
        }
    }
    /**
     * Register the given renderer by instantiating it with this rendering
     * engine. The renderer constructor will receive a special second parameter
     * which is a magic renderer whose `render` method will call the next
     * compatible renderer in line for the given node.
     *
     * @param RendererClass
     */
    register(RendererClass) {
        const superRenderer = {
            render: this._render.bind(this),
        };
        const renderer = new RendererClass(this, superRenderer);
        this.renderers.unshift(renderer);
    }
    /**
     * Render the given node. If a prior rendering already exists for this node
     * in this run, return it directly.
     *
     * @param node
     */
    async render(node) {
        const renderings = this.renderings.get(node);
        if (renderings && renderings.length) {
            return renderings[0][1];
        }
        else {
            return this._render(node);
        }
    }
    /**
     * Return the rendering of several nodes, so as to skip rendering them again
     * later in the process.
     *
     * @param nodes
     * @param rendering
     */
    async rendered(nodes, rendering) {
        for (const node of nodes) {
            const renderings = this.renderings.get(node) || [];
            renderings.push(rendering);
        }
        return rendering[1];
    }
    /**
     * Trigger the rendering of the given node by the next compatible renderer
     * that has not yet produced a rendering for this run.
     *
     * @param node
     */
    async _render(node) {
        const renderings = this.renderings.get(node) || [];
        // TODO: test all renders with predicates before no predicates
        const lastRendering = renderings[renderings.length - 1];
        const lastRenderer = lastRendering && lastRendering[0];
        let nextRendererIndex = this.renderers.indexOf(lastRenderer) + 1;
        let nextRenderer;
        do {
            nextRenderer = this.renderers[nextRendererIndex];
            nextRendererIndex++;
        } while (nextRenderer && !node.test(nextRenderer.predicate));
        if (!nextRenderer)
            return;
        // This promise will be returned synchronously and will be resolved
        // later with the same return value as the asynchronous render call.
        const rendererProm = new Promise((resolve) => {
            Promise.resolve().then(() => {
                nextRenderer.render(node).then(resolve);
            });
        });
        renderings.push([nextRenderer, rendererProm]);
        this.renderings.set(node, renderings);
        return rendererProm;
    }
}


/***/ }),

/***/ "./packages/plugin-span/src/Span.ts":
/*!******************************************!*\
  !*** ./packages/plugin-span/src/Span.ts ***!
  \******************************************/
/*! exports provided: Span */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Span", function() { return Span; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _SpanXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SpanXmlDomParser */ "./packages/plugin-span/src/SpanXmlDomParser.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");



class Span extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_SpanXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["SpanXmlDomParser"]],
        };
    }
}
Span.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]];


/***/ }),

/***/ "./packages/plugin-span/src/SpanFormat.ts":
/*!************************************************!*\
  !*** ./packages/plugin-span/src/SpanFormat.ts ***!
  \************************************************/
/*! exports provided: SpanFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpanFormat", function() { return SpanFormat; });
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");

class SpanFormat extends _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__["Format"] {
    constructor(htmlTag = 'SPAN') {
        super(htmlTag);
    }
}


/***/ }),

/***/ "./packages/plugin-span/src/SpanXmlDomParser.ts":
/*!******************************************************!*\
  !*** ./packages/plugin-span/src/SpanXmlDomParser.ts ***!
  \******************************************************/
/*! exports provided: SpanXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpanXmlDomParser", function() { return SpanXmlDomParser; });
/* harmony import */ var _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatParser */ "./packages/plugin-inline/src/FormatParser.ts");
/* harmony import */ var _SpanFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SpanFormat */ "./packages/plugin-span/src/SpanFormat.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class SpanXmlDomParser extends _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__["FormatParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'SPAN' || Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'FONT');
        };
    }
    /**
     * Parse a span node.
     *
     * @param item
     */
    async parse(item) {
        const span = new _SpanFormat__WEBPACK_IMPORTED_MODULE_1__["SpanFormat"](Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item));
        span.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        this.applyFormat(span, children);
        return children;
    }
}
SpanXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-subscript/src/Subscript.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-subscript/src/Subscript.ts ***!
  \****************************************************/
/*! exports provided: Subscript */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subscript", function() { return Subscript; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _SubscriptXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SubscriptXmlDomParser */ "./packages/plugin-subscript/src/SubscriptXmlDomParser.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");



class Subscript extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_SubscriptXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["SubscriptXmlDomParser"]],
        };
    }
}
Subscript.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]];


/***/ }),

/***/ "./packages/plugin-subscript/src/SubscriptFormat.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-subscript/src/SubscriptFormat.ts ***!
  \**********************************************************/
/*! exports provided: SubscriptFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubscriptFormat", function() { return SubscriptFormat; });
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");

class SubscriptFormat extends _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__["Format"] {
    constructor() {
        super('SUB');
    }
}


/***/ }),

/***/ "./packages/plugin-subscript/src/SubscriptXmlDomParser.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-subscript/src/SubscriptXmlDomParser.ts ***!
  \****************************************************************/
/*! exports provided: SubscriptXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubscriptXmlDomParser", function() { return SubscriptXmlDomParser; });
/* harmony import */ var _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatParser */ "./packages/plugin-inline/src/FormatParser.ts");
/* harmony import */ var _SubscriptFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SubscriptFormat */ "./packages/plugin-subscript/src/SubscriptFormat.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class SubscriptXmlDomParser extends _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__["FormatParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'SUB';
        };
    }
    /**
     * Parse a span node.
     *
     * @param item
     */
    async parse(item) {
        const subscript = new _SubscriptFormat__WEBPACK_IMPORTED_MODULE_1__["SubscriptFormat"]();
        subscript.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        this.applyFormat(subscript, children);
        return children;
    }
}
SubscriptXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-superscript/src/Superscript.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-superscript/src/Superscript.ts ***!
  \********************************************************/
/*! exports provided: Superscript */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Superscript", function() { return Superscript; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _SuperscriptXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SuperscriptXmlDomParser */ "./packages/plugin-superscript/src/SuperscriptXmlDomParser.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");



class Superscript extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_SuperscriptXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["SuperscriptXmlDomParser"]],
        };
    }
}
Superscript.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]];


/***/ }),

/***/ "./packages/plugin-superscript/src/SuperscriptFormat.ts":
/*!**************************************************************!*\
  !*** ./packages/plugin-superscript/src/SuperscriptFormat.ts ***!
  \**************************************************************/
/*! exports provided: SuperscriptFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SuperscriptFormat", function() { return SuperscriptFormat; });
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");

class SuperscriptFormat extends _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__["Format"] {
    constructor() {
        super('SUP');
    }
}


/***/ }),

/***/ "./packages/plugin-superscript/src/SuperscriptXmlDomParser.ts":
/*!********************************************************************!*\
  !*** ./packages/plugin-superscript/src/SuperscriptXmlDomParser.ts ***!
  \********************************************************************/
/*! exports provided: SuperscriptXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SuperscriptXmlDomParser", function() { return SuperscriptXmlDomParser; });
/* harmony import */ var _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatParser */ "./packages/plugin-inline/src/FormatParser.ts");
/* harmony import */ var _SuperscriptFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SuperscriptFormat */ "./packages/plugin-superscript/src/SuperscriptFormat.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class SuperscriptXmlDomParser extends _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__["FormatParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'SUP';
        };
    }
    /**
     * Parse a span node.
     *
     * @param item
     */
    async parse(item) {
        const superscript = new _SuperscriptFormat__WEBPACK_IMPORTED_MODULE_1__["SuperscriptFormat"]();
        superscript.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        this.applyFormat(superscript, children);
        return children;
    }
}
SuperscriptXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-table/src/Table.ts":
/*!********************************************!*\
  !*** ./packages/plugin-table/src/Table.ts ***!
  \********************************************/
/*! exports provided: Table */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Table", function() { return Table; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _TableXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableXmlDomParser */ "./packages/plugin-table/src/TableXmlDomParser.ts");
/* harmony import */ var _TableRowXmlDomParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableRowXmlDomParser */ "./packages/plugin-table/src/TableRowXmlDomParser.ts");
/* harmony import */ var _TableCellXmlDomParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TableCellXmlDomParser */ "./packages/plugin-table/src/TableCellXmlDomParser.ts");
/* harmony import */ var _TableHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TableHtmlDomRenderer */ "./packages/plugin-table/src/TableHtmlDomRenderer.ts");
/* harmony import */ var _TableRowHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TableRowHtmlDomRenderer */ "./packages/plugin-table/src/TableRowHtmlDomRenderer.ts");
/* harmony import */ var _TableCellHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TableCellHtmlDomRenderer */ "./packages/plugin-table/src/TableCellHtmlDomRenderer.ts");
/* harmony import */ var _TableCellNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TableCellNode */ "./packages/plugin-table/src/TableCellNode.ts");
/* harmony import */ var _TableNode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TableNode */ "./packages/plugin-table/src/TableNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _TableRowNode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./TableRowNode */ "./packages/plugin-table/src/TableRowNode.ts");
/* harmony import */ var _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/src/VNodes/VNode */ "./packages/core/src/VNodes/VNode.ts");












class Table extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_TableXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["TableXmlDomParser"], _TableRowXmlDomParser__WEBPACK_IMPORTED_MODULE_2__["TableRowXmlDomParser"], _TableCellXmlDomParser__WEBPACK_IMPORTED_MODULE_3__["TableCellXmlDomParser"]],
            renderers: [_TableHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_4__["TableHtmlDomRenderer"], _TableRowHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_5__["TableRowHtmlDomRenderer"], _TableCellHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_6__["TableCellHtmlDomRenderer"]],
            shortcuts: [
                {
                    pattern: 'CTRL+<Slash>',
                    commandId: 'addRowBelow',
                },
                {
                    pattern: 'CTRL+SHIFT+<Slash>',
                    commandId: 'addRowAbove',
                },
                {
                    pattern: 'CTRL+<Equal>',
                    commandId: 'addColumnAfter',
                },
                {
                    pattern: 'CTRL+SHIFT+<Equal>',
                    commandId: 'addColumnBefore',
                },
                {
                    pattern: 'CTRL+SHIFT+DELETE',
                    commandId: 'deleteRow',
                },
                {
                    pattern: 'CTRL+SHIFT+BACKSPACE',
                    commandId: 'deleteColumn',
                },
                {
                    pattern: 'CTRL+ALT+SHIFT+DELETE',
                    commandId: 'deleteTable',
                },
                {
                    pattern: 'CTRL+<Period>',
                    commandId: 'mergeCells',
                },
                {
                    pattern: 'CTRL+SHIFT+<Period>',
                    commandId: 'unmergeCells',
                },
            ],
        };
        this.commands = {
            addRowAbove: {
                handler: this.addRowAbove.bind(this),
            },
            addRowBelow: {
                handler: this.addRowBelow.bind(this),
            },
            addColumnBefore: {
                handler: this.addColumnBefore.bind(this),
            },
            addColumnAfter: {
                handler: this.addColumnAfter.bind(this),
            },
            deleteRow: {
                handler: this.deleteRow.bind(this),
            },
            deleteColumn: {
                handler: this.deleteColumn.bind(this),
            },
            deleteTable: {
                handler: this.deleteTable.bind(this),
            },
            mergeCells: {
                handler: this.mergeCells.bind(this),
            },
            unmergeCells: {
                handler: this.unmergeCells.bind(this),
            },
        };
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Add a row above the cell at given range start.
     *
     * @param params
     */
    addRowAbove(params) {
        const range = params.context.range;
        const cell = range.start.ancestor(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (!cell)
            return;
        cell.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_8__["TableNode"]).addRowAbove(cell);
    }
    /**
     * Add a row below the cell at given range start.
     *
     * @param params
     */
    addRowBelow(params) {
        const range = params.context.range;
        const row = range.start.ancestor(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (!row)
            return;
        row.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_8__["TableNode"]).addRowBelow(row);
    }
    /**
     * Add a column before the cell at given range start.
     *
     * @param params
     */
    addColumnBefore(params) {
        const range = params.context.range;
        const cell = range.start.ancestor(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (!cell)
            return;
        cell.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_8__["TableNode"]).addColumnBefore(cell);
    }
    /**
     * Add a column after the cell at given range start.
     *
     * @param params
     */
    addColumnAfter(params) {
        const range = params.context.range;
        const cell = range.start.ancestor(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (!cell)
            return;
        cell.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_8__["TableNode"]).addColumnAfter(cell);
    }
    /**
     * Delete the row at given range start.
     *
     * @param params
     */
    deleteRow(params) {
        const range = params.context.range;
        const cell = range.start.ancestor(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (!cell)
            return;
        const row = cell.ancestor(_TableRowNode__WEBPACK_IMPORTED_MODULE_10__["TableRowNode"]);
        const nextRow = row.nextSibling(_TableRowNode__WEBPACK_IMPORTED_MODULE_10__["TableRowNode"]) || row.previousSibling(_TableRowNode__WEBPACK_IMPORTED_MODULE_10__["TableRowNode"]);
        const nextCell = nextRow && nextRow.children(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"])[cell.columnIndex];
        if (nextCell) {
            const nextRowIndex = nextCell.rowIndex;
            // Handle rowspans.
            const cells = row.children(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
            for (const cell of cells) {
                if (cell.rowspan > 1) {
                    // Cells managed by this cell will now be managed by the
                    // cell below (or above if there is none below) instead.
                    const belowCell = Array.from(cell.managedCells).find(managedCell => managedCell.rowIndex === nextRowIndex);
                    if (belowCell) {
                        belowCell.unmerge();
                        for (const managedCell of cell.managedCells) {
                            if (managedCell !== belowCell) {
                                managedCell.mergeWith(belowCell);
                            }
                        }
                    }
                }
                else if (!cell.isActive()) {
                    // If this cell is inactive, unmerge it so its manager
                    // doesn't believe it still manages it.
                    cell.unmerge();
                }
            }
            // Remove the row.
            row.remove();
            // The place where the range used to live was just demolished. Give
            // it shelter within the next active cell.
            const nextActiveCell = nextCell.managerCell || nextCell;
            range.setStart(nextActiveCell.firstLeaf(), _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_11__["RelativePosition"].BEFORE);
            range.collapse();
        }
        else {
            // If there is no `nextCell`, we're trying to delete the only row in
            // this table so just remove the table.
            this.deleteTable(params);
        }
    }
    /**
     * Delete the column at given range start.
     *
     * @param params
     */
    deleteColumn(params) {
        const range = params.context.range;
        const cell = range.start.ancestor(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (!cell)
            return;
        const column = cell.column;
        const nextCell = cell.nextSibling(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]) || cell.previousSibling(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (nextCell) {
            const nextColumnIndex = nextCell.columnIndex;
            // Handle colspans and cell removal.
            for (const cell of column) {
                if (cell.colspan > 1) {
                    // Cells managed by this cell will now be managed by the
                    // cell after (or before if there is none after) instead.
                    const afterCell = Array.from(cell.managedCells).find(managedCell => managedCell.columnIndex === nextColumnIndex);
                    if (afterCell) {
                        afterCell.unmerge();
                        for (const managedCell of cell.managedCells) {
                            if (managedCell !== afterCell) {
                                managedCell.mergeWith(afterCell);
                            }
                        }
                    }
                }
                else if (!cell.isActive()) {
                    // If this cell is inactive, unmerge it so its manager
                    // doesn't believe it still manages it.
                    cell.unmerge();
                }
                // Remove the cell.
                cell.remove();
                // The place where the range used to live was just demolished.
                // Give it shelter within the next active cell.
                const nextManagerCell = nextCell.managerCell || nextCell;
                range.setStart(nextManagerCell.firstLeaf(), _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_11__["RelativePosition"].BEFORE);
                range.collapse();
            }
        }
        else {
            // If there is no `nextCell`, we're trying to delete the only column
            // in this table so just remove the table.
            this.deleteTable(params);
        }
    }
    /**
     * Delete the table at given range start.
     *
     * @param params
     */
    deleteTable(params) {
        const range = params.context.range;
        const table = range.start.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_8__["TableNode"]);
        if (!table)
            return;
        const nextSibling = table.nextSibling();
        const previousSibling = table.previousSibling();
        if (nextSibling) {
            range.setStart(nextSibling.firstLeaf(), _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_11__["RelativePosition"].BEFORE);
            range.collapse();
        }
        else if (previousSibling) {
            range.setStart(previousSibling.lastLeaf(), _core_src_VNodes_VNode__WEBPACK_IMPORTED_MODULE_11__["RelativePosition"].AFTER);
            range.collapse();
        }
        table.remove();
    }
    /**
     * Merge the cells at given range into the first cell at given range.
     *
     * @param params
     */
    mergeCells(params) {
        const range = params.context.range;
        const cells = range.targetedNodes(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        if (this._isRectangle(cells)) {
            // Only merge the cells if they would not imply to merge
            // unrelated cells, ie. the selected cells form a rectangle.
            const managerCell = cells.shift();
            const Separator = this.editor.configuration.defaults.Separator;
            for (const cell of cells) {
                if (managerCell.hasChildren()) {
                    managerCell.append(new Separator());
                }
                cell.mergeWith(managerCell);
            }
        }
    }
    /**
     * Unmerge previously merged cells at given range.
     *
     * @param params
     */
    unmergeCells(params) {
        const range = params.context.range;
        const cells = range.targetedNodes(_TableCellNode__WEBPACK_IMPORTED_MODULE_7__["TableCellNode"]);
        for (const cell of cells) {
            for (const managedCell of cell.managedCells) {
                managedCell.unmerge();
            }
        }
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return true if the given array of cells forms a rectangle in the table
     * grid.
     *
     * @param cells
     */
    _isRectangle(cells) {
        cells = [...cells];
        // Add managed cells to the list.
        for (const cell of [...cells]) {
            if (cell.managedCells.size) {
                cells.push(...cell.managedCells);
            }
        }
        cells = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_9__["distinct"])(cells);
        // Compute the row/column index extrema.
        const rowIndices = cells.map(cell => cell.rowIndex);
        const columnIndices = cells.map(cell => cell.columnIndex);
        const minRowIndex = Math.min(...rowIndices);
        const minColumnIndex = Math.min(...columnIndices);
        const maxRowIndex = Math.max(...rowIndices);
        const maxColumnIndex = Math.max(...columnIndices);
        // If a cell between the extrema cannot be found in the list, the
        // selected cells do not form a rectangle.
        for (let rowIndex = minRowIndex; rowIndex <= maxRowIndex; rowIndex++) {
            for (let columnIndex = minColumnIndex; columnIndex <= maxColumnIndex; columnIndex++) {
                const cell = cells.find(cell => {
                    return cell.rowIndex === rowIndex && cell.columnIndex === columnIndex;
                });
                if (!cell) {
                    return false;
                }
            }
        }
        return true;
    }
}


/***/ }),

/***/ "./packages/plugin-table/src/TableCellHtmlDomRenderer.ts":
/*!***************************************************************!*\
  !*** ./packages/plugin-table/src/TableCellHtmlDomRenderer.ts ***!
  \***************************************************************/
/*! exports provided: TableCellHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableCellHtmlDomRenderer", function() { return TableCellHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _TableCellNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableCellNode */ "./packages/plugin-table/src/TableCellNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class TableCellHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _TableCellNode__WEBPACK_IMPORTED_MODULE_1__["TableCellNode"];
    }
    /**
     * Render the TableCellNode along with its contents.
     *
     * @param cell
     */
    async render(cell) {
        // If the cell is not active, do not render it (it means it is
        // represented by its manager cell's colspan or rowspan: it was merged).
        if (!cell.isActive())
            return [];
        // Render the cell and its contents.
        const td = document.createElement(cell.header ? 'th' : 'td');
        const renderedChildren = await this.renderChildren(cell);
        td.append(...renderedChildren.flat());
        // Render attributes.
        // Colspan and rowspan are handled differently from other attributes:
        // they are automatically calculated in function of the cell's managed
        // cells. Render them here. If their value is 1 or less, they are
        // insignificant so no need to render them.
        if (cell.colspan > 1) {
            cell.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"]).set('colspan', '' + cell.colspan);
        }
        if (cell.rowspan > 1) {
            cell.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"]).set('rowspan', '' + cell.rowspan);
        }
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], cell, td);
        cell.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"]).remove('colspan');
        cell.modifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"]).remove('rowspan');
        return [td];
    }
}
TableCellHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-table/src/TableCellNode.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-table/src/TableCellNode.ts ***!
  \****************************************************/
/*! exports provided: TableCellNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableCellNode", function() { return TableCellNode; });
/* harmony import */ var _TableNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableNode */ "./packages/plugin-table/src/TableNode.ts");
/* harmony import */ var _TableRowNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableRowNode */ "./packages/plugin-table/src/TableRowNode.ts");
/* harmony import */ var _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/src/VNodes/ContainerNode */ "./packages/core/src/VNodes/ContainerNode.ts");



class TableCellNode extends _core_src_VNodes_ContainerNode__WEBPACK_IMPORTED_MODULE_2__["ContainerNode"] {
    constructor(params) {
        super();
        this.breakable = false;
        this.__managedCells = new Set();
        this.header = (params === null || params === void 0 ? void 0 : params.header) || false;
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a new VNode with the same type and attributes as this VNode.
     *
     *  @override
     */
    clone(deepClone, params) {
        const defaults = {
            header: this.header,
        };
        return super.clone(deepClone, { ...defaults, ...params });
    }
    //--------------------------------------------------------------------------
    // Getters
    //--------------------------------------------------------------------------
    /**
     * @override
     */
    get name() {
        let coordinatesRepr = ' <(' + this.rowIndex + ', ' + this.columnIndex + ')';
        if (this.colspan > 1 || this.rowspan > 1) {
            const endRow = this.rowIndex + this.rowspan - 1;
            const endColumn = this.columnIndex + this.colspan - 1;
            coordinatesRepr += ':(' + endRow + ', ' + endColumn + ')';
        }
        coordinatesRepr += '>';
        return (super.name +
            coordinatesRepr +
            (this.header ? ': header' : '') +
            (this.isActive() ? '' : ' (inactive)'));
    }
    /**
     * Return the cell that manages this cell, if any.
     */
    get managerCell() {
        return this.__managerCell;
    }
    /**
     * Return the set of cells that this cell manages.
     */
    get managedCells() {
        return new Set(this.__managedCells);
    }
    /**
     * Return the computed column span of this cell, in function of its managed
     * cells.
     */
    get colspan() {
        const cellsArray = Array.from(this.managedCells);
        const sameRowCells = cellsArray.filter(cell => cell.rowIndex === this.rowIndex);
        return 1 + sameRowCells.length;
    }
    /**
     * Return the computed row span of this cell, in function of its managed
     * cells.
     */
    get rowspan() {
        const cellsArray = Array.from(this.managedCells);
        const sameColumnCells = cellsArray.filter(cell => cell.columnIndex === this.columnIndex);
        return 1 + sameColumnCells.length;
    }
    /**
     * Return the row to which this cell belongs.
     */
    get row() {
        return this.ancestor(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]).children(TableCellNode);
    }
    /**
     * Return the column to which this cell belongs, as an array of cells.
     */
    get column() {
        return this.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_0__["TableNode"]).columns[this.columnIndex];
    }
    /**
     * Return the index of the row to which this cell belongs.
     */
    get rowIndex() {
        return this.ancestor(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]).rowIndex;
    }
    /**
     * Return the index of the column to which this cell belongs.
     */
    get columnIndex() {
        return this.parent.children(TableCellNode).indexOf(this);
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return true if this cell is active (ie not managed by another cell).
     */
    isActive() {
        return !this.managerCell;
    }
    /**
     * Set the given cell as manager of this cell.
     * Note: A cell managed by another cell also copies its manager's attributes
     * and properties and hands over its children to its manager.
     *
     * @override
     */
    mergeWith(newManager) {
        const thisTable = this.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_0__["TableNode"]);
        const otherTable = newManager.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_0__["TableNode"]);
        if (!newManager.is(TableCellNode) || thisTable !== otherTable)
            return;
        this.__managerCell = newManager;
        newManager.manage(this);
    }
    /**
     * Unmerge this cell from its manager.
     */
    unmerge() {
        const manager = this.__managerCell;
        if (manager) {
            this.__managerCell = null;
            // If we just removed this cell's manager, also remove this cell
            // from the old manager's managed cells.
            manager.unmanage(this);
        }
    }
    /**
     * Set the given cell as managed by this cell.
     * Note: A cell managed by another cell also copies its manager's modifiers
     * and properties and hands over its children to its manager.
     *
     * @param cell
     */
    manage(cell) {
        this.__managedCells.add(cell);
        // Copy the manager's modifiers and properties.
        cell.modifiers = this.modifiers.clone();
        cell.header = this.header;
        // Move the children to the manager.
        this.append(...cell.childVNodes);
        // Hand the managed cells over to the manager.
        for (const managedCell of cell.managedCells) {
            managedCell.mergeWith(this);
            cell.unmanage(managedCell);
        }
        // Copy the manager's row if an entire row was merged
        const row = cell.ancestor(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]);
        if (row) {
            const cells = row.children(TableCellNode);
            const rowIsMerged = cells.every(rowCell => rowCell.managerCell === this);
            if (rowIsMerged) {
                const managerRow = cell.managerCell.ancestor(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]);
                row.header = managerRow.header;
                row.modifiers = managerRow.modifiers.clone();
            }
        }
        // Ensure reciprocity.
        if (cell.managerCell !== this) {
            cell.mergeWith(this);
        }
    }
    /**
     * Restore the independence of the given cell.
     *
     * @param cell
     */
    unmanage(cell) {
        this.__managedCells.delete(cell);
        // Ensure reciprocity.
        if (cell.managerCell === this) {
            cell.unmerge();
        }
    }
}


/***/ }),

/***/ "./packages/plugin-table/src/TableCellXmlDomParser.ts":
/*!************************************************************!*\
  !*** ./packages/plugin-table/src/TableCellXmlDomParser.ts ***!
  \************************************************************/
/*! exports provided: TableCellXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableCellXmlDomParser", function() { return TableCellXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _TableCellNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableCellNode */ "./packages/plugin-table/src/TableCellNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class TableCellXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            const name = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item);
            return name === 'TD' || name === 'TH';
        };
    }
    /**
     * Parse a table cell node.
     *
     * @param item
     */
    async parse(item) {
        const cell = new _TableCellNode__WEBPACK_IMPORTED_MODULE_2__["TableCellNode"]({ header: Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'TH' });
        cell.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        cell.append(...children);
        return [cell];
    }
}
TableCellXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-table/src/TableHtmlDomRenderer.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-table/src/TableHtmlDomRenderer.ts ***!
  \***********************************************************/
/*! exports provided: TableHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableHtmlDomRenderer", function() { return TableHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _TableNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableNode */ "./packages/plugin-table/src/TableNode.ts");
/* harmony import */ var _TableRowNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableRowNode */ "./packages/plugin-table/src/TableRowNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _TableRowXmlDomParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TableRowXmlDomParser */ "./packages/plugin-table/src/TableRowXmlDomParser.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");







class TableHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _TableNode__WEBPACK_IMPORTED_MODULE_1__["TableNode"];
    }
    /**
     * Render the TableNode along with its contents (TableRowNodes).
     */
    async render(table) {
        const domTable = document.createElement('table');
        const domHead = document.createElement('thead');
        let domBody = document.createElement('tbody');
        for (const child of table.children()) {
            const domChild = await this.renderChild(child);
            if (child.is(_TableRowNode__WEBPACK_IMPORTED_MODULE_2__["TableRowNode"])) {
                // If the child is a row, append it to its containing section.
                const tableSection = child.header ? domHead : domBody;
                tableSection.append(...domChild);
                this.engine.renderAttributes(_TableRowXmlDomParser__WEBPACK_IMPORTED_MODULE_5__["TableSectionAttributes"], child, tableSection);
                if (!tableSection.parentNode) {
                    domTable.append(tableSection);
                }
            }
            else {
                domTable.append(...domChild);
                // Create a new <tbody> so the rest of the rows, if any, get
                // appended to it, after this element.
                domBody = document.createElement('tbody');
            }
        }
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_6__["Attributes"], table, domTable);
        return [domTable];
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return true if the given item is a table section element.
     *
     * @param item
     */
    _isTableSection(item) {
        const name = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_4__["nodeName"])(item);
        return name === 'THEAD' || name === 'TBODY';
    }
}
TableHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_3__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-table/src/TableNode.ts":
/*!************************************************!*\
  !*** ./packages/plugin-table/src/TableNode.ts ***!
  \************************************************/
/*! exports provided: TableNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableNode", function() { return TableNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");
/* harmony import */ var _TableRowNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableRowNode */ "./packages/plugin-table/src/TableRowNode.ts");
/* harmony import */ var _TableCellNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableCellNode */ "./packages/plugin-table/src/TableCellNode.ts");



class TableNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor() {
        super({ htmlTag: 'TABLE' });
        this.breakable = false;
    }
    //--------------------------------------------------------------------------
    // Getters
    //--------------------------------------------------------------------------
    /**
     * @override
     */
    get name() {
        return super.name + ': ' + this.rowCount + 'x' + this.columnCount;
    }
    /**
     * Return an array of rows in this table, as arrays of cells.
     */
    get rows() {
        return this.children(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]).map(row => row.children(_TableCellNode__WEBPACK_IMPORTED_MODULE_2__["TableCellNode"]));
    }
    /**
     * Return an array of columns in this table, as arrays of cells.
     */
    get columns() {
        const columns = new Array(this.columnCount).fill(undefined);
        return columns.map((_, columnIndex) => this.children(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]).map(row => row.children(_TableCellNode__WEBPACK_IMPORTED_MODULE_2__["TableCellNode"])[columnIndex]));
    }
    /**
     * Return the number of rows in this table.
     */
    get rowCount() {
        return this.children(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]).length;
    }
    /**
     * Return the number of columns in this table.
     */
    get columnCount() {
        return this.firstChild(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]).children(_TableCellNode__WEBPACK_IMPORTED_MODULE_2__["TableCellNode"]).length;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return the cell of this table that can be found at the given coordinates,
     * if any.
     *
     * @param rowIndex
     * @param columnIndex
     */
    getCellAt(rowIndex, columnIndex) {
        return this.children(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"])[rowIndex].children(_TableCellNode__WEBPACK_IMPORTED_MODULE_2__["TableCellNode"])[columnIndex];
    }
    /**
     * Add a new row above the reference row (the row of the given reference
     * cell). Copy the styles and colspans of the cells of the reference row. If
     * the reference row traverses a rowspan, extend that rowspan.
     *
     * @param referenceCell
     */
    addRowAbove(referenceCell) {
        const referenceRow = referenceCell.ancestor(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"]);
        const newRow = referenceRow.clone();
        referenceRow.before(newRow);
        for (const cell of referenceRow.children(_TableCellNode__WEBPACK_IMPORTED_MODULE_2__["TableCellNode"])) {
            const clone = cell.clone();
            newRow.append(clone);
            // Handle managers.
            const manager = cell.managerCell;
            if (manager) {
                if (manager.rowIndex === referenceRow.rowIndex) {
                    // If the current cell's manager is in the reference row,
                    // the clone's manager should be that manager's clone.
                    const managerClone = this.getCellAt(newRow.rowIndex, manager.columnIndex);
                    clone.mergeWith(managerClone);
                }
                else {
                    clone.mergeWith(manager);
                }
            }
        }
    }
    /**
     * Add a new row below the reference row (the row of the given reference
     * cell). Copy the styles and colspans of the cells of the reference row. If
     * the reference row traverses a rowspan, extend that rowspan.
     * Note: a rowspan ending at the reference cell is not extended.
     *
     * @param referenceCell
     */
    addRowBelow(referenceCell) {
        const rowIndex = referenceCell.rowIndex + referenceCell.rowspan - 1;
        const referenceRow = this.children(_TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"])[rowIndex];
        const newRow = referenceRow.clone();
        referenceRow.after(newRow);
        for (const cell of referenceRow.children(_TableCellNode__WEBPACK_IMPORTED_MODULE_2__["TableCellNode"])) {
            const clone = cell.clone();
            newRow.append(clone);
            // Handle managers.
            if (cell.managerCell) {
                const manager = cell.managerCell;
                const managerEndRow = manager.rowIndex + manager.rowspan - 1;
                if (managerEndRow === rowIndex && manager.columnIndex !== cell.columnIndex) {
                    // Take the new row equivalent of the above cell's manager
                    // (copy colspan).
                    clone.mergeWith(this.getCellAt(newRow.rowIndex, manager.columnIndex));
                }
                else if (managerEndRow !== rowIndex) {
                    // Take the manager cell of the above cell (extend rowspan),
                    // only if said manager's rowspan is not ending with the
                    // above cell.
                    clone.mergeWith(manager);
                }
            }
            else if (cell.rowspan > 1) {
                // If the cell has a rowspan, extend it.
                clone.mergeWith(cell);
            }
        }
    }
    /**
     * Add a new column before the reference column (the column of the given
     * reference cell). Copy the styles and rowspans of the cells of the
     * reference column. If the reference column traverses a colspan, extend
     * that colspan.
     *
     * @param referenceCell
     */
    addColumnBefore(referenceCell) {
        const referenceColumn = referenceCell.column;
        for (const cell of referenceColumn) {
            const clone = cell.clone();
            cell.before(clone);
            // Handle managers.
            const manager = cell.managerCell;
            if (manager) {
                if (manager.columnIndex === referenceCell.columnIndex) {
                    // If the current cell's manager is in the reference column,
                    // the clone's manager should be that manager's clone.
                    const managerClone = this.getCellAt(manager.rowIndex, clone.columnIndex);
                    clone.mergeWith(managerClone);
                }
                else {
                    clone.mergeWith(manager);
                }
            }
        }
    }
    /**
     * Add a new column after the reference column (the column of the given
     * reference cell). Copy the styles and rowspans of the cells of the
     * reference column. If the reference column traverses a colpan, extend that
     * colspan.
     * Note: a colspan ending at the reference cell is not extended.
     *
     * @param referenceCell
     */
    addColumnAfter(referenceCell) {
        const columnIndex = referenceCell.columnIndex + referenceCell.colspan - 1;
        const referenceColumn = this.columns[columnIndex];
        for (const cell of referenceColumn) {
            const clone = cell.clone();
            cell.after(clone);
            // Handle managers.
            if (cell.managerCell) {
                const manager = cell.managerCell;
                const managerEndColumn = manager.columnIndex + manager.colspan - 1;
                if (managerEndColumn === columnIndex && manager.rowIndex !== cell.rowIndex) {
                    // Take the new column equivalent of the previous cell's
                    // manager (copy rowspan).
                    clone.mergeWith(this.getCellAt(manager.rowIndex, clone.columnIndex));
                }
                else if (managerEndColumn !== columnIndex) {
                    // Take the manager cell of the previous cell (extend
                    // colspan), only if said manager's colspan is not ending
                    // with the previous cell.
                    clone.mergeWith(manager);
                }
            }
            else if (cell.colspan > 1) {
                // If the cell has a colspan, extend it.
                clone.mergeWith(cell);
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-table/src/TableRowHtmlDomRenderer.ts":
/*!**************************************************************!*\
  !*** ./packages/plugin-table/src/TableRowHtmlDomRenderer.ts ***!
  \**************************************************************/
/*! exports provided: TableRowHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableRowHtmlDomRenderer", function() { return TableRowHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _TableRowNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableRowNode */ "./packages/plugin-table/src/TableRowNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class TableRowHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _TableRowNode__WEBPACK_IMPORTED_MODULE_1__["TableRowNode"];
    }
    /**
     * Render the TableRowNode along with its contents.
     */
    async render(row) {
        const domRow = document.createElement('tr');
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], row, domRow);
        const renderedChildren = await this.renderChildren(row);
        domRow.append(...renderedChildren.flat());
        return [domRow];
    }
}
TableRowHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-table/src/TableRowNode.ts":
/*!***************************************************!*\
  !*** ./packages/plugin-table/src/TableRowNode.ts ***!
  \***************************************************/
/*! exports provided: TableRowNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableRowNode", function() { return TableRowNode; });
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");
/* harmony import */ var _TableNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TableNode */ "./packages/plugin-table/src/TableNode.ts");


class TableRowNode extends _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_0__["VElement"] {
    constructor(params) {
        super({ htmlTag: 'TR' });
        this.breakable = false;
        this.header = (params === null || params === void 0 ? void 0 : params.header) || false;
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a new VNode with the same type and attributes as this VNode.
     *
     *  @override
     */
    clone(deepClone, params) {
        const defaults = {
            header: this.header,
        };
        return super.clone(deepClone, { ...defaults, ...params });
    }
    //--------------------------------------------------------------------------
    // Getters
    //--------------------------------------------------------------------------
    /**
     * @override
     */
    get name() {
        return super.name + (this.header ? ': header' : '');
    }
    /**
     * Return the index of this row in the table.
     */
    get rowIndex() {
        return this.ancestor(_TableNode__WEBPACK_IMPORTED_MODULE_1__["TableNode"])
            .children(TableRowNode)
            .indexOf(this);
    }
}


/***/ }),

/***/ "./packages/plugin-table/src/TableRowXmlDomParser.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-table/src/TableRowXmlDomParser.ts ***!
  \***********************************************************/
/*! exports provided: TableSectionAttributes, TableRowXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableSectionAttributes", function() { return TableSectionAttributes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableRowXmlDomParser", function() { return TableRowXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _TableRowNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableRowNode */ "./packages/plugin-table/src/TableRowNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");
/* harmony import */ var _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/src/Modifiers */ "./packages/core/src/Modifiers.ts");






class TableSectionAttributes extends _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"] {
}
class TableRowXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            const name = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item);
            return name === 'THEAD' || name === 'TBODY' || name === 'TR';
        };
    }
    /**
     * Parse a row node or a table section node.
     *
     * @param item
     */
    async parse(item) {
        if (this._isTableSection(item)) {
            return this.parseTableSection(item);
        }
        else if (Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'TR') {
            const row = new _TableRowNode__WEBPACK_IMPORTED_MODULE_2__["TableRowNode"]();
            row.modifiers.append(this.engine.parseAttributes(item));
            const cells = await this.engine.parse(...item.childNodes);
            row.append(...cells);
            return [row];
        }
    }
    /**
     * Parse a <tbody> or a <thead> into an array of table rows with their
     * `header` property set in function of whether they are contained in a
     * <tbody> or a <thead>.
     *
     * @param tableSection
     */
    async parseTableSection(tableSection) {
        const parsedNodes = [];
        // Parse the section's children.
        for (const child of tableSection.childNodes) {
            parsedNodes.push(...(await this.engine.parse(child)));
        }
        // Parse the <tbody> or <thead>'s modifiers.
        const containerModifiers = new _core_src_Modifiers__WEBPACK_IMPORTED_MODULE_5__["Modifiers"](this.engine.parseAttributes(tableSection));
        // Apply the attributes, style and `header` property of the container to
        // each row.
        const name = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(tableSection);
        for (const parsedNode of parsedNodes) {
            if (parsedNode.is(_TableRowNode__WEBPACK_IMPORTED_MODULE_2__["TableRowNode"])) {
                parsedNode.header = name === 'THEAD';
                parsedNode.modifiers.replace(TableSectionAttributes, new TableSectionAttributes(containerModifiers.get(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_4__["Attributes"])));
            }
        }
        return parsedNodes;
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return true if the given item is a table section element.
     *
     * @param item
     */
    _isTableSection(item) {
        const name = Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item);
        return name === 'THEAD' || name === 'TBODY';
    }
}
TableRowXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-table/src/TableXmlDomParser.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-table/src/TableXmlDomParser.ts ***!
  \********************************************************/
/*! exports provided: TableXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableXmlDomParser", function() { return TableXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _TableNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableNode */ "./packages/plugin-table/src/TableNode.ts");
/* harmony import */ var _TableRowNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TableRowNode */ "./packages/plugin-table/src/TableRowNode.ts");
/* harmony import */ var _TableCellNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TableCellNode */ "./packages/plugin-table/src/TableCellNode.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");







class TableXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_5__["nodeName"])(item) === 'TABLE';
        };
    }
    /**
     * Parse a table node.
     *
     * @param item
     */
    async parse(item) {
        // Parse the table itself and its attributes.
        const table = new _TableNode__WEBPACK_IMPORTED_MODULE_2__["TableNode"]();
        table.modifiers.append(this.engine.parseAttributes(item));
        // Parse the contents of the table.
        const children = await this.engine.parse(...item.childNodes);
        // Build the grid.
        const dimensions = this._getTableDimensions(item);
        const parsedRows = children.filter(row => row.is(_TableRowNode__WEBPACK_IMPORTED_MODULE_3__["TableRowNode"]));
        const grid = this._createTableGrid(dimensions, parsedRows);
        // Append the cells to the rows.
        const rows = new Array(dimensions[0]);
        for (let rowIndex = 0; rowIndex < grid.length; rowIndex += 1) {
            rows[rowIndex] = parsedRows[rowIndex];
            const cells = grid[rowIndex];
            let row = rows[rowIndex];
            if (!row) {
                row = new _TableRowNode__WEBPACK_IMPORTED_MODULE_3__["TableRowNode"]();
            }
            row.append(...cells);
        }
        // Append the rows and other children to the table.
        let rowIndex = 0;
        for (let childIndex = 0; childIndex < children.length; childIndex += 1) {
            const child = children[childIndex];
            if (child.is(_TableRowNode__WEBPACK_IMPORTED_MODULE_3__["TableRowNode"])) {
                const row = rows[rowIndex];
                table.append(row);
                rowIndex += 1;
            }
            else {
                table.append(children[childIndex]);
            }
        }
        return [table];
    }
    //--------------------------------------------------------------------------
    // Private
    //--------------------------------------------------------------------------
    /**
     * Return a tuple with the row length and the column length of the given DOM
     * table element.
     *
     * @param domTable
     */
    _getTableDimensions(domTable) {
        const domRows = Array.from(domTable.querySelectorAll('tr'));
        const domTableRows = domRows.filter(row => row.closest('table') === domTable);
        let columnCount = 0;
        if (domTableRows.length) {
            const domCells = Array.from(domTableRows[0].querySelectorAll('td, th'));
            const domTableCells = domCells.filter(cell => cell.closest('table') === domTable);
            for (const domChild of domTableCells) {
                columnCount += parseInt(domChild.getAttribute('colSpan') || '1', 10);
            }
        }
        return [domTableRows.length, columnCount];
    }
    /**
     * Build and return the grid (2D array: rows of cells) that will be used to
     * create the table. We want all the rows to have the same number of cells,
     * and all the columns to have the same number of cells.
     *
     * @param dimensions
     * @param rows
     */
    _createTableGrid(dimensions, rows) {
        const [rowCount, columnCount] = dimensions;
        // Initialize the grid (2D array: rows of cells).
        const grid = Array.from(Array(rowCount), () => new Array(columnCount));
        // Move every parsed child row to its place in the grid, and create
        // placeholder cells where there aren't any, accounting for column spans
        // and row spans.
        for (let rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
            const row = rows[rowIndex];
            const cells = row.children(_TableCellNode__WEBPACK_IMPORTED_MODULE_4__["TableCellNode"]).slice();
            for (let domCellIndex = 0; domCellIndex < cells.length; domCellIndex += 1) {
                const cell = cells[domCellIndex];
                // If there is a cell at this grid position already, it means we
                // added it there when handling another cell, ie. it's a
                // placeholder cell, managed by a previously handled cell.
                // The current cell needs to be added at the next available slot
                // instead.
                let columnIndex = domCellIndex;
                while (grid[rowIndex][columnIndex]) {
                    columnIndex += 1;
                }
                // Check traversing colspan and rowspan to insert placeholder
                // cells where necessary. Consume these attributes as they will
                // be replaced with getters.
                const attributes = cell.modifiers.find(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_6__["Attributes"]);
                let colspan = 1;
                let rowspan = 1;
                if (attributes) {
                    colspan = parseInt(attributes.get('colspan'), 10) || 1;
                    rowspan = parseInt(attributes.get('rowspan'), 10) || 1;
                    attributes.remove('colspan');
                    attributes.remove('rowspan');
                }
                for (let i = rowIndex; i < rowIndex + rowspan; i += 1) {
                    for (let j = columnIndex; j < columnIndex + colspan; j += 1) {
                        if (i === rowIndex && j === columnIndex) {
                            // Add the current cell to the grid.
                            grid[i][j] = cell;
                        }
                        else {
                            // Add a placeholder cell to the grid.
                            const placeholderCell = new _TableCellNode__WEBPACK_IMPORTED_MODULE_4__["TableCellNode"]();
                            placeholderCell.mergeWith(cell);
                            grid[i][j] = placeholderCell;
                        }
                    }
                }
            }
        }
        return grid;
    }
}
TableXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_1__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-textcolor/src/TextColor.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-textcolor/src/TextColor.ts ***!
  \****************************************************/
/*! exports provided: TextColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextColor", function() { return TextColor; });
/* harmony import */ var _plugin_color_src_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-color/src/Color */ "./packages/plugin-color/src/Color.ts");

class TextColor extends _plugin_color_src_Color__WEBPACK_IMPORTED_MODULE_0__["Color"] {
    constructor() {
        super(...arguments);
        this.styleName = 'color';
        this.configuration = { defaultColor: 'black', ...this.configuration };
        this.commands = {
            colorText: {
                handler: this.color,
            },
            uncolorText: {
                handler: this.uncolor,
            },
        };
        this.loadables = {
            shortcuts: [
                {
                    pattern: 'CTRL+G',
                    commandId: 'colorText',
                    // TODO: use dialog to get params
                    commandArgs: {
                        color: 'red',
                    },
                },
                {
                    pattern: 'CTRL+SHIFT+G',
                    commandId: 'uncolorText',
                },
            ],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-toolbar/assets/Toolbar.css":
/*!****************************************************!*\
  !*** ./packages/plugin-toolbar/assets/Toolbar.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./Toolbar.css */ "./node_modules/css-loader/dist/cjs.js!./packages/plugin-toolbar/assets/Toolbar.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);

var exported = content.locals ? content.locals : {};



module.exports = exported;

/***/ }),

/***/ "./packages/plugin-toolbar/assets/Toolbar.xml":
/*!****************************************************!*\
  !*** ./packages/plugin-toolbar/assets/Toolbar.xml ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<templates>\n    <!-- MAIN -->\n    <jw-toolbar t-name=\"toolbar\">\n        <t t-foreach=\"config\" t-as=\"group\"\n            t-key=\"group_index\">\n            <t t-if=\"group === '|'\">\n                <jw-separator role=\"separator\"/>\n            </t>\n            <t t-elif=\"isString(group)\">\n                <span><t t-esc=\"group\"/></span>\n            </t>\n            <t t-else=\"\">\n                <toolbar-group>\n                    <t t-foreach=\"group\" t-as=\"toolbarItem\" t-key=\"toolbarItem_index\">\n                        <t t-if=\"toolbarItem === '|'\">\n                            <jw-separator role=\"separator\"/>\n                        </t>\n                        <t t-elif=\"isString(toolbarItem)\">\n                            <span><t t-esc=\"toolbarItem\"/></span>\n                        </t>\n                        <t t-elif=\"isArray(toolbarItem)\">\n                            <select t-on-change=\"onDropdownChange(toolbarItem)\">\n                                <option/>\n                                <t t-foreach=\"toolbarItem\" t-as=\"dropDownItem\" t-key=\"dropdownItem_index\">\n                                    <t t-if=\"isString(dropDownItem)\">\n                                        <option disabled=\"true\"><t t-esc=\"dropDownItem\"/></option>\n                                    </t>\n                                    <t t-else=\"\">\n                                        <option t-if=\"isEnabled(toolbarItem)\"\n                                            t-attf-class=\"{{dropDownItem.class}}\"\n                                            t-attf-value=\"{{dropDownItem.title}}\"\n                                            t-att-selected=\"isSelected(dropDownItem)\">\n                                            <t t-esc=\"dropDownItem.title\"/>\n                                        </option>\n                                    </t>\n                                </t>\n                            </select>\n                        </t>\n                        <t t-else=\"\">\n                            <button t-attf-class=\"fa {{toolbarItem.class}} fa-fw\"\n                                t-att-class=\"{\n                                    pressed: isSelected(toolbarItem),\n                                }\"\n                                t-attf-title=\"{{toolbarItem.title}}\"\n                                t-att-aria-pressed=\"isSelected(toolbarItem)\"\n                                t-on-click=\"execCommand(toolbarItem.commandId,\n                                    toolbarItem.commandArgs)\"\n                                t-att-disabled=\"!isEnabled(toolbarItem)\"/>\n                        </t>\n                    </t>\n                </toolbar-group>\n            </t>\n        </t>\n    </jw-toolbar>\n</templates>\n"

/***/ }),

/***/ "./packages/plugin-toolbar/src/Toolbar.ts":
/*!************************************************!*\
  !*** ./packages/plugin-toolbar/src/Toolbar.ts ***!
  \************************************************/
/*! exports provided: Toolbar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Toolbar", function() { return Toolbar; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_owl_src_Owl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-owl/src/Owl */ "./packages/plugin-owl/src/Owl.ts");
/* harmony import */ var _components_ToolbarComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/ToolbarComponent */ "./packages/plugin-toolbar/src/components/ToolbarComponent.ts");
/* harmony import */ var _plugin_owl_src_ui_OwlNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-owl/src/ui/OwlNode */ "./packages/plugin-owl/src/ui/OwlNode.ts");
/* harmony import */ var _assets_Toolbar_xml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../assets/Toolbar.xml */ "./packages/plugin-toolbar/assets/Toolbar.xml");
/* harmony import */ var _assets_Toolbar_xml__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_assets_Toolbar_xml__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _assets_Toolbar_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assets/Toolbar.css */ "./packages/plugin-toolbar/assets/Toolbar.css");
/* harmony import */ var _assets_Toolbar_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_assets_Toolbar_css__WEBPACK_IMPORTED_MODULE_5__);






class Toolbar extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            components: [
                {
                    id: 'toolbar',
                    async render() {
                        return [new _plugin_owl_src_ui_OwlNode__WEBPACK_IMPORTED_MODULE_3__["OwlNode"](_components_ToolbarComponent__WEBPACK_IMPORTED_MODULE_2__["ToolbarComponent"], {})];
                    },
                },
            ],
            componentZones: [['toolbar', 'tools']],
            owlTemplates: [_assets_Toolbar_xml__WEBPACK_IMPORTED_MODULE_4___default.a],
        };
    }
}
Toolbar.dependencies = [_plugin_owl_src_Owl__WEBPACK_IMPORTED_MODULE_1__["Owl"]];


/***/ }),

/***/ "./packages/plugin-toolbar/src/components/ToolbarComponent.ts":
/*!********************************************************************!*\
  !*** ./packages/plugin-toolbar/src/components/ToolbarComponent.ts ***!
  \********************************************************************/
/*! exports provided: ToolbarComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolbarComponent", function() { return ToolbarComponent; });
/* harmony import */ var _Toolbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Toolbar */ "./packages/plugin-toolbar/src/Toolbar.ts");
/* harmony import */ var _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugin-owl/src/ui/OwlComponent */ "./packages/plugin-owl/src/ui/OwlComponent.ts");


class ToolbarComponent extends _plugin_owl_src_ui_OwlComponent__WEBPACK_IMPORTED_MODULE_1__["OwlComponent"] {
    constructor() {
        super(...arguments);
        this.config = this.env.editor.plugins.get(_Toolbar__WEBPACK_IMPORTED_MODULE_0__["Toolbar"]).configuration.layout || [];
    }
    async willStart() {
        this.env.editor.dispatcher.registerCommandHook('*', this.refresh.bind(this));
        return super.willStart();
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    execCommand(commandId, commandArgs) {
        this.env.editor.execCommand(commandId, commandArgs);
    }
    isEnabled(item) {
        return !item.enabled || item.enabled(this.env.editor);
    }
    isSelected(item) {
        return item.selected && item.selected(this.env.editor);
    }
    isArray(item) {
        return Array.isArray(item);
    }
    isString(item) {
        return typeof item === 'string';
    }
    onDropdownChange(dropdown, event) {
        const selectedIndex = event.target.selectedIndex;
        // -1 to account for the mandatory empty option on top:
        const dropdownItem = dropdown[selectedIndex - 1];
        if (dropdownItem) {
            this.execCommand(dropdownItem.commandId, dropdownItem.commandArgs);
        }
    }
    async refresh() {
        this.render();
    }
}
ToolbarComponent.components = {};
ToolbarComponent.template = 'toolbar';


/***/ }),

/***/ "./packages/plugin-underline/src/Underline.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-underline/src/Underline.ts ***!
  \****************************************************/
/*! exports provided: Underline */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Underline", function() { return Underline; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _UnderlineFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UnderlineFormat */ "./packages/plugin-underline/src/UnderlineFormat.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");
/* harmony import */ var _UnderlineXmlDomParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./UnderlineXmlDomParser */ "./packages/plugin-underline/src/UnderlineXmlDomParser.ts");




class Underline extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_UnderlineXmlDomParser__WEBPACK_IMPORTED_MODULE_3__["UnderlineXmlDomParser"]],
            shortcuts: [
                {
                    pattern: 'CTRL+U',
                    commandId: 'toggleFormat',
                    commandArgs: { FormatClass: _UnderlineFormat__WEBPACK_IMPORTED_MODULE_1__["UnderlineFormat"] },
                },
            ],
        };
    }
}
Underline.dependencies = [_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_2__["Inline"]];


/***/ }),

/***/ "./packages/plugin-underline/src/UnderlineButtons.ts":
/*!***********************************************************!*\
  !*** ./packages/plugin-underline/src/UnderlineButtons.ts ***!
  \***********************************************************/
/*! exports provided: UnderlineButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnderlineButton", function() { return UnderlineButton; });
/* harmony import */ var _UnderlineFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UnderlineFormat */ "./packages/plugin-underline/src/UnderlineFormat.ts");
/* harmony import */ var _plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-inline/src/Inline */ "./packages/plugin-inline/src/Inline.ts");


const UnderlineButton = {
    title: 'Toggle underline',
    class: 'fa-underline',
    commandId: 'toggleFormat',
    commandArgs: { FormatClass: _UnderlineFormat__WEBPACK_IMPORTED_MODULE_0__["UnderlineFormat"] },
    selected: (editor) => editor.plugins.get(_plugin_inline_src_Inline__WEBPACK_IMPORTED_MODULE_1__["Inline"]).isAllFormat(_UnderlineFormat__WEBPACK_IMPORTED_MODULE_0__["UnderlineFormat"]),
};


/***/ }),

/***/ "./packages/plugin-underline/src/UnderlineFormat.ts":
/*!**********************************************************!*\
  !*** ./packages/plugin-underline/src/UnderlineFormat.ts ***!
  \**********************************************************/
/*! exports provided: UnderlineFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnderlineFormat", function() { return UnderlineFormat; });
/* harmony import */ var _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/Format */ "./packages/plugin-inline/src/Format.ts");

class UnderlineFormat extends _plugin_inline_src_Format__WEBPACK_IMPORTED_MODULE_0__["Format"] {
    constructor() {
        super(...arguments);
        this.htmlTag = 'U';
    }
}


/***/ }),

/***/ "./packages/plugin-underline/src/UnderlineXmlDomParser.ts":
/*!****************************************************************!*\
  !*** ./packages/plugin-underline/src/UnderlineXmlDomParser.ts ***!
  \****************************************************************/
/*! exports provided: UnderlineXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnderlineXmlDomParser", function() { return UnderlineXmlDomParser; });
/* harmony import */ var _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/FormatParser */ "./packages/plugin-inline/src/FormatParser.ts");
/* harmony import */ var _UnderlineFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UnderlineFormat */ "./packages/plugin-underline/src/UnderlineFormat.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class UnderlineXmlDomParser extends _plugin_inline_src_FormatParser__WEBPACK_IMPORTED_MODULE_0__["FormatParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            return item instanceof Element && Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'U';
        };
    }
    /**
     * Parse an underline node.
     *
     * @param item
     */
    async parse(item) {
        const underline = new _UnderlineFormat__WEBPACK_IMPORTED_MODULE_1__["UnderlineFormat"]();
        underline.modifiers.append(this.engine.parseAttributes(item));
        const children = await this.engine.parse(...item.childNodes);
        this.applyFormat(underline, children);
        return children;
    }
}
UnderlineXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-video/src/OdooVideo.ts":
/*!************************************************!*\
  !*** ./packages/plugin-video/src/OdooVideo.ts ***!
  \************************************************/
/*! exports provided: OdooVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooVideo", function() { return OdooVideo; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _OdooVideoXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OdooVideoXmlDomParser */ "./packages/plugin-video/src/OdooVideoXmlDomParser.ts");
/* harmony import */ var _OdooVideoHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OdooVideoHtmlDomRenderer */ "./packages/plugin-video/src/OdooVideoHtmlDomRenderer.ts");



class OdooVideo extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_OdooVideoXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["OdooVideoXmlDomParser"]],
            renderers: [_OdooVideoHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["OdooVideoHtmlDomRenderer"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-video/src/OdooVideoHtmlDomRenderer.ts":
/*!***************************************************************!*\
  !*** ./packages/plugin-video/src/OdooVideoHtmlDomRenderer.ts ***!
  \***************************************************************/
/*! exports provided: OdooVideoHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooVideoHtmlDomRenderer", function() { return OdooVideoHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _OdooVideoNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OdooVideoNode */ "./packages/plugin-video/src/OdooVideoNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _core_src_VSelection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/src/VSelection */ "./packages/core/src/VSelection.ts");




class OdooVideoHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _OdooVideoNode__WEBPACK_IMPORTED_MODULE_1__["OdooVideoNode"];
    }
    async render(node) {
        const wrapper = document.createElement('div');
        wrapper.classList.add('media_iframe_video');
        wrapper.setAttribute('data-oe-expression', node.src);
        wrapper.innerHTML = [
            `<div class="css_editable_mode_display">&nbsp;</div>`,
            `<div class="media_iframe_video_size">&nbsp;</div>`,
            `<iframe src="${node.src}" frameborder="0" allowfullscreen="allowfullscreen"></iframe>`,
        ].join('');
        wrapper.querySelector('.css_editable_mode_display').addEventListener('click', () => {
            this.engine.editor.nextEventMutex(() => {
                this.engine.editor.execCommand('setSelection', {
                    vSelection: {
                        anchorNode: node,
                        direction: _core_src_VSelection__WEBPACK_IMPORTED_MODULE_3__["Direction"].FORWARD,
                    },
                });
            });
        });
        wrapper.querySelector('.css_editable_mode_display').addEventListener('dblclick', () => {
            this.engine.editor.nextEventMutex(() => {
                this.engine.editor.execCommand('openMedia');
            });
        });
        return [wrapper];
    }
}
OdooVideoHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-video/src/OdooVideoNode.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-video/src/OdooVideoNode.ts ***!
  \****************************************************/
/*! exports provided: OdooVideoNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooVideoNode", function() { return OdooVideoNode; });
/* harmony import */ var _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/VNodes/AtomicNode */ "./packages/core/src/VNodes/AtomicNode.ts");

class OdooVideoNode extends _core_src_VNodes_AtomicNode__WEBPACK_IMPORTED_MODULE_0__["AtomicNode"] {
    constructor(params) {
        super();
        this.src = params.src;
    }
}


/***/ }),

/***/ "./packages/plugin-video/src/OdooVideoXmlDomParser.ts":
/*!************************************************************!*\
  !*** ./packages/plugin-video/src/OdooVideoXmlDomParser.ts ***!
  \************************************************************/
/*! exports provided: OdooVideoXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OdooVideoXmlDomParser", function() { return OdooVideoXmlDomParser; });
/* harmony import */ var _OdooVideoNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OdooVideoNode */ "./packages/plugin-video/src/OdooVideoNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class OdooVideoXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (node) => {
            const isVideo = node instanceof Element &&
                Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(node) === 'DIV' &&
                node.classList.contains('media_iframe_video') &&
                node.attributes['data-oe-expression'] &&
                node.attributes['data-oe-expression'].value;
            return isVideo;
        };
    }
    async parse(element) {
        const video = new _OdooVideoNode__WEBPACK_IMPORTED_MODULE_0__["OdooVideoNode"]({ src: element.attributes['data-oe-expression'].value });
        video.modifiers.append(this.engine.parseAttributes(element));
        return [video];
    }
}
OdooVideoXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/plugin-xml/src/Attributes.ts":
/*!***********************************************!*\
  !*** ./packages/plugin-xml/src/Attributes.ts ***!
  \***********************************************/
/*! exports provided: Attributes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Attributes", function() { return Attributes; });
/* harmony import */ var _core_src_Modifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/Modifier */ "./packages/core/src/Modifier.ts");
/* harmony import */ var _CssStyle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CssStyle */ "./packages/plugin-xml/src/CssStyle.ts");
/* harmony import */ var _ClassList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ClassList */ "./packages/plugin-xml/src/ClassList.ts");



class Attributes extends _core_src_Modifier__WEBPACK_IMPORTED_MODULE_0__["Modifier"] {
    constructor(attributes) {
        super();
        this._record = {};
        this.style = new _CssStyle__WEBPACK_IMPORTED_MODULE_1__["CssStyle"]();
        this.classList = new _ClassList__WEBPACK_IMPORTED_MODULE_2__["ClassList"]();
        if (attributes instanceof Attributes) {
            for (const key of attributes.keys()) {
                this.set(key, attributes.get(key));
            }
        }
        else if (attributes instanceof NamedNodeMap) {
            for (const attribute of Array.from(attributes)) {
                this.set(attribute.name, attribute.value);
            }
        }
        else if (attributes) {
            for (const key of Object.keys(attributes)) {
                this.set(key, attributes[key]);
            }
        }
    }
    //--------------------------------------------------------------------------
    // Getters
    //--------------------------------------------------------------------------
    get length() {
        return this.keys().length;
    }
    get name() {
        const name = [];
        for (const attributeName of this.keys()) {
            name.push(`${attributeName}: "${this.get(attributeName)}"`);
        }
        return `{${name.join(', ')}}`;
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a clone of this record.
     */
    clone() {
        const clone = new this.constructor();
        clone._record = { ...this._record };
        clone.style = this.style.clone();
        clone.classList = this.classList.clone();
        return clone;
    }
    /**
     * Return a string representing the attributes.
     */
    toString() {
        if (!this.length)
            return `${this.constructor.name}: {}`;
        const valueRepr = [];
        for (const key of this.keys()) {
            valueRepr.push(`${key}: "${this.get(key)}"`);
        }
        return `${this.constructor.name}: { ${valueRepr.join(', ')} }`;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return true if the record has the given key, false otherwise.
     *
     * @param key
     */
    has(key) {
        return this.keys().includes(key);
    }
    /**
     * Return an array containing all the keys in the record.
     */
    keys() {
        const keys = Object.keys(this._record).filter(key => {
            return ((key !== 'style' || !!this.style.length) &&
                (key !== 'class' || !!this.classList.length));
        });
        if (this.classList.length && !keys.includes('class')) {
            // The node was not parsed with a class attribute, add it in place.
            // Use `get` for its value but record its position in the record.
            this._record.class = null;
            keys.push('class');
        }
        if (this.style.length && !keys.includes('style')) {
            // The node was not parsed with a style attribute, keep it always at
            // the end of the attributes list.
            keys.push('style');
        }
        return keys;
    }
    /**
     * Return an array containing all the values in the record.
     */
    values() {
        return this.keys().map(key => this.get(key));
    }
    /**
     * Return the record matching the given name.
     *
     * @param name
     */
    get(name) {
        if (name === 'style') {
            return this.style.cssText;
        }
        else if (name === 'class') {
            return this.classList.className;
        }
        else {
            return this._record[name];
        }
    }
    /**
     * Set the record with the given name to the given value.
     *
     * @param name
     * @param value
     */
    set(name, value) {
        if (name === 'style') {
            this.style.reset(value);
            // Use `get` for its value but record its position in the record.
            this._record.style = null;
        }
        else if (name === 'class') {
            this.classList.reset(value);
            // Use `get` for its value but record its position in the record.
            this._record.class = null;
        }
        else {
            this._record[name] = value;
        }
    }
    /**
     * Remove the records with the given names.
     *
     * @param names
     */
    remove(...names) {
        for (const name of names) {
            if (name === 'style') {
                this.style.clear();
            }
            else if (name === 'class') {
                this.classList.clear();
            }
            else {
                delete this._record[name];
            }
        }
    }
    clear() {
        this._record = {};
        this.style.clear();
        this.classList.clear();
    }
    /**
     * Return true if the given attributes are the same as the ones in this
     * record.
     *
     * @param otherAttributes
     */
    isSameAs(otherAttributes) {
        if (otherAttributes) {
            return (this.length === otherAttributes.length &&
                this.keys().every(key => {
                    return this.get(key) === otherAttributes.get(key);
                }));
        }
        else {
            return !this.length;
        }
    }
}


/***/ }),

/***/ "./packages/plugin-xml/src/ClassList.ts":
/*!**********************************************!*\
  !*** ./packages/plugin-xml/src/ClassList.ts ***!
  \**********************************************/
/*! exports provided: ClassList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClassList", function() { return ClassList; });
class ClassList {
    constructor(...classList) {
        this._classList = new Set();
        for (const className of classList) {
            this.add(className);
        }
    }
    //--------------------------------------------------------------------------
    // Getters
    //--------------------------------------------------------------------------
    /**
     * Return the number of classes in the set.
     */
    get length() {
        return this._classList.size;
    }
    /**
     * Return a textual representation of the set.
     */
    get className() {
        if (!this._classList.size)
            return;
        return Array.from(this._classList).join(' ');
    }
    /**
     * Reinitialize the set with a new set of classes, from a string to parse.
     */
    set className(className) {
        this.reset(className);
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a new set of classes, parsed from a className string.
     *
     * @param className
     */
    parseClassName(className) {
        return new Set(className
            .trim()
            .split(/\s+/)
            .filter(c => c.length));
    }
    /**
     * Return a clone of this list.
     */
    clone() {
        const clone = new ClassList();
        clone._classList = new Set(this._classList);
        return clone;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return true if the set has the given class, false otherwise.
     *
     * @param name
     */
    has(name) {
        return this._classList.has(name);
    }
    /**
     * Return an array containing all the items in the list.
     */
    items() {
        return Array.from(this._classList);
    }
    /**
     * Add the given class(s) to the set.
     *
     * @param className
     */
    add(className) {
        const classes = this.parseClassName(className);
        for (const name of classes) {
            this._classList.add(name);
        }
    }
    /**
     * Remove the given class(es) from the set.
     *
     * @param className
     */
    remove(className) {
        const classes = this.parseClassName(className);
        for (const name of classes) {
            this._classList.delete(name);
        }
    }
    /**
     * Clear the set of all its classes.
     */
    clear() {
        this._classList = new Set();
    }
    /**
     * Reinitialize the set with a new set of classes (empty if no argument is
     * passed). The argument can be a set of classes or a string to parse.
     *
     * @param classList
     */
    reset(...classList) {
        this._classList.clear();
        for (const className of classList) {
            this.add(className);
        }
    }
    /**
     * For each given class, add it to the set if it doesn't have it yet,
     * otherwise remove it.
     *
     * @param classes
     */
    toggle(...classes) {
        for (const className of classes) {
            const parsed = this.parseClassName(className);
            for (const name of parsed) {
                if (this._classList.has(name)) {
                    this._classList.delete(name);
                }
                else {
                    this._classList.add(name);
                }
            }
        }
    }
}


/***/ }),

/***/ "./packages/plugin-xml/src/CssStyle.ts":
/*!*********************************************!*\
  !*** ./packages/plugin-xml/src/CssStyle.ts ***!
  \*********************************************/
/*! exports provided: CssStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CssStyle", function() { return CssStyle; });
class CssStyle {
    constructor(style) {
        this._style = {};
        if (style) {
            this.reset(style);
        }
    }
    //--------------------------------------------------------------------------
    // Getters
    //--------------------------------------------------------------------------
    /**
     * Return the number of styles in the set.
     */
    get length() {
        return Object.keys(this._style).length;
    }
    /**
     * Return a textual representation of the CSS declaration block.
     */
    get cssText() {
        const keys = Object.keys(this._style);
        if (!Object.keys(this._style).length)
            return;
        const valueRepr = [];
        for (const key of keys) {
            valueRepr.push(`${key}: ${this._style[key]}`);
        }
        let result = valueRepr.join('; ');
        if (valueRepr.length) {
            result += ';';
        }
        return result;
    }
    /**
     * Reinitialize the record with a new record of styles, from a string to
     * parse.
     */
    set cssText(cssText) {
        this.reset(cssText);
    }
    //--------------------------------------------------------------------------
    // Lifecycle
    //--------------------------------------------------------------------------
    /**
     * Return a new record of styles, parsed from a cssText string.
     *
     * @param className
     */
    parseCssText(cssText) {
        const style = {};
        return cssText
            .split(';')
            .map(style => style.trim())
            .filter(style => style.length)
            .reduce((accumulator, value) => {
            const [key, v] = value.split(':');
            style[key.trim()] = v.trim();
            return accumulator;
        }, style);
    }
    /**
     * Return a clone of this record.
     */
    clone() {
        const clone = new CssStyle();
        clone._style = { ...this._style };
        return clone;
    }
    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    /**
     * Return true if the record has the given style, false otherwise.
     *
     * @param key
     */
    has(key) {
        return !!this._style[key];
    }
    /**
     * Return an array containing all the keys in the record.
     */
    keys() {
        return Object.keys(this._style);
    }
    /**
     * Return an array containing all the values in the record.
     */
    values() {
        return Object.values(this._style);
    }
    /**
     * Return the record matching the given name.
     *
     * @param name
     */
    get(name) {
        return this._style[name];
    }
    /**
     * Set the record with the given name to the given value.
     *
     * @param name
     * @param value
     */
    set(name, value) {
        this._style[name] = value;
    }
    /**
     * Remove the record(s) with the given name(s).
     *
     * @param name
     */
    remove(...names) {
        for (const name of names) {
            delete this._style[name];
        }
    }
    /**
     * Clear the record of all its styles.
     */
    clear() {
        this._style = {};
    }
    /**
     * Reinitialize the record with a new record of styles (empty if no argument
     * is passed). The argument can be a record of styles or a string to parse.
     *
     * @param style
     */
    reset(style = {}) {
        if (typeof style === 'object') {
            this._style = style;
        }
        else {
            this._style = this.parseCssText(style);
        }
    }
}


/***/ }),

/***/ "./packages/plugin-xml/src/DefaultXmlDomParser.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-xml/src/DefaultXmlDomParser.ts ***!
  \********************************************************/
/*! exports provided: DefaultXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultXmlDomParser", function() { return DefaultXmlDomParser; });
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/src/VNodes/VElement */ "./packages/core/src/VNodes/VElement.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");



class DefaultXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_0__["AbstractParser"] {
    async parse(item) {
        // If the node could not be parsed, create a generic element node with
        // the HTML tag of the DOM Node. This way we may not support the node
        // but we don't break it either.
        const element = new _core_src_VNodes_VElement__WEBPACK_IMPORTED_MODULE_1__["VElement"]({ htmlTag: Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_2__["nodeName"])(item) });
        if (item instanceof Element) {
            element.modifiers.append(this.engine.parseAttributes(item));
        }
        const nodes = await this.engine.parse(...item.childNodes);
        element.append(...nodes);
        return [element];
    }
}
DefaultXmlDomParser.id = 'dom/xml';


/***/ }),

/***/ "./packages/plugin-xml/src/Xml.ts":
/*!****************************************!*\
  !*** ./packages/plugin-xml/src/Xml.ts ***!
  \****************************************/
/*! exports provided: Xml */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Xml", function() { return Xml; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/Parser */ "./packages/plugin-parser/src/Parser.ts");
/* harmony import */ var _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-renderer/src/Renderer */ "./packages/plugin-renderer/src/Renderer.ts");
/* harmony import */ var _XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");




class Xml extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsingEngines: [_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_3__["XmlDomParsingEngine"]],
        };
    }
}
Xml.dependencies = [_plugin_parser_src_Parser__WEBPACK_IMPORTED_MODULE_1__["Parser"], _plugin_renderer_src_Renderer__WEBPACK_IMPORTED_MODULE_2__["Renderer"]];


/***/ }),

/***/ "./packages/plugin-xml/src/XmlDomParsingEngine.ts":
/*!********************************************************!*\
  !*** ./packages/plugin-xml/src/XmlDomParsingEngine.ts ***!
  \********************************************************/
/*! exports provided: XmlDomParsingEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XmlDomParsingEngine", function() { return XmlDomParsingEngine; });
/* harmony import */ var _plugin_parser_src_ParsingEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-parser/src/ParsingEngine */ "./packages/plugin-parser/src/ParsingEngine.ts");
/* harmony import */ var _DefaultXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DefaultXmlDomParser */ "./packages/plugin-xml/src/DefaultXmlDomParser.ts");
/* harmony import */ var _Attributes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Attributes */ "./packages/plugin-xml/src/Attributes.ts");



class XmlDomParsingEngine extends _plugin_parser_src_ParsingEngine__WEBPACK_IMPORTED_MODULE_0__["ParsingEngine"] {
    /**
     * Parse a node's attributes and return them.
     *
     * @param node
     */
    parseAttributes(node) {
        return new _Attributes__WEBPACK_IMPORTED_MODULE_2__["Attributes"](node.attributes);
    }
}
XmlDomParsingEngine.id = 'dom/xml';
XmlDomParsingEngine.defaultParser = _DefaultXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["DefaultXmlDomParser"];


/***/ }),

/***/ "./packages/plugin-youtube/src/Youtube.ts":
/*!************************************************!*\
  !*** ./packages/plugin-youtube/src/Youtube.ts ***!
  \************************************************/
/*! exports provided: Youtube */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Youtube", function() { return Youtube; });
/* harmony import */ var _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/src/JWPlugin */ "./packages/core/src/JWPlugin.ts");
/* harmony import */ var _YoutubeXmlDomParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./YoutubeXmlDomParser */ "./packages/plugin-youtube/src/YoutubeXmlDomParser.ts");
/* harmony import */ var _YoutubeHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./YoutubeHtmlDomRenderer */ "./packages/plugin-youtube/src/YoutubeHtmlDomRenderer.ts");



class Youtube extends _core_src_JWPlugin__WEBPACK_IMPORTED_MODULE_0__["JWPlugin"] {
    constructor() {
        super(...arguments);
        this.loadables = {
            parsers: [_YoutubeXmlDomParser__WEBPACK_IMPORTED_MODULE_1__["YoutubeXmlDomParser"]],
            renderers: [_YoutubeHtmlDomRenderer__WEBPACK_IMPORTED_MODULE_2__["YoutubeHtmlDomRenderer"]],
        };
    }
}


/***/ }),

/***/ "./packages/plugin-youtube/src/YoutubeHtmlDomRenderer.ts":
/*!***************************************************************!*\
  !*** ./packages/plugin-youtube/src/YoutubeHtmlDomRenderer.ts ***!
  \***************************************************************/
/*! exports provided: YoutubeHtmlDomRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YoutubeHtmlDomRenderer", function() { return YoutubeHtmlDomRenderer; });
/* harmony import */ var _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-renderer/src/AbstractRenderer */ "./packages/plugin-renderer/src/AbstractRenderer.ts");
/* harmony import */ var _YoutubeNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./YoutubeNode */ "./packages/plugin-youtube/src/YoutubeNode.ts");
/* harmony import */ var _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-html/src/HtmlDomRenderingEngine */ "./packages/plugin-html/src/HtmlDomRenderingEngine.ts");
/* harmony import */ var _plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../plugin-xml/src/Attributes */ "./packages/plugin-xml/src/Attributes.ts");




class YoutubeHtmlDomRenderer extends _plugin_renderer_src_AbstractRenderer__WEBPACK_IMPORTED_MODULE_0__["AbstractRenderer"] {
    constructor() {
        super(...arguments);
        this.predicate = _YoutubeNode__WEBPACK_IMPORTED_MODULE_1__["YoutubeNode"];
    }
    async render(node) {
        const youtube = document.createElement('iframe');
        this.engine.renderAttributes(_plugin_xml_src_Attributes__WEBPACK_IMPORTED_MODULE_3__["Attributes"], node, youtube);
        return [youtube];
    }
}
YoutubeHtmlDomRenderer.id = _plugin_html_src_HtmlDomRenderingEngine__WEBPACK_IMPORTED_MODULE_2__["HtmlDomRenderingEngine"].id;


/***/ }),

/***/ "./packages/plugin-youtube/src/YoutubeNode.ts":
/*!****************************************************!*\
  !*** ./packages/plugin-youtube/src/YoutubeNode.ts ***!
  \****************************************************/
/*! exports provided: YoutubeNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YoutubeNode", function() { return YoutubeNode; });
/* harmony import */ var _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../plugin-inline/src/InlineNode */ "./packages/plugin-inline/src/InlineNode.ts");

class YoutubeNode extends _plugin_inline_src_InlineNode__WEBPACK_IMPORTED_MODULE_0__["InlineNode"] {
}
YoutubeNode.atomic = true;


/***/ }),

/***/ "./packages/plugin-youtube/src/YoutubeXmlDomParser.ts":
/*!************************************************************!*\
  !*** ./packages/plugin-youtube/src/YoutubeXmlDomParser.ts ***!
  \************************************************************/
/*! exports provided: YoutubeXmlDomParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YoutubeXmlDomParser", function() { return YoutubeXmlDomParser; });
/* harmony import */ var _YoutubeNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./YoutubeNode */ "./packages/plugin-youtube/src/YoutubeNode.ts");
/* harmony import */ var _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../plugin-parser/src/AbstractParser */ "./packages/plugin-parser/src/AbstractParser.ts");
/* harmony import */ var _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../plugin-xml/src/XmlDomParsingEngine */ "./packages/plugin-xml/src/XmlDomParsingEngine.ts");
/* harmony import */ var _utils_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/utils */ "./packages/utils/src/utils.ts");




class YoutubeXmlDomParser extends _plugin_parser_src_AbstractParser__WEBPACK_IMPORTED_MODULE_1__["AbstractParser"] {
    constructor() {
        super(...arguments);
        this.predicate = (item) => {
            const isYoutubeVideo = item instanceof Element &&
                Object(_utils_src_utils__WEBPACK_IMPORTED_MODULE_3__["nodeName"])(item) === 'IFRAME' &&
                item.getAttribute('src').includes('youtu');
            return isYoutubeVideo;
        };
    }
    async parse(item) {
        const youtube = new _YoutubeNode__WEBPACK_IMPORTED_MODULE_0__["YoutubeNode"]();
        youtube.modifiers.append(this.engine.parseAttributes(item));
        return [youtube];
    }
}
YoutubeXmlDomParser.id = _plugin_xml_src_XmlDomParsingEngine__WEBPACK_IMPORTED_MODULE_2__["XmlDomParsingEngine"].id;


/***/ }),

/***/ "./packages/utils/src/Dom.ts":
/*!***********************************!*\
  !*** ./packages/utils/src/Dom.ts ***!
  \***********************************/
/*! exports provided: targetDeepest, nodeLength */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "targetDeepest", function() { return targetDeepest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nodeLength", function() { return nodeLength; });
/**
 * Return the deepest child of a given container at a given offset, and its
 * adapted offset.
 *
 * @param container
 * @param offset
 */
function targetDeepest(container, offset) {
    while (container.hasChildNodes()) {
        let childNodes;
        if (container instanceof Element && container.shadowRoot) {
            childNodes = container.shadowRoot.childNodes;
        }
        else {
            childNodes = container.childNodes;
        }
        if (offset >= childNodes.length) {
            container = container.lastChild;
            // The new container might be a text node, so considering only
            // the `childNodes` property would be wrong.
            offset = nodeLength(container);
        }
        else {
            container = childNodes[offset];
            offset = 0;
        }
    }
    return [container, offset];
}
/**
 * Return the length of a DOM Node.
 *
 * @param node
 */
function nodeLength(node) {
    if (node.nodeType === Node.TEXT_NODE) {
        return node.nodeValue.length;
    }
    else if (node instanceof Element && node.shadowRoot) {
        return node.shadowRoot.childNodes.length;
    }
    else {
        return node.childNodes.length;
    }
}


/***/ }),

/***/ "./packages/utils/src/errors.ts":
/*!**************************************!*\
  !*** ./packages/utils/src/errors.ts ***!
  \**************************************/
/*! exports provided: CustomError, ModeError, ChildError, AtomicityError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomError", function() { return CustomError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModeError", function() { return ModeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildError", function() { return ChildError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AtomicityError", function() { return AtomicityError; });
/**
 * Creates an instance representing a custom error adapting to the constructor
 * name of the custom error and taking advantage of `captureStackTrace` of V8.
 *
 * Source:
 * http://developer.mozilla.org/docs/JavaScript/Reference/Global_Objects/Error
 */
class CustomError extends Error {
    constructor(...params) {
        super(...params);
        this.name = this.constructor.name;
        // Maintains proper stack trace for where our error was thrown.
        if (Error.captureStackTrace) {
            // This is only available on V8.
            Error.captureStackTrace(this, this.constructor);
        }
    }
}
/**
 * Creates an instance representing an error that occurs when a function only
 * allowed to be called in a specific mode is called in a different mode.
 */
class ModeError extends CustomError {
    constructor(mode, ...params) {
        super(...params);
        this.message = `This operation is only allowed in ${mode} mode.`;
    }
}
/**
 * Creates an instance representing an error that occurs when a VNode given as
 * child function parameter is actually not a child of the current VNode.
 */
class ChildError extends CustomError {
    constructor(thisNode, node, ...params) {
        super(...params);
        this.message = `${node.name} is not a child of ${thisNode.name}`;
    }
}
/**
 * Creates an instance representing an error that occurs when an action would
 * violate the atomicity of a VNode.
 */
class AtomicityError extends CustomError {
    constructor(node, ...params) {
        super(...params);
        this.message = `${node.name} is atomic.`;
    }
}


/***/ }),

/***/ "./packages/utils/src/formattingSpace.ts":
/*!***********************************************!*\
  !*** ./packages/utils/src/formattingSpace.ts ***!
  \***********************************************/
/*! exports provided: removeFormattingSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFormattingSpace", function() { return removeFormattingSpace; });
/* harmony import */ var _isBlock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isBlock */ "./packages/utils/src/isBlock.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./packages/utils/src/utils.ts");


/**
 * Return a string with the value of a text node stripped of its formatting
 * space, applying the w3 rules for white space processing
 * TODO: decide what exactly to do with formatting spaces:
 * remove, keep, recompute?
 *
 * @see https://www.w3.org/TR/css-text-3/#white-space-processing
 * @returns {string}
 */
function removeFormattingSpace(node) {
    var _a;
    // TODO: check the value of the `white-space` property
    const text = node.textContent;
    if ((_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.closest('PRE')) {
        return text;
    }
    const spaceBeforeNewline = /([ \t])*(\n)/g;
    const spaceAfterNewline = /(\n)([ \t])*/g;
    const tabs = /\t/g;
    const newlines = /\n/g;
    const consecutiveSpace = /  */g;
    // (Comments refer to the w3 link provided above.)
    // Phase I: Collapsing and Transformation
    let newText = text
        // 1. All spaces and tabs immediately preceding or following a
        //    segment break are removed.
        .replace(spaceBeforeNewline, '$2')
        .replace(spaceAfterNewline, '$1')
        // 2. Segment breaks are transformed for rendering according to the
        //    segment break transformation rules.
        .replace(newlines, ' ')
        // 3. Every tab is converted to a space (U+0020).
        .replace(tabs, ' ')
        // 4. Any space immediately following another collapsible space —
        //    even one outside the boundary of the inline containing that
        //    space, provided both spaces are within the same inline
        //    formatting context—is collapsed to have zero advance width.
        //    (It is invisible, but retains its soft wrap opportunity, if
        //    any.)
        .replace(consecutiveSpace, ' ');
    // Phase II: Trimming and Positioning
    // 1. A sequence of collapsible spaces at the beginning of a line
    //    (ignoring any intervening inline box boundaries) is removed.
    if (_isAtSegmentBreak(node, 'start')) {
        const startSpace = /^ */g;
        newText = newText.replace(startSpace, '');
    }
    // 2. If the tab size is zero, tabs are not rendered. Otherwise, each
    //    tab is rendered as a horizontal shift that lines up the start edge
    //    of the next glyph with the next tab stop. If this distance is less
    //    than 0.5ch, then the subsequent tab stop is used instead. Tab
    //    stops occur at points that are multiples of the tab size from the
    //    block’s starting content edge. The tab size is given by the
    //    tab-size property.
    // TODO
    // 3. A sequence at the end of a line (ignoring any intervening inline
    //    box boundaries) of collapsible spaces (U+0020) and/or ideographic
    //    spaces (U+3000) whose white-space value collapses spaces is
    //    removed.
    if (_isAtSegmentBreak(node, 'end')) {
        const endSpace = /[ \u3000]*$/g;
        newText = newText.replace(endSpace, '');
    }
    return newText;
}
/**
 * Return true if the given node is immediately preceding (`side` === 'end')
 * or following (`side` === 'start') a segment break, to see if its edge
 * space must be removed.
 * A segment break is a sort of line break, not considering automatic breaks
 * that are function of the screen size. In this context, a segment is what
 * you see when you triple click in text in the browser.
 * Eg: `<div><p>◆one◆</p>◆two◆<br>◆three◆</div>` where ◆ = segment breaks.
 *
 * @param {Element} node
 * @param {'start'|'end'} side
 * @returns {boolean}
 */
function _isAtSegmentBreak(node, side) {
    const siblingSide = side === 'start' ? 'previousSibling' : 'nextSibling';
    const sibling = node && node[siblingSide];
    const isAgainstAnotherSegment = sibling && _isSegment(sibling);
    const isAtEdgeOfOwnSegment = _isBlockEdge(node, side);
    // In the DOM, a space before a BR is rendered but a space after a BR isn't.
    const isBeforeBR = side === 'end' && sibling && Object(_utils__WEBPACK_IMPORTED_MODULE_1__["nodeName"])(sibling) === 'BR';
    return (isAgainstAnotherSegment && !isBeforeBR) || isAtEdgeOfOwnSegment;
}
/**
 * Return true if the node is a segment according to W3 formatting model.
 *
 * @param node to check
 */
function _isSegment(node) {
    if (node.nodeType !== Node.ELEMENT_NODE) {
        // Only proper elements can be a segment.
        return false;
    }
    else if (Object(_utils__WEBPACK_IMPORTED_MODULE_1__["nodeName"])(node) === 'BR') {
        // Break (BR) tags end a segment.
        return true;
    }
    else {
        // The W3 specification has many specific cases that defines what is
        // or is not a segment. For the moment, we only handle display: block.
        return Object(_isBlock__WEBPACK_IMPORTED_MODULE_0__["isBlock"])(node);
    }
}
/**
 * Return true if the node is at the given edge of a block.
 *
 * @param node to check
 * @param side of the block to check ('start' or 'end')
 */
function _isBlockEdge(node, side) {
    const ancestorsUpToBlock = [];
    // Move up to the first block ancestor
    let ancestor = node;
    while (ancestor && (_isTextNode(ancestor) || !_isSegment(ancestor))) {
        ancestorsUpToBlock.push(ancestor);
        ancestor = ancestor.parentElement;
    }
    // Return true if no ancestor up to the first block ancestor has a
    // sibling on the specified side
    const siblingSide = side === 'start' ? 'previousSibling' : 'nextSibling';
    return ancestorsUpToBlock.every(ancestor => {
        return !ancestor[siblingSide];
    });
}
/**
 * Return true if the given node is a text node, false otherwise.
 *
 * @param node to check
 */
function _isTextNode(node) {
    return node.nodeType === Node.TEXT_NODE;
}


/***/ }),

/***/ "./packages/utils/src/isBlock.ts":
/*!***************************************!*\
  !*** ./packages/utils/src/isBlock.ts ***!
  \***************************************/
/*! exports provided: isBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBlock", function() { return isBlock; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./packages/utils/src/utils.ts");

/**
 * The following is a complete list of all HTML "block-level" elements.
 *
 * Source:
 * https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
 *
 * */
const blockTagNames = [
    'ADDRESS',
    'ARTICLE',
    'ASIDE',
    'BLOCKQUOTE',
    'DETAILS',
    'DIALOG',
    'DD',
    'DIV',
    'DL',
    'DT',
    'FIELDSET',
    'FIGCAPTION',
    'FIGURE',
    'FOOTER',
    'FORM',
    'H1',
    'H2',
    'H3',
    'H4',
    'H5',
    'H6',
    'HEADER',
    'HGROUP',
    'HR',
    'LI',
    'MAIN',
    'NAV',
    'OL',
    'P',
    'PRE',
    'SECTION',
    'TABLE',
    'UL',
    // The following elements are not in the W3C list, for some reason.
    'TR',
    'TD',
    'TBODY',
    'THEAD',
    'TH',
];
const computedStyles = new WeakMap();
/**
 * Return true if the given node is a block-level element, false otherwise.
 *
 * @param node
 */
function isBlock(node) {
    let result;
    if (node instanceof Element) {
        const tagName = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["nodeName"])(node);
        // every custom jw-* node will be considered as blocks
        if (tagName.startsWith('JW-') || tagName === 'T') {
            return true;
        }
        // We won't call `getComputedStyle` more than once per node.
        let style = computedStyles.get(node);
        if (!style) {
            style = window.getComputedStyle(node);
        }
        // The node might not be in the DOM, in which case it has no CSS values.
        if (style.display) {
            result = !style.display.includes('inline') && style.display !== 'contents';
        }
        else {
            result = blockTagNames.includes(tagName);
        }
    }
    else {
        result = false;
    }
    return result;
}


/***/ }),

/***/ "./packages/utils/src/polyfill.ts":
/*!****************************************!*\
  !*** ./packages/utils/src/polyfill.ts ***!
  \****************************************/
/*! exports provided: elementFromPoint, caretPositionFromPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementFromPoint", function() { return elementFromPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "caretPositionFromPoint", function() { return caretPositionFromPoint; });
/* harmony import */ var _Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Dom */ "./packages/utils/src/Dom.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./packages/utils/src/utils.ts");


function elementFromPoint(x, y) {
    let element = document.elementFromPoint(x, y);
    if (element) {
        let root;
        root = element.ownerDocument;
        while (element.shadowRoot) {
            root = element.shadowRoot;
            element = root.elementFromPoint(x, y);
        }
        return element;
    }
}
function caretPositionFromPoint(x, y) {
    if ((!x && x !== 0) || (!y && y !== 0))
        return;
    // There is no cross-browser function for this, but the three functions below
    // cover all modern browsers as well as the shadow DOM.
    let caretPosition;
    const element = elementFromPoint(x, y);
    if (!element) {
        return;
    }
    const root = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getDocument"])(element);
    if (root.caretPositionFromPoint) {
        caretPosition = root.caretPositionFromPoint(x, y);
    }
    else if (root instanceof ShadowRoot) {
        // Find the nearest node leaf or char in leaf.
        const position = caretPositionFromPointInShadowDom(x, y, element);
        caretPosition = {
            offsetNode: position.node,
            offset: position.offset,
        };
    }
    else {
        const carretRange = root.caretRangeFromPoint(x, y);
        caretPosition = {
            offsetNode: carretRange.startContainer,
            offset: carretRange.startOffset,
        };
    }
    if (caretPosition) {
        const [offsetNode, offset] = Object(_Dom__WEBPACK_IMPORTED_MODULE_0__["targetDeepest"])(caretPosition.offsetNode, caretPosition.offset);
        return { offsetNode, offset };
    }
}
function caretPositionFromPointInShadowDom(x, y, element) {
    const range = document.createRange();
    let distX = Infinity;
    let distY = Infinity;
    let node;
    let offset;
    const leafs = [];
    const elements = [element];
    while (elements.length) {
        const element = elements.shift();
        if (element.childNodes.length) {
            elements.push(...element.childNodes);
        }
        else {
            leafs.push(element);
        }
    }
    // Find the nearest node leaf.
    for (const leaf of leafs) {
        let box;
        if (leaf instanceof Element) {
            box = leaf.getBoundingClientRect();
        }
        else {
            range.setStart(leaf, 0);
            range.setEnd(leaf, leaf.textContent.length);
            box = range.getBoundingClientRect();
        }
        if (box.y + box.height < y) {
            continue;
        }
        let currentOffset = 0;
        let newDistY;
        if (box.y <= y && box.y + box.height >= y) {
            newDistY = 0;
            if (leaf.nodeType === Node.TEXT_NODE) {
                currentOffset = getNearestCharOffset(x, y, leaf);
                range.setStart(leaf, currentOffset);
                range.setEnd(leaf, currentOffset);
                box = range.getBoundingClientRect();
            }
        }
        else {
            newDistY = Math.abs(box.y + box.height / 2 - y);
        }
        let newDistX;
        if (box.x <= x && box.x + box.width >= x) {
            newDistX = 0;
        }
        else {
            newDistX = Math.abs(box.x + box.width / 2 - x);
        }
        if (newDistY < distY) {
            distY = newDistY;
            distX = newDistX;
            node = leaf;
            offset = currentOffset;
        }
        else if (newDistY === distY &&
            ((newDistY === 0 && newDistX <= distX) || (newDistY !== 0 && newDistX > distX))) {
            distY = newDistY;
            distX = newDistX;
            node = leaf;
            offset = currentOffset;
        }
        if (distX === 0 && distY === 0) {
            break;
        }
    }
    return node && { node, offset };
}
function getNearestCharOffset(x, y, text) {
    // Search with a pseudo dichotomic for performance.
    const range = document.createRange();
    const posToTest = [[0, text.textContent.length]];
    const verticalMatches = [];
    while (posToTest.length) {
        const pos = posToTest.pop();
        range.setStart(text, pos[0]);
        range.setEnd(text, pos[1]);
        const box = range.getBoundingClientRect();
        if (box.y <= y && box.y + box.height >= y) {
            if (box.x <= x && box.x + box.width >= x) {
                if (pos[1] - pos[0] <= 1) {
                    return box.x + box.width / 2 <= x ? pos[1] : pos[0];
                }
                const alf = Math.floor((pos[0] + pos[1]) / 2);
                posToTest.push([pos[0], alf], [alf, pos[1]]);
            }
            else {
                verticalMatches.push(pos);
            }
        }
    }
    // Did not found the char, eg: user click on left above the container like
    // the browser we get the nearest char at the same cursor of the pointer.
    let dist = Infinity;
    let offset = 0;
    for (const pos of verticalMatches.reverse()) {
        for (let i = pos[0]; i < pos[1]; i++) {
            range.setStart(text, i);
            range.setEnd(text, i + 1);
            const box = range.getBoundingClientRect();
            const dx = box.x + box.width / 2;
            const dy = box.y + box.height / 2;
            const delta = Math.pow(dx - x, 2) + Math.pow(dy - y, 4);
            if (delta <= dist) {
                dist = delta;
                offset = i + (dx < x ? 1 : 0);
            }
        }
    }
    return offset;
}


/***/ }),

/***/ "./packages/utils/src/utils.ts":
/*!*************************************!*\
  !*** ./packages/utils/src/utils.ts ***!
  \*************************************/
/*! exports provided: isConstructor, deepEqualObjects, toUnicode, nodeLength, distinct, nodeName, getDocument */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isConstructor", function() { return isConstructor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deepEqualObjects", function() { return deepEqualObjects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toUnicode", function() { return toUnicode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nodeLength", function() { return nodeLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distinct", function() { return distinct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nodeName", function() { return nodeName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDocument", function() { return getDocument; });
/**
 * Return whether the given constructor is a constructor of given superClass.
 *
 * @param constructor
 * @param superClass
 */
function isConstructor(constructor, superClass) {
    return constructor.prototype instanceof superClass || constructor === superClass;
}
/**
 * Return true if object a is deep equal to object b, false otherwise.
 *
 * @param a
 * @param b
 */
function deepEqualObjects(a, b) {
    const aKeys = Object.keys(a);
    if (aKeys.length !== Object.keys(b).length)
        return false;
    for (const key of aKeys) {
        const aValue = a[key];
        const bValue = b[key];
        if (typeof aValue === 'object') {
            if (!deepEqualObjects(aValue, bValue)) {
                return false;
            }
        }
        else {
            if (aValue !== bValue) {
                return false;
            }
        }
    }
    return true;
}
/**
 * Convert certain special characters to unicode.
 */
function toUnicode(string) {
    if (string === ' ') {
        return '\u00A0';
    }
    if (string === '\n') {
        return '\u000d';
    }
    if (string === '\t') {
        return '\u0009';
    }
    return string;
}
/**
 * Return the length of a DOM Node.
 *
 * @param node
 */
function nodeLength(node) {
    const isTextNode = node.nodeType === Node.TEXT_NODE;
    const content = isTextNode ? node.nodeValue : node.childNodes;
    return content.length;
}
/**
 * Return a duplicate-free version of an array.
 *
 * @param array
 */
function distinct(array) {
    return Array.from(new Set(array));
}
/**
 * Return the uppercase name of the given DOM node.
 *
 * @param node
 */
function nodeName(node) {
    return node.nodeName.toUpperCase();
}
function getDocument(node) {
    let root;
    while (node && !root) {
        if (node instanceof Document || node instanceof ShadowRoot) {
            root = node;
        }
        else {
            node = node.parentNode;
        }
    }
    return root || document;
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
return JWEditor
});