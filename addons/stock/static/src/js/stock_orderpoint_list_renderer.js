odoo.define('stock.StockOrderpointListRenderer', function (require) {
"use strict";

const core = require('web.core');
const ListRenderer = require('web.ListRenderer');

const _t = core._t;
const QWeb = core.qweb;

var StockOrderpointListRenderer = ListRenderer.extend({
    /**
     * @override
     */
    _renderBodyCell(record, node, colIndex, options) {
        var $td = this._super(...arguments);
        if (!this.state.isSample) {
            return $td;
        }

        $td.prop('title', '');
        $td.prop('disabled', true);
        var sampleTooltip = '';
        if (node.attrs.name === 'route_id') {
            sampleTooltip = _t('Determine which document should be generated by the replenishment (request for quotation, manufacturing order).')
        } else if (node.attrs.name === 'product_min_qty' || node.attrs.name === 'product_max_qty') {
            sampleTooltip = _t('When your forecasted stock goes below the minimum quantity, we suggest you to replenish in order that your forecasted stock reaches the maximum quantity.');
        } else if (node.attrs.name === 'qty_to_order') {
            sampleTooltip = _t('Quantity to order for your forecasted stock to reach the maximum quantity.');
        } else if (node.attrs.name === 'location_id') {
            sampleTooltip = _t('Location for which the replenishment is necessary.');
        }
        if (sampleTooltip !== '') {
            this._addSampleTooltip($td, sampleTooltip);
        }
        return $td;
    },

    /**
     * @override
     */
    _renderButton(record, node) {
        var $button = this._super(...arguments);
        if (!this.state.isSample) {
            return $button;
        }

        $button.unbind();
        $button.removeClass('o_invisible_modifier');
        var sampleTooltip = '';
        if (node.attrs.name === 'action_replenish_auto') {
            sampleTooltip = _t('Create an automated reordering rule which will trigger replenishment documents (requests for quotation, manufacturing orders) when your forecasted stock goes below the minimum quantity.');
        } else if (node.attrs.string === 'Snooze') {
            sampleTooltip = _t('Postpone the replenishment to a future date.');
        }
        if (sampleTooltip !== '') {
            this._addSampleTooltip($button, sampleTooltip);
        }
        return $button;
    },

    /**
     * @override
     */
    _renderRow(record) {
        var $tr = this._super(...arguments);
        if (!this.state.isSample) {
            return $tr;
        }

        var product_name = record.data.product_id[1];
        var qty_to_order = record.data.qty_to_order;
        var route_name = record.data.route_id[1];
        var $button = $tr.find('[name="action_replenish"]');
        var sampleTooltip = '';
        if (route_name === 'Buy') {
            sampleTooltip = _.str.sprintf(_t('Generate a request for quotation for %d units to the default vendor of %s.'), qty_to_order, product_name);
        } else {
            sampleTooltip = _.str.sprintf(_t('Generate a manufacturing order for %d units of %s.'), qty_to_order, product_name);
        }
        this._addSampleTooltip($button, sampleTooltip);
        return $tr;
    },

    /**
     * @override
     */
    _suppressFocusableElements() {
        this._super(...arguments);
        if (!this.state.isSample) {
            return;
        }

        var sampleEls = this.el.querySelectorAll('.o_sample_data_disabled');
        for (var sampleEl of sampleEls) {
            sampleEl.classList.add('o_stock_sample_data_disabled');
        }
    },

    /**
     * @override
     */
    async _render() {
        await this._super(...arguments);
        if (!this.state.isSample) {
            return;
        }

        Object.values(this.allFieldWidgets).forEach(el => {
            var widget = el[0];
            var value = JSON.parse(widget.value);
            var $popover = $(QWeb.render(value.popoverTemplate, value));
            $popover.addClass('o_stock_sample_popover');
            widget.$el.find('a').popover('dispose').popover({
                content: $popover,
                html: true,
                placement: 'top',
                title: 'Replenishment',
                trigger: 'hover',
                delay: {'show': 0, 'hide': 100},
            });
        });
    },

    /**
     * @override
     * @private
     * @returns {Promise}
     */
    async _renderView() {
        return this._super(...arguments).then(res => {
            if (!this.state.isSample) {
                return;
            }

            var sample_tooltip = QWeb.render('StockOrderpoint.sampleTooltip');
            this.$el.append(sample_tooltip);
        });
    },

    _addSampleTooltip($element, tooltip) {
        $element.hover(this._sampleOnHover(tooltip).bind(this));
        $element.mouseleave(this._sampleOnMouseLeave.bind(this));
    },

    _sampleOnHover(tooltip) {
        return function(ev) {
            ev.stopPropagation();
            this.$el.find('#sample_tooltip').text(tooltip);
        }
    },

    _sampleOnMouseLeave(ev) {
        ev.stopPropagation();
        this.$el.find('#sample_tooltip').text('Create your own reordering rule to see on time when you need to launch an order, as well as which quantity should be replenished, to avoid going below your minimum stock quantity.');
    },
});

return StockOrderpointListRenderer;

});
