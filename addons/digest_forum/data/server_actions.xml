<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="server_action_find_best_contributeur" model="ir.actions.server">
        <field name="name">Find Best Contributeur</field>
        <field name="model_id" ref="base.model_ir_actions_server"/>
        <field name="state">code</field>
        <field name="code"><![CDATA[
weight_given_vote = 1
weight_recieved_vote = 2
weight_post_created = 3

def count_vote(votes):
  up_votes, down_votes = 0, 0
  
  for vote in votes:
    if vote['vote'] == '1':
      up_votes = vote['vote_count']
    elif vote['vote'] == '-1':
      down_votes = vote['vote_count']
  return up_votes - down_votes

def get_score(user):
  domain_60_days = ('write_date', '>', datetime.datetime.now() - datetime.timedelta(days=60))
  score = count_vote(env['forum.post.vote'].read_group([('recipient_id', '=', user.id), domain_60_days], ["vote"], groupby=["vote"]))*weight_recieved_vote
  score += count_vote(env['forum.post.vote'].read_group([('user_id', '=', user.id), domain_60_days], ["vote"], groupby=["vote"]))*weight_given_vote
  nb_posts = len(env['forum.post'].search([('create_uid', '=', user.id), ('parent_id', '=', False), domain_60_days]))
  score += nb_posts*weight_post_created
  return score, nb_posts

internal_contributors = env['res.users'].search([('is_published', '=', True),('share','=',False)])

users= []

for user in internal_contributors:
  score, nb_posts = get_score(user)
  users.append({'score' : score, 'nb_posts': nb_posts,'user' : user})
  
users.sort(key=lambda k: k['score'], reverse=True) 

best_user = users[0]

action = users[:3]
#raise Warning("Best Contributor %s (%s)"% (best_user['user'].name, best_user['score']))
        ]]>
        </field>
    </record>
</odoo>