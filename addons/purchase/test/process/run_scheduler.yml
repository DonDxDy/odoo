-
  In order to test the scheduler to generate RFQ, I create a new product

-
  !record {model: product.template, id: scheduler_product_template}:
    name: scheduler prod
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
-
  !record {model: product.product, id: scheduler_product, view: False}:
    name: scheduler prod
    type: product
    product_tmpl_id: scheduler_product_template
    seller_ids:
      - delay: 1
        name: base.res_partner_2
        min_qty: 5.0
        product_tmpl_id: scheduler_product_template
-
  !record {model: product.supplierinfo, id: product_seller}:
    name: seller
    product_id: scheduler_product
    name: base.res_partner_3
    product_tmpl_id: scheduler_product_template

-
  Add Buy route
- 
  !python {model: product.product}: |
    self.write(cr, uid, [ref("scheduler_product")], {"route_ids": [(4, ref("purchase.route_warehouse0_buy"))]})
-
  I create a procurement order.
-
  !record {model: procurement.order, id: procurement_order_testcase0}:
    location_id: stock.stock_location_stock
    name: Test scheduler for RFQ
    product_id: scheduler_product
    product_qty: 15.0
-
  I run the scheduler.
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  I check Generated RFQ.
-
  !python {model: procurement.order}: |
    procurement = self.browse(cr, uid, ref('procurement_order_testcase0'))
    assert procurement.purchase_line_id, 'RFQ should be generated!'
-
  I delete the line from the purchase order and check that the move and the procurement are cancelled
-
  !python {model: procurement.order}: |
    procurement = self.browse(cr, uid, ref('procurement_order_testcase0'))
    procurement.purchase_line_id.unlink()
    procurement.refresh()
    assert procurement.state == 'exception', 'Procurement should be in exception'
