# -*- coding: utf-8 -*-
import math
import random
from datetime import datetime, timedelta
from odoo import models, fields, api, exceptions
from pytz import UTC, timezone

def _get_UTC_time(time, timeZone):
    local = timezone (timeZone)
    local_dt = local.localize(time, is_dst=None)
    utc_dt = local_dt.astimezone(UTC)
    return utc_dt

def _get_hour_minute_from_float(time):
    decimal, integer = math.modf(time)
    hour = int(round(integer))
    minute = int(round((decimal * 60)))
    return hour, minute

def _format_hour_from_Float(time):
    hour, minute = _get_hour_minute_from_float(time)
    result = str(hour).zfill(2) + ":" + str(minute).zfill(2)
    return result

class TaskType(models.Model):
    _name = 'coopplanning.task.type'

    name = fields.Char()
    description = fields.Text()
    area = fields.Char()
    active = fields.Boolean(default=True)


class DayNumber(models.Model):
    _name = 'coopplanning.daynumber'

    name = fields.Char()
    number = fields.Integer("Day Number", help="From 1 to N, When you will instanciate your planning, Day 1 will be the start date of the instance, Day 2 the second, etc...")
    active = fields.Boolean(default=True)


class TaskTemplate(models.Model):
    _name = 'coopplanning.task.template'

    name = fields.Char(required=True)
    description = fields.Text()
    
    day_nb_id = fields.Many2one('coopplanning.daynumber', string='Day')
    task_type_id = fields.Many2one('coopplanning.task.type', string="Task Type")
    start_time = fields.Float()
    end_time = fields.Float()
    duration = fields.Float(compute="_compute_duration", string='Duration', help="Duration in Hour")
    worker_nb = fields.Integer(string="Number of worker", help="Max number of worker for this task", default=1)
    worker_ids = fields.Many2many('coopplanning.partner', string="Recurrent worker assigned")
    active = fields.Boolean(default=True)
    floating = fields.Boolean(default=False)

    # Related fields
    task_area = fields.Char(related='task_type_id.area', string='Task Area')
    day_nb = fields.Integer(related='day_nb_id.number', string='Day Number')

    @api.depends('start_time', 'end_time')
    def _compute_duration(self):
        for task in self:
            task.duration = task.end_time - task.start_time
    
    @api.multi
    def generate_task(self):
        # generate a generic task
        self.ensure_one()

        #Validation
        if(self.worker_nb > len(self.worker_ids)):
            raise exceptions.ValidationError('This task needs %s workers but only %s are available' % (self.worker_nb,len(self.worker_ids)))
#             return {'warning': {
#                        'title': 'Workers not full filled',
#                        'message': 'this task needs %s workers but only %s are available' % (self.worker_nb,len(self.worker_ids))
#                    }}

        task = self.env['coopplanning.task']
        tomorrow = datetime.today() + timedelta(days=1)
        # Need to define the UTC timezone to avoid difference between date in system and date shown to user.
        hour, minute = _get_hour_minute_from_float(self.start_time)
        start_dt = _get_UTC_time(datetime(year=tomorrow.year, month=tomorrow.month, day=tomorrow.day, hour=hour, minute=minute), "Europe/Brussels")
        sample_worker_ids = random.sample(range(0, len(self.worker_ids)), self.worker_nb)
        # and create it for every worker needed for the task
        for i in range(0, self.worker_nb):
            worker_id = sample_worker_ids[i]
            # for each needed worker, create a recordset with foloowing values
            task.create({
                'name' : "{name} ({start} - {end}) - {worker}".format(name=self.name, start=_format_hour_from_Float(self.start_time), end=_format_hour_from_Float(self.end_time), worker=self.worker_ids[worker_id].name),
                'worker_id' : self.worker_ids[worker_id].id,
                'start_time' : start_dt,
                'end_time' : start_dt + timedelta(hours=self.duration),
                'task_template_id' : self.id, # wrong error, the model has no id defined because it is autogenerated by ORM.
                'task_type_id' : self.task_type_id.id
            })
    
    #Solution : Empty the field worker_ids when floating is selected to be sure no worker will be pre assigned to the task 
    # ????????????????????
    @api.onchange('floating')
    def _onchange_floating(self):
        if self.floating:
            self.worker_ids = self.env['coopplanning.partner'] # ???????????????????