OptionSpec(server, '', 'addons_path', long_flag="--addons-path", type=comma(addons_path), rtype=','.join, action='append', default=[pathlib.Path(__file__).parent.joinpath('addons').resolve()], envvar=None, metavar='DIRPATH', help="specify additional addons paths")
OptionSpec(server, '', 'upgrade_path', long_flag="--upgrade-path", type=upgrade_path, rtype=str, action='store', default=pathlib.Path(__file__).parent.joinpath('addons','base','maintenance','migrations').resolve(), envvar=None, metavar='DIRPATH', help="specify an additional upgrade path.")
OptionSpec(server, '', 'data_dir', short_flag="-D", long_flag="--data-dir", type=data_dir, rtype=str, action='store', default=get_default_datadir(), envvar=None, metavar=None, help="Directory where to store Odoo data")
OptionSpec(server, '', 'log_level', long_flag="--log-level", type=str, rtype=str, action='store', default='info', envvar=None, metavar='LEVEL', help="specify the level of the logging")
OptionSpec(server, '', 'logfile', long_flag="--logfile", type=checkfile('w'), rtype=str, action='store', default=None, envvar=None, metavar='FILEPATH', help="file where the server log will be stored")
OptionSpec(server, '', 'syslog', long_flag="--syslog", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="Send the log to the syslog server")
OptionSpec(server, '', 'log_handler', long_flag="--log-handler", type=str, rtype=str, action='append', default=[':INFO'], envvar=None, metavar=None, help='setup a handler at LEVEL for a given PREFIX. An empty PREFIX indicates the root logger. This option can be repeated. Example: "odoo.orm:DEBUG" or "werkzeug:CRITICAL" (default: ":INFO")')
OptionSpec(server, '', 'config', short_flag="-c", long_flag="--config", type=checkfile('r'), rtype=str, action='store', default=get_odoorc(), envvar=None, metavar='FILEPATH', help="specify alternate config file name")
OptionSpec(server, '', 'save', short_flag="-s", long_flag="--save", type=checkfile('w'), rtype=str, action='store', default=None, const=get_odoorc(), envvar=None, metavar='FILEPATH', help="save parsed config in PATH")
OptionSpec(server, '', 'init', short_flag="-i", long_flag="--init", type=comma(str), rtype=','.join, action='append', default=[], envvar=None, metavar=None, help='install one or more modules (comma-separated list or repeated option, use "all" for all modules), requires -d')
OptionSpec(server, '', 'update', short_flag="-u", long_flag="--update", type=comma(str), rtype=','.join, action='append', default=[], envvar=None, metavar=None, help='update one or more modules (comma-separated list or repeated option, use "all" for all modules), requires -d.')
OptionSpec(server, '', 'without_demo', long_flag="--without-demo", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help='disable loading demo data for modules to be installed (comma-separated or repeated option, use "all" for all modules), requires -d and -i.')
OptionSpec(server, '', 'server_wide_modules', long_flag="--load", type=comma(str), rtype=','.join, action='append', default=['base','web'], envvar=None, metavar='MODULE', help="framework modules to load once for all databases (comma-separated or repeated option)")
OptionSpec(server, '', 'pidfile', long_flag="--pidfile", type=checkfile('w'), rtype=str, action='store', default=None, envvar=None, metavar='FILEPATH', help="file where the server pid will be stored")
OptionSpec(server, '', 'http_interface', long_flag="--http-interface", type=str, rtype=str, action='store', default='', envvar=None, metavar='INTERFACE', help="Listen interface address for HTTP services. Keep empty to listen on all interfaces (0.0.0.0)")
OptionSpec(server, '', 'http_port', short_flag="-p", long_flag="--http-port", type=int, rtype=str, action='store', default=8069, envvar=None, metavar='PORT', help="Listen port for the main HTTP service")
OptionSpec(server, '', 'longpolling_port', long_flag="--longpolling-port", type=int, rtype=str, action='store', default=8072, envvar=None, metavar='PORT', help="Listen port for the longpolling HTTP service")
OptionSpec(server, '', 'http_enable', long_flag="--no-http", type=str, rtype=str, action='store_false', default=None, envvar=None, metavar=None, help="Disable the HTTP and Longpolling services entirely")
OptionSpec(server, '', 'proxy_mode', long_flag="--proxy-mode", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="Activate reverse proxy WSGI wrappers (headers rewriting) Only enable this when running behind a trusted web proxy!")
OptionSpec(server, '', 'max_cron_threads', long_flag="--max-cron-threads", type=int, rtype=str, action='store', default=2, envvar=None, metavar=None, help="Maximum number of threads processing concurrently cron jobs.")
OptionSpec(server, '', 'limit_time_real_cron', long_flag="--limit-time-real-cron", type=int, rtype=str, action='store', default=DeprecatedAlias('limit_time_real'), envvar=None, metavar=None, help="Maximum allowed Real time per cron job. (default: --limit-time-real). Set to 0 for no limit.")
OptionSpec(server, '', 'dbfilter', long_flag="--db-filter", type=str, rtype=str, action='store', default='', envvar=None, metavar='REGEXP', help="Regular expressions for filtering available databases for Web UI. The expression can use %%d (domain) and %%h (host) placeholders.")
OptionSpec(server, '', 'test_file', long_flag="--test-file", type=checkfile('r'), rtype=str, action='store', default=None, envvar=None, metavar='FILEPATH', help="Launch a python test file.")
OptionSpec(server, '', 'test_enable', long_flag="--test-enable", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="Enable unit tests while installing or upgrading a module.")
OptionSpec(server, '', 'test_tags', long_flag="--test-tags", type=comma(str), rtype=','.join, action='append', default=[], envvar=None, metavar=None, help=textwrap.dedent("""\
    Comma-separated or repeated option list of spec to filter which tests to execute. Enable unit tests if set.
    A filter spec has the format: [-][tag][/module][:class][.method]
    The '-' specifies if we want to include or exclude tests matching this spec.
    The tag will match tags added on a class with a @tagged decorator. By default tag value is 'standard' when not
    given on include mode. '*' will match all tags. Tag will also match module name (deprecated, use /module)
    The module, class, and method will respectively match the module name, test class name and test method name.
    examples: :TestClass.test_func,/test_module,external"""))
OptionSpec(server, '', 'screencasts', long_flag="--screencasts", type=checkdir('w'), rtype=str, action='store', default=fullpath(tempfile.gettempdir()).joinpath('odoo_tests'), envvar=None, metavar='DIRPATH', help="Screencasts will go in DIR/<db_name>/screencasts.")
OptionSpec(server, '', 'screenshots', long_flag="--screenshots", type=checkdir('w'), rtype=str, action='store', default=fullpath(tempfile.gettempdir()).joinpath('odoo_tests'), envvar=None, metavar='DIRPATH', help="Screenshots will go in DIR/<db_name>/screenshots.")
OptionSpec(server, '', 'log_handler', long_flag="--log-request", type=str, rtype=str, action='append_const', default=None, envvar=None, metavar=None, help=
OptionSpec(server, '', 'log_handler', long_flag="--log-response", type=str, rtype=str, action='append_const', default=None, envvar=None, metavar=None, help=
OptionSpec(server, '', 'log_handler', long_flag="--log-web", type=str, rtype=str, action='append_const', default=None, envvar=None, metavar=None, help=
OptionSpec(server, '', 'log_handler', long_flag="--log-sql", type=str, rtype=str, action='append_const', default=None, envvar=None, metavar=None, help=
OptionSpec(server, '', 'log_db', long_flag="--log-db", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="Enable database logs record")
OptionSpec(server, '', 'log_db_level', long_flag="--log-db-level", type=str, rtype=str, action='store', default='warning', envvar=None, metavar='LEVEL', help="specify the level of the database logging")
OptionSpec(server, '', 'email_from', long_flag="--email-from", type=str, rtype=str, action='store', default=None, envvar=None, metavar='EMAIL', help="specify the SMTP email address for sending email")
OptionSpec(server, '', 'smtp_server', long_flag="--smtp", type=str, rtype=str, action='store', default='localhost', envvar=None, metavar='HOST', help="specify the SMTP server for sending email")
OptionSpec(server, '', 'smtp_port', long_flag="--smtp-port", type=int, rtype=str, action='store', default=25, envvar=None, metavar='PORT', help="specify the SMTP port")
OptionSpec(server, '', 'smtp_ssl', long_flag="--smtp-ssl", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="if passed, SMTP connections will be encrypted with SSL (STARTTLS)")
OptionSpec(server, '', 'smtp_user', long_flag="--smtp-user", type=str, rtype=str, action='store', default=None, envvar=None, metavar=None, help="specify the SMTP username for sending email")
OptionSpec(server, '', 'smtp_password', long_flag="--smtp-password", type=str, rtype=str, action='store', default=None, envvar=None, metavar=None, help="specify the SMTP password for sending email")
OptionSpec(server, '', 'db_name', short_flag="-d", long_flag="--database", type=str, rtype=str, action='store', default=None, envvar='PGDATABASE', metavar='DBNAME', help="database name to connect to")
OptionSpec(server, '', 'db_user', short_flag="-r", long_flag="--db_user", type=str, rtype=str, action='store', default=None, envvar='PGUSER', metavar='USERNAME', help="database user to connect as")
OptionSpec(server, '', 'db_password', short_flag="-w", long_flag="--db_password", type=str, rtype=str, action='store', default=None, envvar='PGPASSWORD', metavar='PWD', help='password to be used if the database demands password authentication. Using this argument is a security risk, see the "The Password File" section in the PostgreSQL documentation for alternatives.')
OptionSpec(server, '', 'db_host', long_flag="--db_host", type=str, rtype=str, action='store', default=None, envvar='PGHOST', metavar='HOSTNAME', help="database server host or socket directory")
OptionSpec(server, '', 'db_port', long_flag="--db_port", type=str, rtype=str, action='store', default=None, envvar='PGPORT', metavar='PORT', help="database server port")
OptionSpec(server, '', 'db_sslmode', long_flag="--db_sslmode", type=str, rtype=str, action='store', default='prefer', envvar=None, metavar='METHOD', help="determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server")
OptionSpec(server, '', 'pg_path', long_flag="--pg_path", type=pg_utils_path, rtype=str, action='store', default=None, envvar=None, metavar='DIRPATH', help="postgres utilities directory")
OptionSpec(server, '', 'db_template', long_flag="--db-template", type=str, rtype=str, action='store', default='template0', envvar=None, metavar='DBNAME', help="custom database template to create a new database")
OptionSpec(server, '', 'db_maxconn', long_flag="--db_maxconn", type=int, rtype=str, action='store', default=64, envvar=None, metavar=None, help="specify the maximum number of physical connections to PostgreSQL")
OptionSpec(server, '', 'unaccent', long_flag="--unaccent", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="Try to enable the unaccent extension when creating new databases")
OptionSpec(server, '', 'transient_age_limit', long_flag="--transient-age-limit", type=float, rtype=str, action='store', default=1.0, envvar=None, metavar='HOUR', help="Time in hours records created with a TransientModel (mosly wizard) are kept in the database.")
OptionSpec(server, '', 'osv_memory_age_limit', long_flag="--osv-memory-age-limit", type=float, rtype=str, action='store', default=DeprecatedAlias('transient_age_limit'), envvar=None, metavar=None, help=argparse.SUPPRESS)
OptionSpec(server, '', 'load_language', long_flag="--load-language", type=comma(str), rtype=','.join, action='store', default=None, envvar=None, metavar='LANGCODE', help="specifies the languages for the translations you want to be loaded")
OptionSpec(server, '', 'language', short_flag="-l", long_flag="--language", type=str, rtype=str, action='store', default=None, envvar=None, metavar='LANGCODE', help="specify the language of the translation file. Use it with --i18n-export or --i18n-import")
OptionSpec(server, '', 'translate_out', long_flag="--i18n-export", type=i18n_output_file, rtype=str, action='store', default=None, envvar=None, metavar='FILEPATH', help="export all sentences to be translated to a CSV file, a PO file or a TGZ archive and exit. The '-l' option is required")
OptionSpec(server, '', 'tranlate_in', long_flag="--i18n-import", type=i18n_input_file, rtype=str, action='store', default=None, envvar=None, metavar='FILEPATH', help="import a CSV or a PO file with translations and exit. The '-l' option is required.")
OptionSpec(server, '', 'overwrite_existing_translations', long_flag="--i18n-overwrite", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="overwrites existing translation terms on updating a module or importing a CSV or a PO file. Use with -u/--update or --i18n-import.")
OptionSpec(server, '', 'translate_modules', long_flag="--modules", type=comma(str), rtype=','.join, action='store', default=None, envvar=None, metavar=None, help="specify modules to export. Use in combination with --i18n-export")
OptionSpec(server, '', 'list_db', long_flag="--no-database-list", type=str, rtype=str, action='store_false', default=None, envvar=None, metavar=None, help="Disable the ability to obtain or view the list of databases. Also disable access to the database manager and selector, so be sure to set a proper --database parameter first.")
OptionSpec(server, '', 'dev_mode', long_flag="--dev", type=comma(str), rtype=','.join, action='append', default=[], envvar=None, metavar=None, help="Enable developer mode")
OptionSpec(server, '', 'shell_interface', long_flag="--shell-interface", type=str, rtype=str, action='store', default='python', envvar=None, metavar=None, help="Specify a preferred REPL to use in shell mode")
OptionSpec(server, '', 'stop_after_init', long_flag="--stop-after-init", type=str, rtype=str, action='store_true', default=None, envvar=None, metavar=None, help="stop the server after its initialization")
OptionSpec(server, '', 'geoip_database', long_flag="--geoip-db", type=checkfile('r'), rtype=str, action='store', default=pathlib.Path('/usr/share/GeoIP/GeoLite2-City.mmdb'), envvar=None, metavar=None, help="Absolute path to the GeoIP database file.")
OptionSpec(server, '', 'workers', long_flag="--workers", type=int, rtype=str, action='store', default=0, envvar=None, metavar=None, help="Specify the number of workers, 0 disable prefork mode.")
OptionSpec(server, '', 'limit_memory_soft', long_flag="--limit-memory-soft", type=int, rtype=str, action='store', default=2048*1024*1024, envvar=None, metavar='BYTES', help="Maximum allowed virtual memory per worker, when reached the worker be reset after the current request (default 2048MiB).")
OptionSpec(server, '', 'limit_memory_hard', long_flag="--limit-memory-hard", type=int, rtype=str, action='store', default=2560*1024*1024, envvar=None, metavar='BYTES', help="Maximum allowed virtual memory per worker (in bytes), when reached, any memory allocation will fail (default 2560MiB).")
OptionSpec(server, '', 'limit_time_cpu', long_flag="--limit-time-cpu", type=int, rtype=str, action='store', default=60, envvar=None, metavar='SECONDS', help="Maximum allowed CPU time per request (default 60).")
OptionSpec(server, '', 'limit_time_real', long_flag="--limit-time-real", type=int, rtype=str, action='store', default=120, envvar=None, metavar='SECONDS', help="Maximum allowed Real time per request (default 120).")
OptionSpec(server, '', 'limit_request', long_flag="--limit-request", type=int, rtype=str, action='store', default=8192, envvar=None, metavar=None, help="Maximum number of request to be processed per worker (default 8192).")
OptionSpec(populate, '', 'population_size', long_flag="--size", type=str, rtype=str, action='store', default='small', envvar=None, metavar=None, help="Populate database with auto-generated data")
OptionSpec(populate, '', 'populate_models', long_flag="--models", type=comma(str), rtype=','.join, action='append', default=None, envvar=None, metavar='MODEL OR PATTERN', help="List of model (comma separated or repeated option) or pattern")